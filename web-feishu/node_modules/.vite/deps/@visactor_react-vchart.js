import {
  esm_default,
  isEqual,
  isNil_default,
  pickWithout
} from "./chunk-2QAZGZQ3.js";
import "./chunk-7EWILLDK.js";
import "./chunk-XUX2WAK7.js";
import {
  require_react_is
} from "./chunk-5ACYLQYX.js";
import {
  require_react
} from "./chunk-WF7JQCZZ.js";
import {
  __toESM
} from "./chunk-75NXEXD4.js";

// node_modules/@visactor/react-vchart/esm/charts/BaseChart.js
var import_react5 = __toESM(require_react());

// node_modules/@visactor/react-vchart/esm/containers/withContainer.js
var import_react = __toESM(require_react());
var __rest = function(s, e) {
  var t = {};
  for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0 && (t[p] = s[p]);
  if (null != s && "function" == typeof Object.getOwnPropertySymbols) {
    var i = 0;
    for (p = Object.getOwnPropertySymbols(s); i < p.length; i++) e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]) && (t[p[i]] = s[p[i]]);
  }
  return t;
};
function withContainer(Comp, name = "ChartContainer", getProps) {
  const Cls = import_react.default.forwardRef((props, ref) => {
    const container = (0, import_react.useRef)(), [inited, setInited] = (0, import_react.useState)(false), { className, style, width } = props, options = __rest(props, ["className", "style", "width"]);
    return (0, import_react.useLayoutEffect)(() => {
      setInited(true);
    }, []), import_react.default.createElement("div", {
      ref: container,
      className,
      style: Object.assign({
        position: "relative",
        height: props.height || "100%",
        width: props.width || "100%"
      }, style)
    }, inited ? import_react.default.createElement(Comp, Object.assign({
      ref,
      container: container.current
    }, getProps ? getProps(options) : options)) : import_react.default.createElement(import_react.default.Fragment, null));
  });
  return Cls.displayName = name || Comp.name, Cls;
}

// node_modules/@visactor/react-vchart/esm/context/chart.js
var import_react2 = __toESM(require_react());
var ChartContext = import_react2.default.createContext(null);
ChartContext.displayName = "ChartContext";
var chart_default = ChartContext;

// node_modules/@visactor/react-vchart/esm/context/view.js
var import_react3 = __toESM(require_react());
var ViewContext = import_react3.default.createContext(null);
ViewContext.displayName = "ViewContext";
var view_default = ViewContext;

// node_modules/@visactor/react-vchart/esm/util.js
var import_react4 = __toESM(require_react());
var import_react_is = __toESM(require_react_is());
var id = 0;
var uid = (prefix) => prefix ? `${prefix}-${id++}` : "" + id++;
var toArray = (children) => {
  let result = [];
  return import_react4.default.Children.forEach(children, (child) => {
    isNil_default(child) || ((0, import_react_is.isFragment)(child) ? result = result.concat(toArray(child.props.children)) : result.push(child));
  }), result;
};

// node_modules/@visactor/react-vchart/esm/constants.js
var REACT_PRIVATE_PROPS = ["children", "hooks", "ref"];

// node_modules/@visactor/react-vchart/esm/eventsUtils.js
var REACT_TO_VCHART_EVENTS = {
  onPointerDown: "pointerdown",
  onPointerUp: "pointerup",
  onPointerUpOutside: "pointerupoutside",
  onPointerTap: "pointertap",
  onPointerOver: "pointerover",
  onPointerMove: "pointermove",
  onPointerEnter: "pointerenter",
  onPointerLeave: "pointerleave",
  onPointerOut: "pointerout",
  onMouseDown: "mousedown",
  onMouseUp: "mouseup",
  onMouseUpOutside: "mouseupoutside",
  onMouseMove: "mousemove",
  onMouseOver: "mouseover",
  onMouseOut: "mouseout",
  onMouseEnter: "mouseenter",
  onMouseLeave: "mouseleave",
  onPinch: "pinch",
  onPinchStart: "pinchstart",
  onPinchEnd: "pinchend",
  onPan: "pan",
  onPanStart: "panstart",
  onPanEnd: "panend",
  onDrag: "drag",
  onDragStart: "dragstart",
  onDragEnter: "dragenter",
  onDragLeave: "dragleave",
  onDragOver: "dragover",
  onDragEnd: "dragend",
  onRightDown: "rightdown",
  onRightUp: "rightup",
  onRightUpOutside: "rightupoutside",
  onTouchStart: "touchstart",
  onTouchEnd: "touchend",
  onTouchEndOutside: "touchendoutside",
  onTouchMove: "touchmove",
  onTouchCancel: "touchcancel",
  onPress: "press",
  onPressUp: "pressup",
  onPressEnd: "pressend",
  onSwipe: "swipe",
  onDrop: "drop",
  onWeel: "wheel",
  onClick: "click",
  onDblClick: "dblclick"
};
var LEGEND_CUSTOMIZED_EVENTS = {
  onLegendItemHover: "legendItemHover",
  onLegendItemUnHover: "legendItemUnHover",
  onLegendItemClick: "legendItemClick",
  onLegendFilter: "legendFilter",
  onLegendSelectedDataChange: "legendSelectedDataChange"
};
var BRUSH_CUSTOMIZED_EVENTS = {
  onBrushStart: "brushStart",
  onBrushChange: "brushChange",
  onBrushEnd: "brushEnd",
  onBrushClear: "brushClear"
};
var DATAZOOM_CUSTOMIZED_EVENTS = {
  onDataZoomChange: "dataZoomChange"
};
var PLAYER_CUSTOMIZED_EVENTS = {
  onPlayerPlay: "playerPlay",
  onPlayerPause: "playerPause",
  onPlayerEnd: "playerEnd",
  onPlayerChange: "playerChange",
  onPlayerForward: "playerForward",
  onPlayerBackward: "playerBackward"
};
var SCROLLBAR_CUSTOMIZED_EVENTS = {
  onScrollBarChange: "scrollBarChange"
};
var DIMENSION_EVENTS = {
  onDimensionHover: "dimensionHover",
  onDimensionClick: "dimensionClick"
};
var HIERARCHY_EVENTS = {
  onDrill: "drill"
};
var CHART_LIFECYCLE_EVENTS = {
  onInitialized: "initialized",
  onRendered: "rendered",
  onRenderFinished: "renderFinished",
  onAnimationFinished: "animationFinished",
  onLayoutStart: "layoutStart",
  onLayoutEnd: "layoutEnd"
};
var CHART_EVENTS = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, LEGEND_CUSTOMIZED_EVENTS), BRUSH_CUSTOMIZED_EVENTS), PLAYER_CUSTOMIZED_EVENTS), DATAZOOM_CUSTOMIZED_EVENTS), SCROLLBAR_CUSTOMIZED_EVENTS), DIMENSION_EVENTS), CHART_LIFECYCLE_EVENTS), HIERARCHY_EVENTS), REACT_TO_VCHART_EVENTS);
var CHART_EVENTS_KEYS = Object.keys(CHART_EVENTS);
var COMMON_EVENTK_KEYS = Object.keys(REACT_TO_VCHART_EVENTS);
var VCHART_TO_REACT_EVENTS = Object.keys(REACT_TO_VCHART_EVENTS).reduce((res, key) => (res[REACT_TO_VCHART_EVENTS[key]] = key, res), {});
var findEventProps = (props, supportedEvents = REACT_TO_VCHART_EVENTS) => {
  const result = {};
  return Object.keys(props).forEach((key) => {
    supportedEvents[key] && (result[key] = props[key]);
  }), result;
};
var bindEventsToChart = (chart, newProps, prevProps, supportedEvents = REACT_TO_VCHART_EVENTS) => {
  if (!newProps && !prevProps || !chart) return false;
  const prevEventProps = prevProps ? findEventProps(prevProps, supportedEvents) : null, newEventProps = newProps ? findEventProps(newProps, supportedEvents) : null;
  return prevEventProps && Object.keys(prevEventProps).forEach((eventKey) => {
    if (!newEventProps || !newEventProps[eventKey] || newEventProps[eventKey] !== prevEventProps[eventKey]) {
      chart.off(supportedEvents[eventKey], prevProps[eventKey]);
    }
  }), newEventProps && Object.keys(newEventProps).forEach((eventKey) => {
    prevEventProps && prevEventProps[eventKey] && prevEventProps[eventKey] === newEventProps[eventKey] || chart.on(supportedEvents[eventKey], newEventProps[eventKey]);
  }), true;
};

// node_modules/@visactor/react-vchart/esm/charts/BaseChart.js
var notSpecKeys = [...REACT_PRIVATE_PROPS, ...CHART_EVENTS_KEYS, "skipFunctionDiff", "onError", "onReady", "spec", "container", "options"];
var BaseChart = import_react5.default.forwardRef((props, ref) => {
  const [updateId, setUpdateId] = (0, import_react5.useState)(0), chartContext = (0, import_react5.useRef)({
    specFromChildren: {}
  });
  (0, import_react5.useImperativeHandle)(ref, () => {
    var _a;
    return null === (_a = chartContext.current) || void 0 === _a ? void 0 : _a.chart;
  });
  const hasSpec = !!props.spec, [view, setView] = (0, import_react5.useState)(null), isUnmount = (0, import_react5.useRef)(false), prevSpec = (0, import_react5.useRef)(pickWithout(props, notSpecKeys)), eventsBinded = import_react5.default.useRef(null), skipFunctionDiff = !!props.skipFunctionDiff, useSyncRender = !!props.useSyncRender, parseSpec = (props2) => {
    var _a;
    return hasSpec && props2.spec ? props2.spec : Object.assign(Object.assign({}, prevSpec.current), null === (_a = chartContext.current) || void 0 === _a ? void 0 : _a.specFromChildren);
  }, handleChartRender = () => {
    if (!isUnmount.current) {
      if (!chartContext.current || !chartContext.current.chart) return;
      bindEventsToChart(chartContext.current.chart, props, eventsBinded.current, CHART_EVENTS);
      const newView = chartContext.current.chart.getCompiler().getVGrammarView();
      setUpdateId(updateId + 1), props.onReady && props.onReady(chartContext.current.chart, 0 === updateId), setView(newView);
    }
  };
  return (0, import_react5.useEffect)(() => {
    var _a;
    if (!(null === (_a = chartContext.current) || void 0 === _a ? void 0 : _a.chart)) return ((props2) => {
      const cs = new props2.vchartConstrouctor(parseSpec(props2), Object.assign(Object.assign({}, props2.options), {
        onError: props2.onError,
        autoFit: true,
        dom: props2.container
      }));
      chartContext.current = Object.assign(Object.assign({}, chartContext.current), {
        chart: cs
      });
    })(props), chartContext.current.chart && (useSyncRender ? (chartContext.current.chart.renderSync(), handleChartRender()) : chartContext.current.chart.renderAsync().then(handleChartRender)), bindEventsToChart(chartContext.current.chart, props, null, CHART_EVENTS), chartContext.current = Object.assign(Object.assign({}, chartContext.current), {
      isChildrenUpdated: false
    }), void (eventsBinded.current = props);
    if (hasSpec) return void (isEqual(eventsBinded.current.spec, props.spec, {
      skipFunction: skipFunctionDiff
    }) || (eventsBinded.current = props, useSyncRender ? (chartContext.current.chart.updateSpecSync(parseSpec(props), void 0, {
      morph: false,
      enableExitAnimation: false
    }), handleChartRender()) : chartContext.current.chart.updateSpec(parseSpec(props), void 0, {
      morph: false,
      enableExitAnimation: false
    }).then(handleChartRender)));
    const newSpec = pickWithout(props, notSpecKeys);
    isEqual(newSpec, prevSpec.current, {
      skipFunction: skipFunctionDiff
    }) && !chartContext.current.isChildrenUpdated || (prevSpec.current = newSpec, useSyncRender ? (chartContext.current.chart.updateSpecSync(parseSpec(props), void 0, {
      morph: false,
      enableExitAnimation: false
    }), handleChartRender()) : chartContext.current.chart.updateSpec(parseSpec(props), void 0, {
      morph: false,
      enableExitAnimation: false
    }).then(handleChartRender)), chartContext.current = Object.assign(Object.assign({}, chartContext.current), {
      isChildrenUpdated: false
    });
  }, [props]), (0, import_react5.useEffect)(() => () => {
    chartContext && (chartContext.current.chart && chartContext.current.chart.release(), chartContext.current = null), isUnmount.current = true;
  }, []), import_react5.default.createElement(chart_default.Provider, {
    value: chartContext.current
  }, import_react5.default.createElement(view_default.Provider, {
    value: view
  }, toArray(props.children).map((child, index) => {
    var _a, _b, _c;
    return import_react5.default.createElement(import_react5.default.Fragment, {
      key: null !== (_c = null !== (_b = null === (_a = null == child ? void 0 : child.props) || void 0 === _a ? void 0 : _a.id) && void 0 !== _b ? _b : null == child ? void 0 : child.id) && void 0 !== _c ? _c : `child-${index}`
    }, import_react5.default.cloneElement(child, {
      updateId
    }));
  })));
});
var createChart = (componentName, defaultProps, callback) => {
  const Com = withContainer(BaseChart, componentName, (props) => callback ? callback(props, defaultProps) : defaultProps ? Object.assign(props, defaultProps) : props);
  return Com.displayName = componentName, Com;
};

// node_modules/@visactor/react-vchart/esm/charts/AreaChart.js
var AreaChart = createChart("AreaChart", {
  type: "area",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/BarChart.js
var BarChart = createChart("BarChart", {
  type: "bar",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/LineChart.js
var LineChart = createChart("LineChart", {
  type: "line",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/ScatterChart.js
var ScatterChart = createChart("ScatterChart", {
  type: "scatter",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/PieChart.js
var PieChart = createChart("PieChart", {
  type: "pie",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/RoseChart.js
var RoseChart = createChart("RoseChart", {
  type: "rose",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/RadarChart.js
var RadarChart = createChart("RadarChart", {
  type: "radar",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/MapChart.js
var MapChart = createChart("MapChart", {
  type: "map",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/HistogramChart.js
var HistogramChart = createChart("HistogramChart", {
  type: "histogram",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/WordCloudChart.js
var WordCloudChart = createChart("WordCloudChart", {
  type: "wordCloud",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/FunnelChart.js
var FunnelChart = createChart("FunnelChart", {
  type: "funnel",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/BoxPlotChart.js
var BoxPlotChart = createChart("BoxPlotChart", {
  type: "boxPlot",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/CircularProgressChart.js
var CircularProgressChart = createChart("CircularProgressChart", {
  type: "circularProgress",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/LinearProgressChart.js
var LinearProgressChart = createChart("LinearProgressChart", {
  type: "linearProgress",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/RangeColumnChart.js
var RangeColumnChart = createChart("RangeColumnChart", {
  type: "rangeColumn",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/charts/CommonChart.js
var CommonChart = createChart("CommonChart", {
  type: "common",
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/series/BaseSeries.js
var import_react6 = __toESM(require_react());
var createSeries = (componentName, markNames, type) => {
  const notSpecKeys2 = COMMON_EVENTK_KEYS.concat(["id", "updateId"]), Comp = (props) => {
    const context = import_react6.default.useContext(chart_default), id2 = import_react6.default.useRef(isNil_default(props.id) ? uid(null != type ? type : "series") : props.id), seriesSpec = import_react6.default.useRef(), bindedEvents = import_react6.default.useRef({}), updateId = import_react6.default.useRef(props.updateId), handleEvent = (e) => {
      const markIds = markNames.map((markName) => `${id2.current}-${markName}`);
      (null == e ? void 0 : e.mark) && markIds.includes(e.mark.getUserId()) && props[VCHART_TO_REACT_EVENTS[e.event.type]](e);
    }, addMarkEvent = (events) => {
      events && context.chart && (bindedEvents && Object.keys(bindedEvents).forEach((eventKey) => {
        events[eventKey] || context.chart.off(REACT_TO_VCHART_EVENTS[eventKey], handleEvent), bindedEvents.current[eventKey] = false;
      }), Object.keys(events).forEach((eventKey) => {
        (null == bindedEvents ? void 0 : bindedEvents[eventKey]) || (context.chart.on(REACT_TO_VCHART_EVENTS[eventKey], handleEvent), bindedEvents || (bindedEvents.current = {}), bindedEvents.current[eventKey] = true);
      }));
    }, addMarkId = (spec) => {
      markNames.forEach((markName) => {
        const defaultMarkId = `${id2.current}-${markName}`;
        isNil_default(spec[markName]) ? spec[markName] = {
          id: defaultMarkId
        } : isNil_default(spec[markName].id) && (spec[markName].id = defaultMarkId);
      });
    }, insertToContext = (props2) => {
      if (context.specFromChildren) {
        context.specFromChildren.series || (context.specFromChildren.series = []);
        const spec = isNil_default(type) ? Object.assign(Object.assign({}, props2), {
          id: id2.current
        }) : Object.assign(Object.assign({}, props2), {
          id: id2.current,
          type
        });
        addMarkId(spec), context.specFromChildren.series.push(spec), context.isChildrenUpdated = true;
      }
    };
    if (addMarkEvent(findEventProps(props)), props.updateId !== updateId.current) updateId.current = props.updateId;
    else {
      const newSeriesSpec = pickWithout(props, notSpecKeys2);
      addMarkId(newSeriesSpec), isEqual(newSeriesSpec, seriesSpec.current) || (seriesSpec.current = newSeriesSpec, ((props2) => {
        if (!context.specFromChildren) return;
        if (!context.specFromChildren.series) return void insertToContext(props2);
        const series = context.specFromChildren.series, index = series.findIndex((entry) => entry.id === id2.current);
        index >= 0 ? (series[index] = isNil_default(type) ? Object.assign(Object.assign({}, props2), {
          id: id2.current
        }) : Object.assign(Object.assign({}, props2), {
          id: id2.current,
          type
        }), addMarkId(series[index])) : insertToContext(props2), context.isChildrenUpdated = true;
      })(newSeriesSpec));
    }
    return import_react6.default.useEffect(() => () => {
      (() => {
        var _a;
        if (!context.specFromChildren) return;
        const series = null !== (_a = context.specFromChildren.series) && void 0 !== _a ? _a : [], index = series.findIndex((entry) => entry.id === id2.current);
        if (index >= 0) {
          const newSeries = series.slice(0, index - 1).concat(series.slice(index + 1));
          context.specFromChildren.series = newSeries, context.isChildrenUpdated = true;
        }
      })(), addMarkEvent({});
    }, []), null;
  };
  return Comp.displayName = componentName, Comp;
};

// node_modules/@visactor/react-vchart/esm/series/Series.js
var Series = createSeries("Series", ["bar", "line", "area"]);

// node_modules/@visactor/react-vchart/esm/series/Line.js
var Line = createSeries("Line", ["line"], "line");

// node_modules/@visactor/react-vchart/esm/series/Area.js
var Area = createSeries("Area", ["area"], "area");

// node_modules/@visactor/react-vchart/esm/series/Bar.js
var Bar = createSeries("Bar", ["bar"], "bar");

// node_modules/@visactor/react-vchart/esm/series/Scatter.js
var Scatter = createSeries("Scatter", ["scatter"], "scatter");

// node_modules/@visactor/react-vchart/esm/series/Map.js
var Map = createSeries("Map", ["map"], "map");

// node_modules/@visactor/react-vchart/esm/series/Pie.js
var Pie = createSeries("Pie", ["pie"], "pie");

// node_modules/@visactor/react-vchart/esm/series/Rose.js
var Rose = createSeries("Rose", ["rose"], "rose");

// node_modules/@visactor/react-vchart/esm/series/Radar.js
var Radar = createSeries("Radar", ["radar"], "radar");

// node_modules/@visactor/react-vchart/esm/series/Dot.js
var Dot = createSeries("Dot", ["dot"], "dot");

// node_modules/@visactor/react-vchart/esm/series/Link.js
var Link = createSeries("Link", ["link"], "link");

// node_modules/@visactor/react-vchart/esm/series/CircularProgress.js
var CircularProgress = createSeries("CircularProgress", ["circularProgress"], "circularProgress");

// node_modules/@visactor/react-vchart/esm/series/WordCloud.js
var WordCloud = createSeries("WordCloud", ["wordCloud"], "wordCloud");

// node_modules/@visactor/react-vchart/esm/series/Funnel.js
var Funnel = createSeries("Funnel", ["funnel"], "funnel");

// node_modules/@visactor/react-vchart/esm/series/LinearProgress.js
var LinearProgress = createSeries("LinearProgress", ["linearProgress"], "linearProgress");

// node_modules/@visactor/react-vchart/esm/series/RangeColumn.js
var RangeColumn = createSeries("RangeColumn", ["rangeColumn"], "rangeColumn");

// node_modules/@visactor/react-vchart/esm/series/BoxPlot.js
var BoxPlot = createSeries("BoxPlot", ["boxPlot"], "boxPlot");

// node_modules/@visactor/react-vchart/esm/components/BaseComponent.js
var import_react7 = __toESM(require_react());
var createComponent = (componentName, specName, supportedEvents, isSingle) => {
  const ignoreKeys = ["id", "updateId"], notSpecKeys2 = supportedEvents ? Object.keys(supportedEvents).concat(ignoreKeys) : ignoreKeys, Comp = (props) => {
    const context = (0, import_react7.useContext)(chart_default), id2 = import_react7.default.useRef(isNil_default(props.id) ? uid(specName) : props.id), eventsBinded = import_react7.default.useRef(null), updateId = import_react7.default.useRef(props.updateId), componentSpec = import_react7.default.useRef();
    if (props.updateId !== updateId.current) {
      updateId.current = props.updateId;
      !!supportedEvents && bindEventsToChart(context.chart, props, eventsBinded.current, supportedEvents) && (eventsBinded.current = props);
    } else {
      const newComponentSpec = pickWithout(props, notSpecKeys2);
      isEqual(newComponentSpec, componentSpec.current) || (componentSpec.current = newComponentSpec, updateToContext(context, id2.current, specName, isSingle, newComponentSpec));
    }
    return (0, import_react7.useEffect)(() => () => {
      supportedEvents && bindEventsToChart(context.chart, null, eventsBinded.current, supportedEvents), deleteToContext(context, id2.current, specName, isSingle);
    }, []), null;
  };
  return Comp.displayName = componentName, Comp;
};
var updateToContext = (context, id2, specName, isSingle, props) => {
  if (context.specFromChildren) {
    if (isSingle) context.specFromChildren[specName] = Object.assign({}, props);
    else {
      context.specFromChildren[specName] || (context.specFromChildren[specName] = []);
      const comps = context.specFromChildren[specName], index = comps.findIndex((entry) => entry.id === id2);
      index >= 0 ? comps[index] = Object.assign({
        id: id2
      }, props) : context.specFromChildren[specName].push(Object.assign({
        id: id2
      }, props));
    }
    context.isChildrenUpdated = true;
  }
};
var deleteToContext = (context, id2, specName, isSingle) => {
  var _a;
  if (context.specFromChildren) if (isSingle) context.specFromChildren[specName] = null;
  else {
    const comps = null !== (_a = context.specFromChildren[specName]) && void 0 !== _a ? _a : [], index = comps.findIndex((entry) => entry.id === id2);
    if (index >= 0) {
      const newComps = comps.slice(0, index - 1).concat(comps.slice(index + 1));
      context.specFromChildren[specName] = newComps, context.isChildrenUpdated = true;
    }
  }
};

// node_modules/@visactor/react-vchart/esm/components/Axis.js
var Axis = createComponent("Axis", "axes");

// node_modules/@visactor/react-vchart/esm/components/Mark.js
var import_react8 = __toESM(require_react());
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0 && (t[p] = s[p]);
  if (null != s && "function" == typeof Object.getOwnPropertySymbols) {
    var i = 0;
    for (p = Object.getOwnPropertySymbols(s); i < p.length; i++) e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]) && (t[p[i]] = s[p[i]]);
  }
  return t;
};
var Mark = (props) => {
  const context = (0, import_react8.useContext)(view_default), id2 = import_react8.default.useRef(isNil_default(props.id) ? uid("mark") : props.id), updateId = import_react8.default.useRef(props.updateId);
  return props.updateId !== updateId.current && (updateId.current = props.updateId, context && addOrUpdateMark(context, id2.current, props)), (0, import_react8.useEffect)(() => () => {
    context && removeMark(context, id2.current);
  }, []), null;
};
var addOrUpdateMark = (view, id2, props) => {
  var _a;
  if (!view.renderer) return;
  let mark = view.getMarkById(id2);
  const { group, glyphType, updateId } = props, others = __rest2(props, ["group", "glyphType", "updateId"]);
  mark || (mark = view.mark(props.type, null !== (_a = props.group) && void 0 !== _a ? _a : view.rootMark, props.glyphType ? {
    glyphType: props.glyphType
  } : null).name(id2)), mark.parse(others), view.runAsync();
};
var removeMark = (view, id2) => {
  if (view.renderer) {
    view.getMarkById(id2);
    view.removeGrammar(id2);
  }
};

// node_modules/@visactor/react-vchart/esm/components/Region.js
var Region = createComponent("Region", "region");

// node_modules/@visactor/react-vchart/esm/components/Legend.js
var Legend = createComponent("Legend", "legends", LEGEND_CUSTOMIZED_EVENTS);

// node_modules/@visactor/react-vchart/esm/components/Brush.js
var Brush = createComponent("Brush", "brush", BRUSH_CUSTOMIZED_EVENTS, true);

// node_modules/@visactor/react-vchart/esm/components/Crosshair.js
var Crosshair = createComponent("Crosshair", "crosshair");

// node_modules/@visactor/react-vchart/esm/components/DataZoom.js
var DataZoom = createComponent("DataZoom", "dataZoom", DATAZOOM_CUSTOMIZED_EVENTS);

// node_modules/@visactor/react-vchart/esm/components/MarkLine.js
var MarkLine = createComponent("MarkLine", "markLine");

// node_modules/@visactor/react-vchart/esm/components/MarkArea.js
var MarkArea = createComponent("MarkArea", "markArea");

// node_modules/@visactor/react-vchart/esm/components/MarkPoint.js
var MarkPoint = createComponent("MarkPoint", "markPoint");

// node_modules/@visactor/react-vchart/esm/components/ScrollBar.js
var ScrollBar = createComponent("ScrollBar", "scrollBar", SCROLLBAR_CUSTOMIZED_EVENTS);

// node_modules/@visactor/react-vchart/esm/components/Tooltip.js
var Tooltip = createComponent("Tooltip", "tooltip", null, true);

// node_modules/@visactor/react-vchart/esm/components/Player.js
var Player = createComponent("Player", "player", PLAYER_CUSTOMIZED_EVENTS, true);

// node_modules/@visactor/react-vchart/esm/components/Indicator.js
var Indicator = createComponent("Indicator", "indicator", null, true);

// node_modules/@visactor/react-vchart/esm/components/Title.js
var Title = createComponent("Title", "title", null, true);

// node_modules/@visactor/react-vchart/esm/VChart.js
var VChart = createChart("VChart", {
  vchartConstrouctor: esm_default
});

// node_modules/@visactor/react-vchart/esm/VChartSimple.js
var VChartSimple = createChart("VChartSimple");

// node_modules/@visactor/react-vchart/esm/index.js
var version = "1.8.11";
export {
  Area,
  AreaChart,
  Axis,
  Bar,
  BarChart,
  BoxPlot,
  BoxPlotChart,
  Brush,
  CircularProgress,
  CircularProgressChart,
  CommonChart,
  Crosshair,
  DataZoom,
  Dot,
  Funnel,
  FunnelChart,
  HistogramChart,
  Indicator,
  Legend,
  Line,
  LineChart,
  LinearProgress,
  LinearProgressChart,
  Link,
  Map,
  MapChart,
  Mark,
  MarkArea,
  MarkLine,
  MarkPoint,
  Pie,
  PieChart,
  Player,
  Radar,
  RadarChart,
  RangeColumn,
  RangeColumnChart,
  Region,
  Rose,
  RoseChart,
  Scatter,
  ScatterChart,
  ScrollBar,
  Series,
  Title,
  Tooltip,
  VChart,
  esm_default as VChartCore,
  VChartSimple,
  WordCloud,
  WordCloudChart,
  version
};
//# sourceMappingURL=@visactor_react-vchart.js.map
