"use strict";

var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
        enumerable: !0,
        get: function() {
            return m[k];
        }
    }), Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
}), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: !0,
        value: v
    });
} : function(o, v) {
    o.default = v;
}), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
}, __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.createComponent = void 0;

const react_1 = __importStar(require("react")), vutils_1 = require("@visactor/vutils"), chart_1 = __importDefault(require("../context/chart")), eventsUtils_1 = require("../eventsUtils"), util_1 = require("../util"), createComponent = (componentName, specName, supportedEvents, isSingle) => {
    const ignoreKeys = [ "id", "updateId" ], notSpecKeys = supportedEvents ? Object.keys(supportedEvents).concat(ignoreKeys) : ignoreKeys, Comp = props => {
        const context = (0, react_1.useContext)(chart_1.default), id = react_1.default.useRef((0, 
        vutils_1.isNil)(props.id) ? (0, util_1.uid)(specName) : props.id), eventsBinded = react_1.default.useRef(null), updateId = react_1.default.useRef(props.updateId), componentSpec = react_1.default.useRef();
        if (props.updateId !== updateId.current) {
            updateId.current = props.updateId;
            !!supportedEvents && (0, eventsUtils_1.bindEventsToChart)(context.chart, props, eventsBinded.current, supportedEvents) && (eventsBinded.current = props);
        } else {
            const newComponentSpec = (0, vutils_1.pickWithout)(props, notSpecKeys);
            (0, vutils_1.isEqual)(newComponentSpec, componentSpec.current) || (componentSpec.current = newComponentSpec, 
            updateToContext(context, id.current, specName, isSingle, newComponentSpec));
        }
        return (0, react_1.useEffect)((() => () => {
            supportedEvents && (0, eventsUtils_1.bindEventsToChart)(context.chart, null, eventsBinded.current, supportedEvents), 
            deleteToContext(context, id.current, specName, isSingle);
        }), []), null;
    };
    return Comp.displayName = componentName, Comp;
};

exports.createComponent = createComponent;

const updateToContext = (context, id, specName, isSingle, props) => {
    if (context.specFromChildren) {
        if (isSingle) context.specFromChildren[specName] = Object.assign({}, props); else {
            context.specFromChildren[specName] || (context.specFromChildren[specName] = []);
            const comps = context.specFromChildren[specName], index = comps.findIndex((entry => entry.id === id));
            index >= 0 ? comps[index] = Object.assign({
                id: id
            }, props) : context.specFromChildren[specName].push(Object.assign({
                id: id
            }, props));
        }
        context.isChildrenUpdated = !0;
    }
}, deleteToContext = (context, id, specName, isSingle) => {
    var _a;
    if (context.specFromChildren) if (isSingle) context.specFromChildren[specName] = null; else {
        const comps = null !== (_a = context.specFromChildren[specName]) && void 0 !== _a ? _a : [], index = comps.findIndex((entry => entry.id === id));
        if (index >= 0) {
            const newComps = comps.slice(0, index - 1).concat(comps.slice(index + 1));
            context.specFromChildren[specName] = newComps, context.isChildrenUpdated = !0;
        }
    }
};
//# sourceMappingURL=BaseComponent.js.map