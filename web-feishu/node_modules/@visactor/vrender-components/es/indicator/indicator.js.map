{"version":3,"sources":["../src/indicator/indicator.ts"],"names":[],"mappings":"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","file":"indicator.js","sourcesContent":["/**\n * @description 指标卡组件\n */\nimport type { IGroup, INode, IText, ITextGraphicAttribute } from '@visactor/vrender-core';\nimport { merge, isValid, array, isValidNumber, get } from '@visactor/vutils';\nimport { AbstractComponent } from '../core/base';\nimport { measureTextSize } from '../util';\nimport type { IndicatorAttributes, IndicatorItemSpec } from './type';\nimport { DEFAULT_INDICATOR_THEME } from './config';\nimport { DEFAULT_HTML_TEXT_SPEC } from '../constant';\nimport { loadIndicatorComponent } from './register';\n\nloadIndicatorComponent();\nexport class Indicator extends AbstractComponent<Required<IndicatorAttributes>> {\n  name = 'indicator';\n\n  private _title?: IText;\n  private _content?: IText | IText[];\n\n  protected render() {\n    const { visible, title = {}, content, size, limitRatio = Infinity } = this.attribute as IndicatorAttributes;\n\n    const limit = Math.min(size.width, size.height) * limitRatio;\n\n    const group = this.createOrUpdateChild('indicator-container', { x: 0, y: 0, zIndex: 1 }, 'group') as IGroup;\n\n    // 指标卡全部隐藏\n    if (visible !== true) {\n      group && group.hideAll();\n      return;\n    }\n\n    if (isValid(title)) {\n      if (title.visible !== false) {\n        const titleStyle = merge({}, get(DEFAULT_INDICATOR_THEME, 'title.style'), title.style);\n        if (titleStyle.type === 'rich') {\n          this._title = group.createOrUpdateChild(\n            'indicator-title',\n            {\n              textConfig: titleStyle.text,\n              ...titleStyle,\n              visible: title.visible,\n              x: 0,\n              y: 0,\n              width: titleStyle.width ?? 0,\n              height: titleStyle.height ?? 0\n            },\n            'richtext'\n          ) as IText;\n        } else if (titleStyle.type === 'html') {\n          this._title = group.createOrUpdateChild(\n            'indicator-title',\n            {\n              textConfig: [],\n              html: {\n                dom: titleStyle.text as string,\n                ...DEFAULT_HTML_TEXT_SPEC,\n                ...titleStyle\n              },\n              ...titleStyle,\n              visible: title.visible,\n              x: 0,\n              y: 0\n            },\n            'richtext'\n          ) as IText;\n        } else {\n          this._title = group.createOrUpdateChild(\n            'indicator-title',\n            {\n              ...titleStyle,\n              /**\n               * 加入以下逻辑：如果没有声明lineHeight，默认 lineHeight 等于 fontSize\n               * 因为如果不声明 vrender 底层会默认给文本加上 2px 的高度，会影响布局计算\n               * 注意：在autoFit改变fontsize时，lineHeight也要同步修改\n               */\n              lineHeight: isValid(titleStyle.lineHeight) ? titleStyle.lineHeight : titleStyle.fontSize,\n              visible: title.visible,\n              x: 0,\n              y: 0\n            },\n            'text'\n          ) as IText;\n        }\n\n        // auto-fit\n        if (title.autoFit && isValidNumber(limit)) {\n          this._setLocalAutoFit(limit, this._title, title);\n        }\n\n        //auto-limit\n        if (title.autoLimit && isValidNumber(limitRatio)) {\n          this._title.setAttribute('maxLineWidth', limit);\n        }\n      } else {\n        /**\n         * indicator部分隐藏\n         * 例如title隐藏了，content还保留。直接设置visible:false 计算group.AABBounts是错的，影响上下居中。\n         * 这里把隐藏的nodes删除后，group.AABBounts计算才正确。\n         */\n        const titleNode = group.find(node => node.name === 'indicator-title', false);\n        titleNode && group.removeChild(titleNode as INode);\n        this._title = undefined;\n      }\n    }\n\n    if (isValid(content)) {\n      const contents: IndicatorItemSpec[] = array(content);\n      const contentComponents: IText[] = [];\n      contents.forEach((contentItem, i) => {\n        if (contentItem.visible !== false) {\n          const contentStyle = merge({}, get(DEFAULT_INDICATOR_THEME, 'content.style'), contentItem.style);\n          let contentComponent;\n          if (contentStyle.type === 'rich') {\n            contentComponent = group.createOrUpdateChild(\n              'indicator-content-' + i,\n              {\n                textConfig: contentStyle.text,\n                ...contentStyle,\n                visible: title.visible,\n                x: 0,\n                y: 0,\n                width: contentStyle.width ?? 0,\n                height: contentStyle.height ?? 0\n              },\n              'richtext'\n            ) as IText;\n          } else if (contentStyle.type === 'html') {\n            contentComponent = group.createOrUpdateChild(\n              'indicator-content-' + i,\n              {\n                textConfig: [],\n                html: {\n                  dom: contentStyle.text as string,\n                  ...DEFAULT_HTML_TEXT_SPEC,\n                  ...contentStyle\n                },\n                ...contentStyle,\n                visible: title.visible,\n                x: 0,\n                y: 0\n              },\n              'richtext'\n            ) as IText;\n          } else {\n            contentComponent = group.createOrUpdateChild(\n              'indicator-content-' + i,\n              {\n                ...contentStyle,\n                lineHeight: isValid(contentStyle.lineHeight) ? contentStyle.lineHeight : contentStyle.fontSize,\n                visible: contentItem.visible,\n                x: 0,\n                y: 0\n              },\n              'text'\n            ) as IText;\n          }\n\n          // auto-fit\n          if (contentItem.autoFit && isValidNumber(limit)) {\n            this._setLocalAutoFit(limit, contentComponent, contentItem);\n          }\n\n          //auto-limit\n          if (contentItem.autoLimit && isValidNumber(limitRatio)) {\n            contentComponent.setAttribute('maxLineWidth', limit);\n          }\n\n          contentComponents.push(contentComponent);\n        } else {\n          /**\n           * indicator部分隐藏\n           */\n          const contentItemNode = group.find(node => node.name === 'indicator-content-' + i, false);\n          contentItemNode && group.removeChild(contentItemNode as INode);\n        }\n      });\n      this._content = contentComponents;\n    }\n\n    this._setGlobalAutoFit(limit);\n    this._setYPosition();\n\n    const totalHeight = group?.AABBBounds.height() ?? 0;\n    group.setAttribute('y', size.height / 2 - totalHeight / 2);\n    group.setAttribute('x', size.width / 2);\n  }\n\n  private _setLocalAutoFit(limit: number, indicatorItem: IText, indicatorItemSpec: IndicatorItemSpec) {\n    // only apply local auto fit for default auto fit text\n    if ((indicatorItemSpec.fitStrategy ?? 'default') !== 'default') {\n      return;\n    }\n    const originWidth = measureTextSize(\n      (indicatorItemSpec.style?.text ?? '') as string | number | number[] | string[],\n      (indicatorItemSpec.style ?? {}) as Partial<ITextGraphicAttribute>,\n      this.stage?.getTheme().text.fontFamily\n    ).width;\n    if (originWidth > 0) {\n      const ratio = (limit * (indicatorItemSpec.fitPercent ?? 0.5)) / originWidth;\n      const fontSize = Math.floor((indicatorItemSpec.style?.fontSize ?? 20) * ratio);\n      indicatorItem.setAttribute('fontSize', fontSize);\n      indicatorItem.setAttribute(\n        'lineHeight',\n        isValid(indicatorItemSpec.style.lineHeight) ? indicatorItemSpec.style.lineHeight : fontSize\n      );\n    }\n  }\n\n  private _setGlobalAutoFit(limit: number) {\n    // compute the inscribed rect width & height for all texts\n    // the font size will be determined by the longest text\n    // 1. hx^2 + hy^2 = r^2\n    // 2. hy = ra * hx + h\n    // -> (ra^2 + 1) * x^2 + (2 * h * ra) * x + (h^2 - r^2) = 0\n\n    const r = limit / 2;\n\n    // unify the initial font size for auto fit texts\n    const singleHeight = 12;\n    const autoFitTexts: { text: IText; spec: IndicatorItemSpec }[] = [];\n    // other text height\n    let otherHeight = 0;\n    // non auto fit title height\n    const titleSpec = this.attribute.title ?? {};\n    if (titleSpec.autoFit && titleSpec.fitStrategy === 'inscribed') {\n      this._title.setAttribute('fontSize', singleHeight);\n      autoFitTexts.push({ text: this._title, spec: this.attribute.title ?? {} });\n    } else {\n      otherHeight += this._title?.AABBBounds?.height?.() ?? 0;\n    }\n    const titleSpace = titleSpec.space ?? 0;\n    otherHeight += titleSpace;\n    // non auto fit content height\n    array(this.attribute.content)\n      .filter(contentSpec => contentSpec.visible !== false)\n      .forEach((contentSpec, index) => {\n        const contentText = this._content[index];\n        if (contentSpec.autoFit && contentSpec.fitStrategy === 'inscribed') {\n          contentText.setAttribute('fontSize', singleHeight);\n          autoFitTexts.push({ text: contentText, spec: contentSpec });\n        } else {\n          otherHeight += contentText?.AABBBounds?.height?.() ?? 0;\n        }\n        const contentSpace = contentSpec.space ?? 0;\n        otherHeight += contentSpace;\n      });\n    if (autoFitTexts.length <= 0) {\n      return;\n    }\n\n    // max width for all auto fit texts\n    const maxWidth = autoFitTexts.reduce((width, textItem) => {\n      return Math.max(width, textItem.text.AABBBounds.width());\n    }, 0);\n\n    // y = x * (singleHeight / maxWidth * textCount) + otherHeight\n    // hy = hx * (singleHeight / maxWidth * textCount) + otherHeight / 2\n    const ra = (singleHeight / maxWidth) * autoFitTexts.length;\n    const h = otherHeight / 2;\n    const a = ra ** 2 + 1;\n    const b = 2 * h * ra;\n    const c = h ** 2 - r ** 2;\n    const hx = (-b + Math.sqrt(b ** 2 - 4 * a * c)) / (2 * a);\n    const hy = ra * hx + h;\n    const y = 2 * hy;\n    const lineHeight = (y - otherHeight) / autoFitTexts.length;\n    if (isValidNumber(y)) {\n      autoFitTexts.forEach(textItem => {\n        const specLineHeight = textItem.spec.style?.lineHeight;\n        textItem.text.setAttribute('fontSize', lineHeight);\n        textItem.text.setAttribute('lineHeight', isValid(specLineHeight) ? specLineHeight : lineHeight);\n      });\n    }\n  }\n\n  private _setYPosition() {\n    let lastContentHeight = 0;\n\n    const titleHeight = this._title?.AABBBounds?.height?.() ?? 0;\n    const titleSpace = this.attribute.title?.space ?? 0;\n    array(this.attribute.content)\n      .filter(contentSpec => contentSpec.visible !== false)\n      .forEach((contentSpec, index) => {\n        const contentText = this._content[index];\n        contentText.setAttribute('y', titleHeight + titleSpace + lastContentHeight);\n        const contentSpace = contentSpec.space ?? 0;\n        lastContentHeight += contentText.AABBBounds.height() + contentSpace;\n      });\n  }\n}\n"]}