import type { IGroupGraphicAttribute } from '@visactor/vrender-core';
import { Group } from '@visactor/vrender-core';
import type { Dict } from '@visactor/vutils';
import type { ComponentOptions } from '../interface';
export declare abstract class AbstractComponent<T extends IGroupGraphicAttribute = IGroupGraphicAttribute> extends Group {
    attribute: Partial<T>;
    protected mode?: '2d' | '3d';
    protected skipDefault?: boolean;
    constructor(attributes: T, options?: ComponentOptions);
    setAttribute(key: keyof T, value: any, forceUpdateTag?: boolean | undefined): void;
    setAttributes(params: Partial<T>, forceUpdateTag?: boolean | undefined): void;
    protected _mergeAttributes(params: Partial<T>, keys?: (keyof T)[]): void;
    protected bindEvents(): void;
    protected abstract render(): void;
    protected _getNodeId(id: string): string;
    protected _dispatchEvent(eventName: string, details?: Dict<any>): void;
}
