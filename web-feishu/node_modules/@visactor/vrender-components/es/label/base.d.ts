import type { IGroup, IGraphic, IText, ILine, IRichText } from '@visactor/vrender-core';
import type { IAABBBounds, IBoundsLike, IPointLike } from '@visactor/vutils';
import { AbstractComponent } from '../core/base';
import type { PointLocationCfg } from '../core/type';
import type { Bitmap } from './overlap';
import { bitmapTool } from './overlap';
import type { BaseLabelAttrs, ILabelAnimation, LabelItem, ILabelEnterAnimation, ILabelExitAnimation, ILabelUpdateAnimation, LabelContent } from './type';
import type { ComponentOptions } from '../interface';
export declare class LabelBase<T extends BaseLabelAttrs> extends AbstractComponent<T> {
    name: string;
    protected _baseMarks?: IGraphic[];
    protected _isCollectionBase: boolean;
    protected _bitmap?: Bitmap;
    protected _animationConfig?: {
        enter: ILabelEnterAnimation;
        exit: ILabelExitAnimation;
        update: ILabelUpdateAnimation;
    };
    static defaultAttributes: Partial<BaseLabelAttrs>;
    setBitmap(bitmap: Bitmap): void;
    protected _bmpTool?: ReturnType<typeof bitmapTool>;
    setBitmapTool(bmpTool: ReturnType<typeof bitmapTool>): void;
    protected _graphicToText: Map<IGraphic, LabelContent>;
    protected _idToGraphic: Map<string, IGraphic>;
    protected _idToPoint: Map<string, IPointLike>;
    onAfterLabelOverlap?: (bitmap: Bitmap) => void;
    private _lastHover;
    private _lastSelect;
    private _enableAnimation;
    constructor(attributes: BaseLabelAttrs, options?: ComponentOptions);
    protected labeling(textBounds: IBoundsLike, graphicBounds: IBoundsLike, position?: BaseLabelAttrs['position'], offset?: number): {
        x: number;
        y: number;
    } | undefined;
    protected _createLabelLine(text: IText | IRichText, baseMark?: IGraphic): ILine | undefined;
    protected render(): void;
    private _bindEvent;
    private _setStatesOfText;
    protected _setStatesOfLabelLine(target: IGraphic): void;
    private _onHover;
    private _onUnHover;
    private _onClick;
    protected _createLabelText(attributes: LabelItem): IRichText | IText;
    private _prepare;
    protected getRelatedGraphic(item: LabelItem): IGraphic<Partial<import("@visactor/vrender-core").IGraphicAttribute>>;
    protected _layout(data?: LabelItem[]): (IText | IRichText)[];
    protected _overlapping(labels: (IText | IRichText)[]): (IRichText | IText)[];
    protected getBaseMarkGroup(): IGroup;
    protected getGraphicBounds(graphic?: IGraphic, point?: Partial<PointLocationCfg>, position?: string): IBoundsLike;
    protected _renderLabels(labels: (IText | IRichText)[]): void;
    protected _renderWithAnimation(labels: (IText | IRichText)[]): void;
    protected _renderWithOutAnimation(labels: (IText | IRichText)[]): void;
    protected _handleRelatedGraphicSetState: (e: any) => void;
    protected _syncStateWithRelatedGraphic(relatedGraphic: IGraphic): void;
    protected _afterRelatedGraphicAttributeUpdate(text: IText | IRichText, texts: (IText | IRichText)[], labelLine: ILine, labelLines: ILine[], index: number, relatedGraphic: IGraphic, to: any, { mode, duration, easing, delay }: ILabelAnimation): (event: any) => {};
    protected _smartInvert(labels: (IText | IRichText)[]): void;
    protected _canPlaceInside(textBound: IBoundsLike, shapeBound: IAABBBounds): boolean;
    setLocation(point: PointLocationCfg): void;
    disableAnimation(): void;
    enableAnimation(): void;
}
