import type { ISymbol } from '@visactor/vrender-core';
import { AbstractComponent } from '../core/base';
import type { SegmentAttributes } from './type';
import type { Point } from '../core/type';
import type { ComponentOptions } from '../interface';
export declare class Segment extends AbstractComponent<Required<SegmentAttributes>> {
    name: string;
    startSymbol?: ISymbol;
    endSymbol?: ISymbol;
    private _startAngle;
    getStartAngle(): number;
    private _endAngle;
    getEndAngle(): number;
    private _mainSegmentPoints;
    getMainSegmentPoints(): Point[];
    static defaultAttributes: Partial<SegmentAttributes>;
    constructor(attributes: SegmentAttributes, options?: ComponentOptions);
    protected render(): void;
    private _renderSymbol;
    private _getMainSegmentPoints;
    private _clipPoints;
    private _computeLineAngle;
    private _reset;
}
