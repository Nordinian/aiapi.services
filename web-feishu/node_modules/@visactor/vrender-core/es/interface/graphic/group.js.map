{"version":3,"sources":["../src/interface/graphic/group.ts"],"names":[],"mappings":"","file":"group.js","sourcesContent":["import type { ITheme, IThemeSpec } from './theme';\nimport type { IGraphicAttribute, IGraphic } from '../graphic';\nimport type { INode } from '../node-tree';\nimport type { GraphicAttributeMap } from './creator';\n\nexport type IGroupAttribute = {\n  path: IGraphic[];\n  width: number;\n  height: number;\n  cornerRadius: number | number[];\n  clip: boolean;\n  visibleAll: boolean;\n  display?: 'relative' | 'flex';\n  flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse';\n  flexWrap?: 'nowrap' | 'wrap';\n  justifyContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around';\n  alignItems?: 'flex-start' | 'flex-end' | 'center';\n  alignContent?: 'flex-start' | 'center' | 'space-between' | 'space-around';\n};\n\nexport type IGroupGraphicAttribute = Partial<IGraphicAttribute> & Partial<IGroupAttribute>;\n\nexport interface IGroup extends IGraphic<IGroupGraphicAttribute> {\n  childrenPickable?: boolean; // 子元素是否可以被pick\n\n  theme?: ITheme;\n\n  createTheme: () => void;\n  hideAll: () => void;\n  showAll: () => void;\n\n  setTheme: (t: IThemeSpec) => void;\n\n  incrementalAppendChild: (node: INode, highPerformance?: boolean) => INode | null;\n  incrementalClearChild: () => void;\n\n  createOrUpdateChild: <T extends keyof GraphicAttributeMap>(\n    graphicName: string,\n    attributes: GraphicAttributeMap[T],\n    graphicType: T\n  ) => INode;\n}\n"]}