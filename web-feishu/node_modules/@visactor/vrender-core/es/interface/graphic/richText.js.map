{"version":3,"sources":["../src/interface/graphic/richText.ts"],"names":[],"mappings":"","file":"richText.js","sourcesContent":["import type { IColor } from '../color';\nimport type { IContext2d } from '../context';\nimport type { IGraphicAttribute, IGraphic } from '../graphic';\nimport type { IImage, IImageGraphicAttribute } from './image';\n\nexport type IRichTextAttribute = {\n  width: number;\n  height: number;\n  ellipsis: boolean | string;\n  wordBreak: RichTextWordBreak;\n  verticalDirection: RichTextVerticalDirection;\n  maxHeight: number;\n  maxWidth: number;\n  textAlign: RichTextGlobalAlignType;\n  textBaseline: RichTextGlobalBaselineType;\n  layoutDirection: RichTextLayoutDirectionType;\n  textConfig: IRichTextCharacter[];\n  singleLine: boolean;\n};\n\nexport type IRichTextGraphicAttribute = Partial<IGraphicAttribute> & Partial<IRichTextAttribute>;\n\nexport type RichTextWordBreak = 'break-word' | 'break-all';\nexport type RichTextVerticalDirection = 'top' | 'middle' | 'bottom';\nexport type RichTextGlobalAlignType = 'left' | 'right' | 'center';\nexport type RichTextGlobalBaselineType = 'top' | 'middle' | 'bottom';\nexport type RichTextLayoutDirectionType = 'horizontal' | 'vertical';\nexport type RichTextFontStyle = 'normal' | 'italic' | 'oblique';\nexport type RichTextTextDecoration = 'none' | 'underline' | 'line-through';\n// export type RichTextTextAlign = 'left' | 'right' | 'center';\nexport type RichTextScript = 'normal' | 'sub' | 'super';\n\nexport type IRichTextBasicCharacter = {\n  lineHeight?: number | string;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n};\n\nexport type IRichTextParagraphCharacter = IRichTextBasicCharacter & {\n  text: string;\n  fontSize?: number;\n  fontFamily?: string;\n  fill?: IColor | boolean;\n  stroke?: IColor | boolean;\n  fontWeight?: string;\n  // lineHeight?: number;\n  fontStyle?: RichTextFontStyle; // normal, italic, oblique\n  textDecoration?: RichTextTextDecoration; // none, underline, line-through\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  underline?: boolean;\n  lineThrough?: boolean;\n  // direction?: RichTextLayoutDirectionType;\n};\n\nexport type IRichTextImageCharacter = IRichTextBasicCharacter & {\n  // 图片基础属性\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  backgroundShowMode?: 'always' | 'hover';\n  backgroundFill?: boolean | IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean | IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  // background size 同时控制了该icon的响应范围\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // 唯一标识符\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n\nexport type IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n\nexport type IRichTextIconGraphicAttribute = IImageGraphicAttribute & {\n  id?: string;\n  backgroundShowMode?: 'always' | 'hover' | 'never';\n  backgroundFill?: boolean | IColor; // 背景矩形填充颜色\n  backgroundFillOpacity?: number; // 背景矩形填充透明度\n  backgroundStroke?: boolean | IColor; // 背景矩形边框颜色\n  backgroundStrokeOpacity?: number; // 背景矩形边框透明度\n  backgroundRadius?: number; // 背景矩形圆角\n  backgroundWidth?: number;\n  backgroundHeight?: number;\n\n  // lineHeight?: number;\n  textAlign?: CanvasTextAlign; // left, right, center\n  textBaseline?: CanvasTextBaseline;\n  direction?: RichTextLayoutDirectionType;\n\n  margin?: number | number[];\n\n  // backgroundShow?: boolean;\n};\n\nexport interface IRichTextParagraph {\n  text: string;\n  ascent: number;\n  descent: number;\n  width: number;\n  height: number;\n  lineHeight: number;\n  fontSize: number;\n  length: number;\n  newLine: boolean;\n  character: IRichTextParagraphCharacter;\n  left: number;\n  top: number;\n  direction?: 'horizontal' | 'vertical';\n  widthOrigin?: number;\n  heightOrigin?: number;\n  textBaseline?: CanvasTextBaseline;\n  ellipsis: 'normal' | 'add' | 'replace' | 'hide';\n  ellipsisWidth: number;\n  ellipsisOtherParagraphWidth: number;\n  verticalEllipsis?: boolean;\n  updateWidth: () => void;\n  draw: (ctx: IContext2d, baseline: number, deltaLeft: number, isLineFirst: boolean, textAlign: string) => void;\n  getWidthWithEllips: (direction: string) => number;\n}\n\nexport interface IRichTextLine {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  baseline: number;\n  ascent: number;\n  descent: number;\n  paragraphs: (IRichTextParagraph | IRichTextIcon)[];\n  actualWidth: number;\n  blankWidth: number;\n  textAlign: string;\n  direction: 'horizontal' | 'vertical';\n  directionKey: {\n    width: string;\n    height: string;\n    left: string;\n    x: string;\n    y: string;\n  };\n  draw: (\n    ctx: IContext2d,\n    lastLine: boolean,\n    x: number,\n    y: number,\n    drawIcon: (icon: IRichTextIcon, context: IContext2d, x: number, y: number, baseline: number) => void\n  ) => void;\n  getWidthWithEllips: () => number;\n}\n\nexport interface IRichTextFrame {\n  left: number;\n  top: number;\n  bottom: number;\n  right: number;\n  width: number;\n  height: number;\n  actualHeight: number;\n  ellipsis: boolean | string;\n  wordBreak: 'break-word' | 'break-all';\n  verticalDirection: 'top' | 'middle' | 'bottom';\n  lines: IRichTextLine[];\n  globalAlign: 'left' | 'center' | 'right';\n  globalBaseline: 'top' | 'middle' | 'bottom';\n  layoutDirection: 'horizontal' | 'vertical';\n  directionKey: {\n    width: string;\n    height: string;\n    left: string;\n    top: string;\n    bottom: string;\n  };\n  isWidthMax: boolean;\n  isHeightMax: boolean;\n  singleLine: boolean;\n  icons: Map<string, IRichTextIcon>;\n  draw: (\n    ctx: IContext2d,\n    drawIcon: (icon: IRichTextIcon, context: IContext2d, x: number, y: number, baseline: number) => void\n  ) => boolean;\n  getActualSize: () => {\n    width: number;\n    height: number;\n  };\n  getRawActualSize: () => {\n    width: number;\n    height: number;\n  };\n  getActualSizeWidthEllipsis: () => {\n    width: number;\n    height: number;\n  };\n}\n\nexport interface IRichText extends IGraphic<IRichTextGraphicAttribute> {\n  getFrameCache: () => IRichTextFrame;\n}\n\nexport interface IRichTextIcon extends IImage {\n  attribute: IRichTextIconGraphicAttribute;\n  richtextId?: string;\n  globalX?: number;\n  globalY?: number;\n\n  _x: number;\n  _y: number;\n  _hovered: boolean;\n  _marginArray: [number, number, number, number];\n\n  setHoverState: (hovered: boolean) => void;\n}\n"]}