import { isNumber } from "@visactor/vutils";

import { BaseSymbol } from "./base";

export function rectSizeArray(ctx, size, x, y) {
    return ctx.rect(x - size[0] / 2, y - size[1] / 2, size[0], size[1]), !1;
}

export function rectSize(ctx, size, x, y) {
    const w = size, h = size / 2;
    return ctx.rect(x - w / 2, y - h / 2, w, h), !1;
}

export class RectSymbol extends BaseSymbol {
    constructor() {
        super(...arguments), this.type = "rect", this.pathStr = "M -0.5,0.25 L 0.5,0.25 L 0.5,-0.25,L -0.5,-0.25 Z";
    }
    draw(ctx, size, x, y) {
        return isNumber(size) ? rectSize(ctx, size, x, y) : rectSizeArray(ctx, size, x, y);
    }
    drawOffset(ctx, size, x, y, offset) {
        return isNumber(size) ? rectSize(ctx, size + 2 * offset, x, y) : rectSizeArray(ctx, [ size[0] + 2 * offset, size[1] + 2 * offset ], x, y);
    }
}

export default new RectSymbol;
//# sourceMappingURL=rect.js.map
