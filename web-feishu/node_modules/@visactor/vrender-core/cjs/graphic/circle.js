"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.createCircle = exports.Circle = void 0;

const graphic_1 = require("./graphic"), custom_path2d_1 = require("../common/custom-path2d"), utils_1 = require("../common/utils"), theme_1 = require("./theme"), application_1 = require("../application"), constants_1 = require("./constants"), CIRCLE_UPDATE_TAG_KEY = [ "radius", "startAngle", "endAngle", ...graphic_1.GRAPHIC_UPDATE_TAG_KEY ];

class Circle extends graphic_1.Graphic {
    constructor(params = {
        radius: 1
    }) {
        super(params), this.type = "circle", this.numberType = constants_1.CIRCLE_NUMBER_TYPE;
    }
    isValid() {
        return super.isValid() && this._isValid();
    }
    _isValid() {
        const {startAngle: startAngle, endAngle: endAngle, radius: radius} = this.attribute;
        return this._validNumber(startAngle) && this._validNumber(endAngle) && this._validNumber(radius);
    }
    doUpdateAABBBounds(full) {
        const circleTheme = (0, theme_1.getTheme)(this).circle;
        this._AABBBounds.setValue(1 / 0, 1 / 0, -1 / 0, -1 / 0);
        const attribute = this.attribute, bounds = application_1.application.graphicService.updateCircleAABBBounds(attribute, (0, 
        theme_1.getTheme)(this).circle, this._AABBBounds, full, this), {boundsPadding: boundsPadding = circleTheme.boundsPadding} = attribute, paddingArray = (0, 
        utils_1.parsePadding)(boundsPadding);
        return paddingArray && bounds.expand(paddingArray), this.clearUpdateBoundTag(), 
        bounds;
    }
    tryUpdateOBBBounds() {
        throw new Error("暂不支持");
    }
    getDefaultAttribute(name) {
        return (0, theme_1.getTheme)(this).circle[name];
    }
    needUpdateTags(keys) {
        return super.needUpdateTags(keys, CIRCLE_UPDATE_TAG_KEY);
    }
    needUpdateTag(key) {
        return super.needUpdateTag(key, CIRCLE_UPDATE_TAG_KEY);
    }
    toCustomPath() {
        var _a, _b, _c;
        const attribute = this.attribute, radius = null !== (_a = attribute.radius) && void 0 !== _a ? _a : this.getDefaultAttribute("radius"), startAngle = null !== (_b = attribute.startAngle) && void 0 !== _b ? _b : this.getDefaultAttribute("startAngle"), endAngle = null !== (_c = attribute.endAngle) && void 0 !== _c ? _c : this.getDefaultAttribute("endAngle"), path = new custom_path2d_1.CustomPath2D;
        return path.arc(0, 0, radius, startAngle, endAngle), path;
    }
    clone() {
        return new Circle(Object.assign({}, this.attribute));
    }
    getNoWorkAnimateAttr() {
        return Circle.NOWORK_ANIMATE_ATTR;
    }
}

function createCircle(attributes) {
    return new Circle(attributes);
}

exports.Circle = Circle, Circle.NOWORK_ANIMATE_ATTR = graphic_1.NOWORK_ANIMATE_ATTR, 
exports.createCircle = createCircle;
//# sourceMappingURL=circle.js.map
