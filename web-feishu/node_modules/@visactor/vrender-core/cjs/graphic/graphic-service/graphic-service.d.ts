import type { IAABBBounds, IBounds, IMatrix } from '@visactor/vutils';
import { AABBBounds } from '@visactor/vutils';
import type { mat4, vec3, IArc, IArcGraphicAttribute, IArea, IAreaGraphicAttribute, IGraphicAttribute, ICircle, ICircleGraphicAttribute, IGraphic, IGroup, IGroupGraphicAttribute, ILine, ILineGraphicAttribute, IPath, IPathGraphicAttribute, IPolygon, IPolygonGraphicAttribute, IRectGraphicAttribute, IStage, ISymbol, ISymbolGraphicAttribute, IText, ITextGraphicAttribute, IGlyph, IGlyphGraphicAttribute, IRichTextGraphicAttribute, IRichText, IPyramid3dGraphicAttribute, IPyramid3d, IArc3dGraphicAttribute, IArc3d, IImageGraphicAttribute, ITransform, IGraphicService, IGraphicCreator, ISyncHook, IRectBoundsContribution, ISymbolBoundsContribution, ICircleBoundsContribution, IArcBoundsContribution, IPathBoundsContribution } from '../../interface';
export declare function rotateX(out: mat4, a: mat4, rad: number): mat4;
export declare function rotateY(out: mat4, a: mat4, rad: number): mat4;
export declare function translate(out: mat4, a: mat4, v: vec3): mat4;
export declare function mat3Tomat4(out: mat4, b: IMatrix): void;
export declare function multiplyMat4Mat3(out: mat4, a: mat4, b: IMatrix): mat4;
export declare function multiplyMat4Mat4(out: mat4, a: mat4, b: mat4): mat4;
export declare function getExtraModelMatrix(dx: number, dy: number, graphic: IGraphic): mat4 | null;
export declare function getModelMatrix(out: mat4, graphic: IGraphic, theme: ITransform): void;
export declare function shouldUseMat4(graphic: IGraphic): number;
export declare class DefaultGraphicService implements IGraphicService {
    readonly creator: IGraphicCreator;
    hooks: {
        onAttributeUpdate: ISyncHook<[IGraphic]>;
        onSetStage: ISyncHook<[IGraphic, IStage]>;
        onRemove: ISyncHook<[IGraphic]>;
        onRelease: ISyncHook<[IGraphic]>;
        onAddIncremental: ISyncHook<[IGraphic, IGroup, IStage]>;
        onClearIncremental: ISyncHook<[IGroup, IStage]>;
        beforeUpdateAABBBounds: ISyncHook<[IGraphic, IStage, boolean, IAABBBounds]>;
        afterUpdateAABBBounds: ISyncHook<[IGraphic, IStage, IAABBBounds, {
            globalAABBBounds: IAABBBounds;
        }, boolean]>;
    };
    protected _rectBoundsContribitions: IRectBoundsContribution[];
    protected _symbolBoundsContribitions: ISymbolBoundsContribution[];
    protected _circleBoundsContribitions: ICircleBoundsContribution[];
    protected _arcBoundsContribitions: IArcBoundsContribution[];
    protected _pathBoundsContribitions: IPathBoundsContribution[];
    protected tempAABBBounds1: AABBBounds;
    protected tempAABBBounds2: AABBBounds;
    constructor(creator: IGraphicCreator);
    onAttributeUpdate(graphic: IGraphic): void;
    onSetStage(graphic: IGraphic, stage: IStage): void;
    onRemove(graphic: IGraphic<Partial<IGraphicAttribute>>): void;
    onRelease(graphic: IGraphic<Partial<IGraphicAttribute>>): void;
    onAddIncremental(graphic: IGraphic, group: IGroup, stage: IStage): void;
    onClearIncremental(group: IGroup, stage: IStage): void;
    beforeUpdateAABBBounds(graphic: IGraphic, stage: IStage, willUpdate: boolean, bounds: IAABBBounds): void;
    afterUpdateAABBBounds(graphic: IGraphic, stage: IStage, bounds: IAABBBounds, params: {
        globalAABBBounds: IAABBBounds;
    }, selfChange: boolean): void;
    updatePathProxyAABBBounds(aabbBounds: IAABBBounds, graphic?: IGraphic): boolean;
    updateRectAABBBounds(attribute: IRectGraphicAttribute, rectTheme: Required<IRectGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IGraphic): IBounds;
    updateGroupAABBBounds(attribute: IGroupGraphicAttribute, groupTheme: Required<IGroupGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IGroup): IBounds;
    updateGlyphAABBBounds(attribute: IGlyphGraphicAttribute, theme: Required<IGlyphGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IGlyph): IBounds;
    updateRichTextAABBBounds(attribute: IRichTextGraphicAttribute, richtextTheme: Required<IRichTextGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IRichText): IBounds;
    updateTextAABBBounds(attribute: ITextGraphicAttribute, textTheme: Required<ITextGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IText): IBounds;
    updatePathAABBBounds(attribute: IPathGraphicAttribute, pathTheme: Required<IPathGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IPath): IBounds;
    protected updatePathAABBBoundsImprecise(attribute: IPathGraphicAttribute, pathTheme: Required<IPathGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IPath): IAABBBounds;
    updatePyramid3dAABBBounds(attribute: IPyramid3dGraphicAttribute, polygonTheme: Required<IPyramid3dGraphicAttribute>, aabbBounds: IBounds, graphic?: IPyramid3d): IBounds;
    updateArc3dAABBBounds(attribute: IArc3dGraphicAttribute, arcTheme: Required<IArc3dGraphicAttribute>, aabbBounds: IBounds, graphic?: IArc3d): IBounds;
    updatePolygonAABBBounds(attribute: IPolygonGraphicAttribute, polygonTheme: Required<IPolygonGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IPolygon): IBounds;
    protected updatePolygonAABBBoundsImprecise(attribute: IPolygonGraphicAttribute, polygonTheme: Required<IPolygonGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IPolygon): IAABBBounds;
    updateLineAABBBounds(attribute: ILineGraphicAttribute, lineTheme: Required<ILineGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: ILine): IBounds;
    protected updateLineAABBBoundsByPoints(attribute: ILineGraphicAttribute, lineTheme: Required<ILineGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: ILine): IAABBBounds;
    protected updateLineAABBBoundsBySegments(attribute: ILineGraphicAttribute, lineTheme: Required<ILineGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: ILine): IAABBBounds;
    updateAreaAABBBounds(attribute: IAreaGraphicAttribute, areaTheme: Required<IAreaGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IArea): IBounds;
    protected updateAreaAABBBoundsByPoints(attribute: IAreaGraphicAttribute, areaTheme: Required<IAreaGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IArea): IAABBBounds;
    protected updateAreaAABBBoundsBySegments(attribute: IAreaGraphicAttribute, areaTheme: Required<IAreaGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IArea): IAABBBounds;
    updateCircleAABBBounds(attribute: ICircleGraphicAttribute, circleTheme: Required<ICircleGraphicAttribute>, aabbBounds: IAABBBounds, full?: boolean, graphic?: ICircle): IBounds;
    protected updateCircleAABBBoundsImprecise(attribute: ICircleGraphicAttribute, circleTheme: Required<ICircleGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IGraphic): IAABBBounds;
    protected updateCircleAABBBoundsAccurate(attribute: ICircleGraphicAttribute, circleTheme: Required<ICircleGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IGraphic): IAABBBounds;
    updateArcAABBBounds(attribute: IArcGraphicAttribute, arcTheme: Required<IArcGraphicAttribute>, aabbBounds: IAABBBounds, full?: boolean, graphic?: IArc): IBounds;
    protected updateArcAABBBoundsImprecise(attribute: IArcGraphicAttribute, arcTheme: Required<IArcGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IGraphic): IAABBBounds;
    protected updateArcAABBBoundsAccurate(attribute: IArcGraphicAttribute, arcTheme: Required<IArcGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IGraphic): IAABBBounds;
    updateSymbolAABBBounds(attribute: ISymbolGraphicAttribute, symbolTheme: Required<ISymbolGraphicAttribute>, aabbBounds: IAABBBounds, full?: boolean, graphic?: ISymbol): IBounds;
    protected updateSymbolAABBBoundsImprecise(attribute: ISymbolGraphicAttribute, symbolTheme: Required<ISymbolGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IGraphic): IAABBBounds;
    protected updateSymbolAABBBoundsAccurate(attribute: ISymbolGraphicAttribute, symbolTheme: Required<ISymbolGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: ISymbol): IAABBBounds;
    updateImageAABBBounds(attribute: IImageGraphicAttribute, imageTheme: Required<IImageGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IGraphic): IBounds;
    combindShadowAABBBounds(bounds: IAABBBounds, graphic?: IGraphic): void;
    transformAABBBounds(attribute: Partial<IGraphicAttribute>, aabbBounds: IAABBBounds, theme: Required<IGraphicAttribute>, miter: boolean, graphic?: IGraphic): void;
    protected _validCheck(attribute: Partial<IGraphicAttribute>, theme: Required<IGraphicAttribute>, aabbBounds: IAABBBounds, graphic?: IGraphic): boolean;
}
