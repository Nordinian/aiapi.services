{"version":3,"sources":["../src/interface/graphic-service.ts"],"names":[],"mappings":"","file":"graphic-service.js","sourcesContent":["import type { IAABBBounds } from '@visactor/vutils';\n\nimport type { ISyncHook } from './sync-hook';\nimport type { IGraphic } from './graphic';\nimport type { IStage } from './stage';\nimport type {\n  IRectGraphicAttribute,\n  IGroup,\n  IGroupGraphicAttribute,\n  IGlyphGraphicAttribute,\n  ISymbolGraphicAttribute,\n  ICircleGraphicAttribute,\n  ICircle,\n  IGlyph,\n  ISymbol,\n  IArcGraphicAttribute,\n  IArc,\n  IArc3dGraphicAttribute,\n  IAreaGraphicAttribute,\n  IArc3d,\n  IArea,\n  ILineGraphicAttribute,\n  IPathGraphicAttribute,\n  ILine,\n  IPath,\n  IPolygonGraphicAttribute,\n  IPolygon,\n  IPyramid3dGraphicAttribute,\n  IPyramid3d,\n  ITextGraphicAttribute,\n  IText,\n  IRichTextGraphicAttribute,\n  IRichText,\n  IImageGraphicAttribute,\n  IImage,\n  IRect3dGraphicAttribute,\n  IRect,\n  IRect3d,\n  IShadowRoot,\n  IWrapTextGraphicAttribute\n} from './graphic/index';\n\nexport interface IGraphicService {\n  // themeService: IThemeService;\n  onAttributeUpdate: (graphic: IGraphic) => void;\n  onSetStage: (graphic: IGraphic, stage: IStage) => void;\n  onRemove: (graphic: IGraphic) => void;\n  onRelease: (graphic: IGraphic) => void;\n  onAddIncremental: (graphic: IGraphic, group: IGroup, stage: IStage) => void;\n  onClearIncremental: (group: IGroup, stage: IStage) => void;\n  hooks: {\n    onAttributeUpdate: ISyncHook<[IGraphic]>;\n    onSetStage: ISyncHook<[IGraphic, IStage]>;\n    onRemove: ISyncHook<[IGraphic]>;\n    onRelease: ISyncHook<[IGraphic]>;\n    onAddIncremental: ISyncHook<[IGraphic, IGroup, IStage]>;\n    onClearIncremental: ISyncHook<[IGroup, IStage]>;\n    beforeUpdateAABBBounds: ISyncHook<[IGraphic, IStage, boolean, IAABBBounds]>;\n    afterUpdateAABBBounds: ISyncHook<[IGraphic, IStage, IAABBBounds, { globalAABBBounds: IAABBBounds }, boolean]>;\n  };\n  beforeUpdateAABBBounds: (graphic: IGraphic, stage: IStage, willUpdate: boolean, bounds: IAABBBounds) => void;\n  afterUpdateAABBBounds: (\n    graphic: IGraphic,\n    stage: IStage,\n    bounds: IAABBBounds,\n    params: { globalAABBBounds: IAABBBounds },\n    selfChange: boolean\n  ) => void;\n\n  creator: IGraphicCreator;\n\n  updateRectAABBBounds: (\n    attribute: IRectGraphicAttribute,\n    rectTheme: Required<IRectGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IGraphic\n  ) => IAABBBounds;\n\n  updateGroupAABBBounds: (\n    attribute: IGroupGraphicAttribute,\n    groupTheme: Required<IGroupGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IGroup\n  ) => IAABBBounds;\n\n  updateGlyphAABBBounds: (\n    attribute: IGlyphGraphicAttribute,\n    groupTheme: Required<IGlyphGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IGlyph\n  ) => IAABBBounds;\n\n  updateSymbolAABBBounds: (\n    attribute: ISymbolGraphicAttribute,\n    symbolTheme: Required<ISymbolGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    full?: boolean,\n    graphic?: ISymbol\n  ) => IAABBBounds;\n\n  updateCircleAABBBounds: (\n    attribute: ICircleGraphicAttribute,\n    circleTheme: Required<ICircleGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    full?: boolean,\n    graphic?: ICircle\n  ) => IAABBBounds;\n\n  updateArcAABBBounds: (\n    attribute: IArcGraphicAttribute,\n    arcTheme: Required<IArcGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    full?: boolean,\n    graphic?: IArc\n  ) => IAABBBounds;\n\n  updateArc3dAABBBounds: (\n    attribute: IArc3dGraphicAttribute,\n    arcTheme: Required<IArc3dGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IArc3d\n  ) => IAABBBounds;\n\n  updateAreaAABBBounds: (\n    attribute: IAreaGraphicAttribute,\n    areaTheme: Required<IAreaGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IArea\n  ) => IAABBBounds;\n\n  updateLineAABBBounds: (\n    attribute: ILineGraphicAttribute,\n    lineTheme: Required<ILineGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: ILine\n  ) => IAABBBounds;\n\n  updatePathAABBBounds: (\n    attribute: IPathGraphicAttribute,\n    pathTheme: Required<IPathGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IPath\n  ) => IAABBBounds;\n\n  updatePolygonAABBBounds: (\n    attribute: IPolygonGraphicAttribute,\n    polygonTheme: Required<IPolygonGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IPolygon\n  ) => IAABBBounds;\n\n  updatePyramid3dAABBBounds: (\n    attribute: IPyramid3dGraphicAttribute,\n    polygonTheme: Required<IPyramid3dGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IPyramid3d\n  ) => IAABBBounds;\n\n  updateTextAABBBounds: (\n    attribute: ITextGraphicAttribute,\n    textTheme: Required<ITextGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IText\n  ) => IAABBBounds;\n\n  updateRichTextAABBBounds: (\n    attribute: IRichTextGraphicAttribute,\n    textTheme: Required<IRichTextGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IRichText\n  ) => IAABBBounds;\n\n  updateImageAABBBounds: (\n    attribute: IImageGraphicAttribute,\n    textTheme: Required<IImageGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IImage\n  ) => IAABBBounds;\n}\n\nexport type IGraphicCreator = {\n  arc: (attributes: IArcGraphicAttribute) => IArc;\n  area: (attributes: IAreaGraphicAttribute) => IArea;\n  circle: (attributes: ICircleGraphicAttribute) => ICircle;\n  group: (attributes: IGroupGraphicAttribute) => IGroup;\n  image: (attributes: IImageGraphicAttribute) => IImage;\n  line: (attributes: ILineGraphicAttribute) => ILine;\n  path: (attributes: IPathGraphicAttribute) => IPath;\n  rect: (attributes: IRectGraphicAttribute) => IRect;\n  rect3d: (attributes: IRect3dGraphicAttribute) => IRect3d;\n  symbol: (attributes: ISymbolGraphicAttribute) => ISymbol;\n  text: (attributes: ITextGraphicAttribute) => IText;\n  richtext: (attributes: IRichTextGraphicAttribute) => IRichText;\n  polygon: (attributes: IPolygonGraphicAttribute) => IPolygon;\n  shadowRoot: (graphic?: IGraphic) => IShadowRoot;\n  wrapText: (attributes: IWrapTextGraphicAttribute) => IText;\n};\n\nexport interface IArcBoundsContribution {\n  updateBounds: (\n    attribute: IArcGraphicAttribute,\n    arcTheme: Required<IArcGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IGraphic\n  ) => IAABBBounds;\n}\n\nexport interface IAreaBoundsContribution {\n  updateBounds: (\n    attribute: IAreaGraphicAttribute,\n    arcTheme: Required<IAreaGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IGraphic\n  ) => IAABBBounds;\n}\n\nexport interface ICircleBoundsContribution {\n  updateBounds: (\n    attribute: ICircleGraphicAttribute,\n    circleTheme: Required<ICircleGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IGraphic\n  ) => IAABBBounds;\n}\n\nexport interface IPathBoundsContribution {\n  updateBounds: (\n    attribute: IPathGraphicAttribute,\n    pathTheme: Required<IPathGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IGraphic\n  ) => IAABBBounds;\n}\n\nexport interface IRectBoundsContribution {\n  updateBounds: (\n    attribute: IRectGraphicAttribute,\n    rectTheme: Required<IRectGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IGraphic\n  ) => IAABBBounds;\n}\n\nexport interface ISymbolBoundsContribution {\n  updateBounds: (\n    attribute: ISymbolGraphicAttribute,\n    SymbolTheme: Required<ISymbolGraphicAttribute>,\n    aabbBounds: IAABBBounds,\n    graphic?: IGraphic\n  ) => IAABBBounds;\n}\n"]}