{"version":3,"sources":["../src/component/tooltip/handler/utils/get-spec.ts"],"names":[],"mappings":"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","file":"get-spec.js","sourcesContent":["import type { ITooltipSpec, TooltipHandlerParams } from '../../interface';\nimport type {\n  IToolTipLinePattern,\n  ITooltipPattern,\n  ITooltipShapePattern,\n  MaybeArray,\n  TooltipActiveType,\n  TooltipData,\n  TooltipPatternProperty\n} from '../../../../typings';\nimport type { ISeries } from '../../../../series/interface';\nimport { mergeSpec } from '../../../../util/spec/merge-spec';\nimport { makeDefaultPattern } from './pattern';\nimport type { IDimensionInfo } from '../../../../event/events/dimension/interface';\nimport { getTooltipActualActiveType } from '../../utils/common';\nimport { memoize, isValid, array, isFunction, isNil, cloneDeep } from '@visactor/vutils';\n\nexport const getTooltipSpecForShow = (\n  activeType: TooltipActiveType,\n  globalSpec: ITooltipSpec,\n  series?: ISeries,\n  dimensionInfo?: IDimensionInfo[]\n): ITooltipSpec => {\n  // 组装tooltip spec\n  const finalSpec = {\n    ...globalSpec,\n    activeType\n  } as ITooltipSpec;\n  if (activeType === 'mark' && series) {\n    // tooltip spec覆盖优先级: series spec > global spec > default pattern\n    const seriesSpec = (series.tooltipHelper?.spec ?? {}) as ITooltipSpec;\n\n    // visible\n    if (isValid(seriesSpec.visible) || isValid(seriesSpec.activeType)) {\n      finalSpec.visible = getTooltipActualActiveType(seriesSpec).includes('mark');\n    } else if (isValid(globalSpec.visible) || isValid(globalSpec.activeType)) {\n      finalSpec.visible = getTooltipActualActiveType(globalSpec).includes('mark');\n    } else {\n      finalSpec.visible = true;\n    }\n\n    // 优先使用自定义handler\n    finalSpec.handler = seriesSpec.handler ?? globalSpec.handler ?? undefined;\n    if (finalSpec.handler?.showTooltip) {\n      return finalSpec;\n    }\n  } else if (activeType === 'dimension' && dimensionInfo?.length) {\n    // tooltip spec覆盖优先级: series spec > global spec > default pattern\n    const seriesList = getSeriesListFromDimensionInfo(dimensionInfo);\n\n    // visible\n    if (seriesList.every(series => !getTooltipActualActiveType(series.tooltipHelper?.spec).includes('dimension'))) {\n      finalSpec.visible = false;\n    } else if (isValid(globalSpec.visible) || isValid(globalSpec.activeType)) {\n      finalSpec.visible = getTooltipActualActiveType(globalSpec).includes('dimension');\n    } else {\n      finalSpec.visible = true;\n    }\n\n    // 优先使用自定义handler\n    finalSpec.handler = globalSpec.handler ?? undefined;\n    if (finalSpec.handler?.showTooltip) {\n      return finalSpec;\n    }\n  }\n\n  // 默认的 pattern\n  const defaultPattern = getDefaultTooltipPattern(activeType, series, dimensionInfo);\n  // 来自系列的 pattern\n  const seriesPattern = getSeriesTooltipPattern(activeType, series, dimensionInfo);\n  // 来自用户配置的 pattern\n  const userPattern: ITooltipPattern = mergeSpec({}, cloneDeep(globalSpec[activeType]), seriesPattern);\n\n  // 对pattern进行组装\n  // 组装 title\n  const defaultPatternTitle = defaultPattern.title as IToolTipLinePattern | undefined;\n  const titleShape: ITooltipShapePattern = getShapePattern(undefined, userPattern, undefined, defaultPatternTitle);\n  if (isValid(userPattern.title)) {\n    // 排除是回调的情况\n    if (!isFunction(userPattern.title)) {\n      userPattern.title = {\n        ...defaultPattern.title,\n        ...titleShape, // shape默认回调实现较复杂，如果用户没有配置则填补默认逻辑\n        ...userPattern.title\n      };\n    } else {\n      const userPatternTitle = userPattern.title;\n      userPattern.title = (data?: TooltipData, params?: TooltipHandlerParams) => {\n        const userResult = userPatternTitle(data, params) ?? {};\n        return {\n          ...titleShape, // shape默认回调实现较复杂，如果用户没有配置则填补默认逻辑\n          ...userResult\n        };\n      };\n    }\n  } else {\n    userPattern.title = {\n      ...defaultPattern.title,\n      ...titleShape\n    };\n  }\n\n  // 组装 content\n  const defaultPatternContent = array(defaultPattern.content) as IToolTipLinePattern[];\n  if (isValid(userPattern.content)) {\n    const shapePatternMap = getShapePatternMapOfEachSeries(defaultPatternContent);\n    // 排除是回调的情况\n    if (!isFunction(userPattern.content)) {\n      const newPatternContent: IToolTipLinePattern[] = [];\n      array(userPattern.content).forEach(userLine => {\n        newPatternContent.push({\n          ...getShapePattern(userLine as IToolTipLinePattern, userPattern, shapePatternMap), // shape默认回调实现较复杂，如果用户没有配置则填补默认逻辑\n          ...userLine\n        });\n      });\n      userPattern.content = newPatternContent;\n    } else {\n      const userPatternContent = userPattern.content;\n      userPattern.content = (data?: TooltipData, params?: TooltipHandlerParams) => {\n        const newPatternContent: IToolTipLinePattern[] = [];\n        array(userPatternContent(data, params) ?? []).forEach(userLine => {\n          newPatternContent.push({\n            ...getShapePattern(userLine as IToolTipLinePattern, userPattern, shapePatternMap), // shape默认回调实现较复杂，如果用户没有配置则填补默认逻辑\n            ...userLine\n          });\n        });\n        return newPatternContent;\n      };\n    }\n  } else {\n    userPattern.content = defaultPatternContent.map(line => ({\n      ...line,\n      ...getShapePattern(undefined, userPattern, undefined, line)\n    }));\n  }\n\n  finalSpec[activeType] = {\n    ...defaultPattern,\n    ...userPattern,\n    activeType\n  };\n\n  return finalSpec;\n};\n\n/** 获取默认 tooltip pattern */\nconst getDefaultTooltipPattern = (\n  activeType: TooltipActiveType,\n  series?: ISeries,\n  dimensionInfo?: IDimensionInfo[]\n): ITooltipPattern => {\n  // 默认的pattern\n  let defaultPattern = {} as ITooltipPattern;\n  if (activeType === 'mark' && series) {\n    // mark tooltip\n    defaultPattern = makeDefaultPattern(series, 'mark') ?? {};\n  } else if (activeType === 'dimension' && dimensionInfo?.length) {\n    // dimension tooltip\n    const patternList: ITooltipPattern[] = [];\n    dimensionInfo[0].data.forEach(data => {\n      const { series } = data;\n      const mockDimensionInfo = [\n        {\n          ...dimensionInfo[0],\n          data: [data]\n        }\n      ] as IDimensionInfo[];\n      const pattern = makeDefaultPattern(series, 'dimension', mockDimensionInfo);\n      if (pattern) {\n        patternList.push(pattern);\n      }\n    });\n    // 拼接默认 tooltip content\n    const defaultPatternContent: Array<TooltipPatternProperty<MaybeArray<IToolTipLinePattern>>> = [];\n    patternList.forEach(({ content }) => {\n      if (isFunction(content)) {\n        defaultPatternContent.push(content);\n      } else {\n        defaultPatternContent.push(...array(content));\n      }\n    });\n    defaultPattern = {\n      ...patternList[0],\n      content: defaultPatternContent\n    };\n  }\n  return defaultPattern;\n};\n\n/** 获取来自系列 spec 的 tooltip pattern */\nconst getSeriesTooltipPattern = (\n  activeType: TooltipActiveType,\n  series?: ISeries,\n  dimensionInfo?: IDimensionInfo[]\n): ITooltipPattern => {\n  // 默认的pattern\n  let seriesPattern = {} as ITooltipPattern;\n  if (activeType === 'mark' && series) {\n    // mark tooltip\n    const seriesSpec = (series.tooltipHelper?.spec ?? {}) as ITooltipSpec;\n    seriesPattern = seriesSpec.mark ? cloneDeep(seriesSpec.mark) : {};\n  } else if (activeType === 'dimension' && dimensionInfo?.length) {\n    // dimension tooltip\n    const seriesList = getSeriesListFromDimensionInfo(dimensionInfo);\n    const seriesPatternList = seriesList\n      .filter(series => {\n        const spec = series.tooltipHelper?.spec;\n        return isValid(spec?.dimension) && getTooltipActualActiveType(spec).includes('dimension');\n      })\n      .map(series => series.tooltipHelper.spec.dimension);\n    if (seriesPatternList.length) {\n      // 拼接系列 tooltip content\n      let seriesPatternContent: Array<TooltipPatternProperty<MaybeArray<IToolTipLinePattern>>> | undefined = [];\n      if (seriesPatternList.every(({ content }) => isNil(content))) {\n        seriesPatternContent = undefined;\n      } else {\n        seriesPatternList.forEach(({ content }) => {\n          if (isNil(content)) {\n            return;\n          }\n          if (isFunction(content)) {\n            seriesPatternContent?.push(content);\n          } else {\n            seriesPatternContent?.push(...array(content));\n          }\n        });\n      }\n      seriesPattern = {\n        ...seriesPatternList[0],\n        content: seriesPatternContent\n      };\n    }\n  }\n  return seriesPattern;\n};\n\nconst getSeriesListFromDimensionInfo = memoize((dimensionInfo: IDimensionInfo[]): ISeries[] => {\n  return dimensionInfo.reduce(\n    (list, cur) => list.concat(cur.data.map(data => data.series).filter(isValid)),\n    [] as ISeries[]\n  );\n});\n\n/** 获取每个系列对应的 shape pattern */\nconst getShapePatternMapOfEachSeries = (content: IToolTipLinePattern[]): Record<number, ITooltipShapePattern> => {\n  const shapePatternMap: Record<number, ITooltipShapePattern> = {};\n  content.forEach(line => {\n    const key = line.seriesId ?? 0;\n    if (!shapePatternMap[key]) {\n      shapePatternMap[key] = line;\n    }\n  });\n  return shapePatternMap;\n};\n\n/** 根据优先级获取形状配置 */\nconst getShapePattern = (\n  userLinePattern?: IToolTipLinePattern,\n  userPattern?: ITooltipPattern,\n  shapePatternMap?: Record<number, ITooltipShapePattern>,\n  defaultShapePattern?: ITooltipShapePattern\n): ITooltipShapePattern => {\n  const shapePatternFromMap = shapePatternMap?.[userLinePattern?.seriesId ?? 0] ?? shapePatternMap?.[0];\n  const shapeKeys: Set<keyof ITooltipShapePattern> = new Set(\n    []\n      .concat(\n        Object.keys(userLinePattern ?? {}),\n        Object.keys(userPattern ?? {}),\n        Object.keys(shapePatternFromMap ?? {}),\n        Object.keys(defaultShapePattern ?? {})\n      )\n      .filter(key => key.toLowerCase().includes('shape')) as any[]\n  );\n\n  const shapePattern: ITooltipShapePattern = {};\n  shapeKeys.forEach(key => {\n    const value =\n      userLinePattern?.[key] ?? userPattern?.[key] ?? shapePatternFromMap?.[key] ?? defaultShapePattern?.[key];\n    if (value !== undefined) {\n      shapePattern[key as any] = value;\n    }\n  });\n  return shapePattern;\n};\n"]}