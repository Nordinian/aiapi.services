{"version":3,"sources":["../src/component/tooltip/handler/dom/model/content-model.ts"],"names":[],"mappings":";;;AAAA,uDAAiE;AACjE,6DAAwD;AACxD,iEAA4D;AAE5D,oEAAgE;AAEhE,MAAa,YAAa,SAAQ,qCAAgB;IAKhD,IAAI;QACF,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;SAC7D;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;IACH,CAAC;IAEO,aAAa;QACnB,MAAM,QAAQ,GAAG,IAAI,yCAAkB,CAAC,IAAI,CAAC,OAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;QACrF,QAAQ,CAAC,IAAI,EAAE,CAAC;QAChB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;IAChD,CAAC;IAEO,WAAW;QACjB,MAAM,MAAM,GAAG,IAAI,yCAAkB,CAAC,IAAI,CAAC,OAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QACjF,MAAM,CAAC,IAAI,EAAE,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;IAC5C,CAAC;IAEO,aAAa;QACnB,MAAM,QAAQ,GAAG,IAAI,yCAAkB,CAAC,IAAI,CAAC,OAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;QACrF,QAAQ,CAAC,IAAI,EAAE,CAAC;QAChB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;IAChD,CAAC;IAED,QAAQ,CAAC,KAAoC;QAC3C,KAAK,CAAC,QAAQ,CAAC,IAAA,sBAAS,EAAC,EAAE,EAAE,8CAA4B,EAAE,KAAK,CAAC,CAAC,CAAC;QACnE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACvC,CAAC,CAAC,QAAQ,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IAED,UAAU;QACR,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACvC,CAAC,CAAC,UAAU,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;CACF;AA5DD,oCA4DC","file":"content-model.js","sourcesContent":["import { defaultContentContainerStyle } from './style-constants';\nimport { BaseTooltipModel } from './base-tooltip-model';\nimport { ContentColumnModel } from './content-column-model';\nimport type { Maybe } from '@visactor/vutils';\nimport { mergeSpec } from '../../../../../util/spec/merge-spec';\n\nexport class ContentModel extends BaseTooltipModel {\n  shapeBox: Maybe<ContentColumnModel>;\n  keyBox: Maybe<ContentColumnModel>;\n  valueBox: Maybe<ContentColumnModel>;\n\n  init(): void {\n    if (!this.product) {\n      this.product = this.createElement('div', ['container-box']);\n    }\n    if (!this.shapeBox) {\n      this._initShapeBox();\n    }\n    if (!this.keyBox) {\n      this._initKeyBox();\n    }\n    if (!this.valueBox) {\n      this._initValueBox();\n    }\n  }\n\n  private _initShapeBox() {\n    const shapeBox = new ContentColumnModel(this.product!, this._option, 'shape-box', 0);\n    shapeBox.init();\n    this.shapeBox = shapeBox;\n    this.children[shapeBox.childIndex] = shapeBox;\n  }\n\n  private _initKeyBox() {\n    const keyBox = new ContentColumnModel(this.product!, this._option, 'key-box', 1);\n    keyBox.init();\n    this.keyBox = keyBox;\n    this.children[keyBox.childIndex] = keyBox;\n  }\n\n  private _initValueBox() {\n    const valueBox = new ContentColumnModel(this.product!, this._option, 'value-box', 2);\n    valueBox.init();\n    this.valueBox = valueBox;\n    this.children[valueBox.childIndex] = valueBox;\n  }\n\n  setStyle(style?: Partial<CSSStyleDeclaration>): void {\n    super.setStyle(mergeSpec({}, defaultContentContainerStyle, style));\n    Object.values(this.children).forEach(c => {\n      c.setStyle();\n    });\n  }\n\n  setContent(): void {\n    Object.values(this.children).forEach(c => {\n      c.setContent();\n    });\n  }\n\n  release(): void {\n    super.release();\n    this.shapeBox = null;\n    this.keyBox = null;\n    this.valueBox = null;\n  }\n}\n"]}