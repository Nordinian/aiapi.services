{"version":3,"sources":["../src/interaction/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { IElement } from '@visactor/vgrammar-core';\nimport type { IMark } from '../mark/interface';\nimport type { RenderMode } from '../typings/spec/common';\nimport type { BaseEventParams, IEventDispatcher, EventType } from '../event/interface';\nimport type { IModel } from '../model/interface';\nimport type { StateValue } from '../compile/mark';\n\nexport interface IInteraction {\n  registerMark: (state: StateValue, mark: IMark) => void;\n  filterEventMark: (params: BaseEventParams, state: StateValue) => boolean;\n  getStateMark: (state: StateValue) => IMark[] | null;\n\n  getEventElement: (stateValue: StateValue) => IElement[];\n  getEventElementData: (stateValue: StateValue) => any[];\n  addEventElement: (stateValue: StateValue, element: IElement) => void;\n  removeEventElement: (stateValue: StateValue, elements: IElement) => void;\n  exchangeEventElement: (stateValue: StateValue, elements: IElement) => void;\n  clearEventElement: (stateValue: StateValue, clearReverse: boolean) => void;\n  reverseEventElement: (stateValue: StateValue) => void;\n\n  setDisableActiveEffect: (disable: boolean) => void;\n}\n\nexport interface ITrigger {\n  init: () => void;\n  setStateKeys: (fields: string[]) => void;\n  registerMark: (mark: IMark) => void;\n  release: () => void;\n  hover?: IHoverSpec;\n  select?: ISelectSpec;\n}\n\nexport interface ITriggerOption {\n  mode: RenderMode;\n  interaction: IInteraction;\n  eventDispatcher: IEventDispatcher;\n  model: IModel;\n}\n\ntype Trigger = EventType | EventType[];\n\nexport type IHoverSpec = {\n  enable?: boolean;\n  trigger?: Trigger;\n  triggerOff?: Trigger;\n};\n\nexport type ISelectSpec = {\n  enable?: boolean;\n  mode?: 'single' | 'multiple';\n  trigger?: Trigger;\n  triggerOff?: Trigger;\n};\n\nexport interface ITriggerSpec {\n  hover?: IHoverSpec | boolean;\n  select?: ISelectSpec | boolean;\n}\n"]}