{"version":3,"sources":["../src/series/interface/common.ts"],"names":[],"mappings":"","file":"common.js","sourcesContent":["import type { DataView } from '@visactor/vdataset';\nimport type { IGrammarItem } from '../../compile/interface';\nimport type { IGroupMark } from '../../mark/group';\nimport type {\n  IBaseModelSpecTransformer,\n  IBaseModelSpecTransformerOption,\n  IModelConstructor,\n  IModelMarkInfo,\n  IModelOption,\n  IModelSpecInfo\n} from '../../model/interface';\nimport type { IRegion } from '../../region/interface';\nimport type { RenderMode } from '../../typings/spec/common';\nimport type { ISeries } from './series';\nimport type { IMarkProgressiveConfig } from '../../mark/interface';\nimport type { ISeriesSpec, StringOrNumber } from '../../typings';\nimport type { ILabelSpec, TransformedLabelSpec } from '../../component/label';\nimport type { SeriesMarkNameEnum, SeriesTypeEnum } from './type';\nimport type { ICustomPath2D } from '@visactor/vrender-core';\n\n// export type SeriesStyle = 'color' | 'size' | 'shape';\n\nexport interface ISeriesSeriesInfo {\n  key: string;\n  index?: number;\n  // 样式的值类型可能是 StringOrNumber | number[] | xxxx\n  style: (attribute: string) => any;\n  /** series 对应的缩略图类型 */\n  shapeType: string;\n}\n\nexport interface ISeriesOption extends IModelOption {\n  mode: RenderMode;\n  region: IRegion;\n  sourceDataList: DataView[];\n  getSeriesData: (id: StringOrNumber | undefined, index: number | undefined) => DataView | undefined;\n}\n\nexport interface ISeriesConstructor extends IModelConstructor {\n  readonly type: string;\n  mark?: SeriesMarkMap;\n  new (spec: any, options: ISeriesOption): ISeries;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ISeriesInitOption {}\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ISeriesUpdateDataOption {}\n\nexport interface ISeriesStackDataNode {\n  nodes: {\n    [key: string]: ISeriesStackDataMeta;\n  };\n}\nexport interface ISeriesStackDataLeaf {\n  values: any[];\n  total?: number;\n}\n\nexport type ISeriesStackDataMeta = ISeriesStackDataNode | ISeriesStackDataLeaf;\nexport type ISeriesStackData = ISeriesStackDataNode;\n\nexport type ISeriesStyle = ISeriesStyleItem[];\nexport type ISeriesStyleItem = {\n  name: string;\n} & {\n  [markName: string]: {\n    style?: any;\n  };\n};\n\nexport interface ISeriesMarkInitOption {\n  /** theme spec */\n  themeSpec?: any;\n\n  /** mark spec */\n  markSpec?: any;\n\n  /** 是否在编译时更新实际数据 */\n  skipBeforeLayouted?: boolean;\n\n  /** 父级 mark（如果是 undefined 则默认是系列的 root mark，如果是 false 则不配置父级 mark） */\n  parent?: IGroupMark | false;\n\n  /** 是否是 series field 所作用的 mark（用于 tooltip shape 取色等） */\n  isSeriesMark?: boolean;\n\n  /** 该 mark 依赖于哪些语法元素 */\n  depend?: IGrammarItem | IGrammarItem[];\n\n  /** 数据 key 值 */\n  key?: string;\n\n  /** 分组 key 值 */\n  groupKey?: string;\n\n  /** morph 配置开关 */\n  morph?: boolean;\n\n  /** morph元素的唯一key */\n  defaultMorphElementKey?: string;\n\n  /** 绑定系列数据（如果是 undefined 则默认是系列的 data，如果是 false 则不配置数据） */\n  dataView?: DataView | false;\n  /** 系列数据编译产物的名称 */\n  dataProductId?: string;\n  /** mark scale 如果需要使用统计信息设置domain的话，使用的series对应的统计数据 */\n  seriesId?: number;\n\n  /** 渐进渲染相关配置 */\n  progressive?: IMarkProgressiveConfig;\n\n  /** 是否支持 3d */\n  support3d?: boolean;\n  /* customized shape of mark  */\n  customShape?: (datum: any[], attrs: any, path: ICustomPath2D) => ICustomPath2D;\n}\n\nexport interface ISeriesMarkInfo extends IModelMarkInfo {\n  /** mark 名称 */\n  name: SeriesMarkNameEnum | string;\n}\n\nexport type SeriesMarkMap = Partial<Record<SeriesMarkNameEnum, ISeriesMarkInfo>>;\n\nexport interface ISeriesSpecInfo<T extends ISeriesSpec = ISeriesSpec> extends IModelSpecInfo {\n  /** model 具体类型 */\n  type: string | SeriesTypeEnum;\n  /** model spec */\n  spec: T;\n  /** 当前的 mark 标签 spec */\n  markLabelSpec?: Partial<Record<SeriesMarkNameEnum, TransformedLabelSpec[]>>;\n  /** 当前的总计标签 specInfo */\n  totalLabel?: IModelSpecInfo;\n}\n"]}