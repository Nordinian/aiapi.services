import { BaseTooltipProcessor } from "./base";

import { isNil } from "@visactor/vutils";

export class MarkTooltipProcessor extends BaseTooltipProcessor {
    constructor() {
        super(...arguments), this.activeType = "mark";
    }
    showTooltip(info, params, changePositionOnly) {
        const {datum: datum, series: series, dimensionInfo: dimensionInfo} = info, tooltipData = [ {
            datum: [ datum ],
            series: series
        } ], newParams = Object.assign(Object.assign({}, params), {
            dimensionInfo: this._preprocessDimensionInfo(dimensionInfo),
            changePositionOnly: changePositionOnly
        });
        return this._showTooltipByHandler(tooltipData, newParams);
    }
    shouldHandleTooltip(params, mouseEventData) {
        var _a;
        const {tooltipInfo: info} = mouseEventData;
        if (isNil(info)) return !1;
        const helper = null === (_a = params.model) || void 0 === _a ? void 0 : _a.tooltipHelper;
        return !!(null == helper ? void 0 : helper.activeType.includes("mark"));
    }
    getMouseEventData(params) {
        var _a;
        let info, ignore;
        if ("series" === (null === (_a = params.model) || void 0 === _a ? void 0 : _a.modelType)) {
            const series = params.model, helper = series.tooltipHelper, activeTriggers = null == helper ? void 0 : helper.activeTriggerSet.mark, ignoreTriggers = null == helper ? void 0 : helper.ignoreTriggerSet.mark;
            (null == activeTriggers ? void 0 : activeTriggers.has(params.model)) || (null == activeTriggers ? void 0 : activeTriggers.has(params.mark)) ? info = {
                mark: params.mark,
                datum: params.datum,
                series: series,
                dimensionInfo: this._getDimensionInfo(params)
            } : ((null == ignoreTriggers ? void 0 : ignoreTriggers.has(params.model)) || (null == ignoreTriggers ? void 0 : ignoreTriggers.has(params.mark))) && (ignore = !0);
        }
        return {
            tooltipInfo: info,
            ignore: ignore
        };
    }
}
//# sourceMappingURL=mark-tooltip.js.map
