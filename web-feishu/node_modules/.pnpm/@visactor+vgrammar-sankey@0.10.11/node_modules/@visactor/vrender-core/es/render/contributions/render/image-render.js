var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}, __metadata = this && this.__metadata || function(k, v) {
    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v);
}, __param = this && this.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};

import { inject, injectable, named } from "../../../common/inversify-lite";

import { ContributionProvider } from "../../../common/contribution-provider";

import { getTheme } from "../../../graphic/theme";

import { ImageRenderContribution } from "./contributions/constants";

import { IMAGE_NUMBER_TYPE } from "../../../graphic/constants";

import { isArray } from "@visactor/vutils";

import { createRectPath } from "../../../common/shape/rect";

import { BaseRender } from "./base-render";

import { defaultImageBackgroundRenderContribution } from "./contributions";

const repeatStr = [ "", "repeat-x", "repeat-y", "repeat" ];

let DefaultCanvasImageRender = class extends BaseRender {
    constructor(imageRenderContribitions) {
        super(), this.imageRenderContribitions = imageRenderContribitions, this.numberType = IMAGE_NUMBER_TYPE, 
        this.builtinContributions = [ defaultImageBackgroundRenderContribution ], this.init(imageRenderContribitions);
    }
    drawShape(image, context, x, y, drawContext, params, fillCb) {
        const imageAttribute = getTheme(image).image, {width: width = imageAttribute.width, height: height = imageAttribute.height, repeatX: repeatX = imageAttribute.repeatX, repeatY: repeatY = imageAttribute.repeatY, cornerRadius: cornerRadius = imageAttribute.cornerRadius, image: url} = image.attribute, data = this.valid(image, imageAttribute, fillCb);
        if (!data) return;
        const {fVisible: fVisible, sVisible: sVisible, doFill: doFill, doStroke: doStroke} = data;
        if (context.setShadowBlendStyle && context.setShadowBlendStyle(image, imageAttribute), 
        this.beforeRenderStep(image, context, x, y, doFill, !1, fVisible, !1, imageAttribute, drawContext, fillCb), 
        doFill) if (fillCb) fillCb(context, image.attribute, imageAttribute); else if (fVisible) {
            if (!url || !image.resources) return;
            const res = image.resources.get(url);
            if ("success" !== res.state) return;
            let needRestore = !1;
            0 === cornerRadius || isArray(cornerRadius) && cornerRadius.every((num => 0 === num)) || (context.beginPath(), 
            createRectPath(context, x, y, width, height, cornerRadius), context.save(), context.clip(), 
            needRestore = !0), context.setCommonStyle(image, image.attribute, x, y, imageAttribute);
            let repeat = 0;
            if ("repeat" === repeatX && (repeat |= 1), "repeat" === repeatY && (repeat |= 2), 
            repeat) {
                const pattern = context.createPattern(res.data, repeatStr[repeat]);
                context.fillStyle = pattern, context.translate(x, y, !0), context.fillRect(0, 0, width, height), 
                context.translate(-x, -y, !0);
            } else context.drawImage(res.data, x, y, width, height);
            needRestore && context.restore();
        }
        this.afterRenderStep(image, context, x, y, doFill, !1, fVisible, !1, imageAttribute, drawContext, fillCb);
    }
    draw(image, renderService, drawContext) {
        const {image: url} = image.attribute;
        if (!url || !image.resources) return;
        if ("success" !== image.resources.get(url).state) return;
        const {context: context} = renderService.drawParams;
        if (!context) return;
        const imageAttribute = getTheme(image).image;
        this._draw(image, imageAttribute, !1, drawContext);
    }
};

DefaultCanvasImageRender = __decorate([ injectable(), __param(0, inject(ContributionProvider)), __param(0, named(ImageRenderContribution)), __metadata("design:paramtypes", [ Object ]) ], DefaultCanvasImageRender);

export { DefaultCanvasImageRender };
//# sourceMappingURL=image-render.js.map
