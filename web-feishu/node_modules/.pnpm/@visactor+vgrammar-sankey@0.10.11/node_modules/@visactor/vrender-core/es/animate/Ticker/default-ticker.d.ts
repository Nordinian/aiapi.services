import type { ITickHandler, ITimeline, ITicker } from '../../interface';
export declare class ManualTickHandler implements ITickHandler {
    protected timerId: number;
    protected time: number;
    static Avaliable(): boolean;
    avaliable(): boolean;
    tick(interval: number, cb: (handler: ITickHandler, params?: {
        once: boolean;
    }) => void): void;
    tickTo(t: number, cb: (handler: ITickHandler, params?: {
        once: boolean;
    }) => void): void;
    release(): void;
    getTime(): number;
}
export declare class TimeOutTickHandler implements ITickHandler {
    protected timerId: number;
    static Avaliable(): boolean;
    avaliable(): boolean;
    tick(interval: number, cb: (handler: ITickHandler) => void): void;
    release(): void;
    getTime(): number;
}
export declare class RAFTickHandler implements ITickHandler {
    protected released: boolean;
    static Avaliable(): boolean;
    avaliable(): boolean;
    tick(interval: number, cb: (handler: ITickHandler) => void): void;
    release(): void;
    getTime(): number;
}
type TickerMode = 'raf' | 'timeout' | 'manual';
declare enum STATUS {
    INITIAL = 0,
    RUNNING = 1,
    PAUSE = 2
}
export declare class DefaultTicker implements ITicker {
    protected interval: number;
    protected tickerHandler: ITickHandler;
    protected _mode: TickerMode;
    protected status: STATUS;
    protected lastFrameTime: number;
    protected tickCounts: number;
    protected timelines: ITimeline[];
    autoStop: boolean;
    set mode(m: TickerMode);
    get mode(): TickerMode;
    constructor(timelines?: ITimeline[]);
    init(): void;
    addTimeline(timeline: ITimeline): void;
    remTimeline(timeline: ITimeline): void;
    protected initHandler(): ITickHandler | null;
    protected setupTickHandler(): boolean;
    setInterval(interval: number): void;
    getInterval(): number;
    setFPS(fps: number): void;
    getFPS(): number;
    tick(interval: number): void;
    tickTo(t: number): void;
    pause(): boolean;
    resume(): boolean;
    ifCanStop(): boolean;
    start(force?: boolean): boolean;
    stop(): void;
    protected handleTick: (handler: ITickHandler, params?: {
        once?: boolean;
    }) => void;
    protected _handlerTick: (handler: ITickHandler) => void;
}
export declare class ManualTicker extends DefaultTicker implements ITicker {
    protected interval: number;
    protected tickerHandler: ITickHandler;
    protected _mode: TickerMode;
    protected status: STATUS;
    protected lastFrameTime: number;
    protected tickCounts: number;
    protected timelines: ITimeline[];
    autoStop: boolean;
    set mode(m: TickerMode);
    get mode(): TickerMode;
    protected initHandler(): ITickHandler | null;
    protected setupTickHandler(): boolean;
    tickAt(time: number): void;
    ifCanStop(): boolean;
}
export {};
