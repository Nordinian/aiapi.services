import { getScaledStroke } from "../../../../common/canvas-utils";

import { defaultBaseBackgroundRenderContribution } from "./base-contribution-render";

import { drawArcPath } from "../utils";

import { BaseRenderContributionTime } from "../../../../common/enums";

import { defaultBaseTextureRenderContribution } from "./base-texture-contribution-render";

export class DefaultArcRenderContribution {
    constructor() {
        this.time = BaseRenderContributionTime.afterFillStroke, this.useStyle = !0, this.order = 0;
    }
    drawShape(arc, context, x, y, doFill, doStroke, fVisible, sVisible, arcAttribute, drawContext, fillCb, strokeCb) {
        const {outerBorder: outerBorder, innerBorder: innerBorder} = arc.attribute, doOuterBorder = outerBorder && !1 !== outerBorder.visible, doInnerBorder = innerBorder && !1 !== innerBorder.visible;
        if (!doOuterBorder && !doInnerBorder) return;
        const {innerRadius: innerRadius = arcAttribute.innerRadius, outerRadius: outerRadius = arcAttribute.outerRadius, startAngle: startAngle = arcAttribute.startAngle, endAngle: endAngle = arcAttribute.endAngle, opacity: opacity = arcAttribute.opacity, x: originX = arcAttribute.x, y: originY = arcAttribute.y, scaleX: scaleX = arcAttribute.scaleX, scaleY: scaleY = arcAttribute.scaleY} = arc.attribute, doStrokeOuter = !(!outerBorder || !outerBorder.stroke), doStrokeInner = !(!innerBorder || !innerBorder.stroke);
        if (doOuterBorder) {
            const {distance: distance = arcAttribute.outerBorder.distance} = outerBorder, d = getScaledStroke(context, distance, context.dpr), deltaAngle = distance / outerRadius;
            if (arc.setAttributes({
                outerRadius: outerRadius + d,
                innerRadius: innerRadius - d,
                startAngle: startAngle - deltaAngle,
                endAngle: endAngle + deltaAngle
            }), context.beginPath(), drawArcPath(arc, context, x, y, outerRadius + d, innerRadius - d), 
            context.setShadowBlendStyle && context.setShadowBlendStyle(arc, arc.attribute, arcAttribute), 
            strokeCb) strokeCb(context, outerBorder, arcAttribute.outerBorder); else if (doStrokeOuter) {
                const lastOpacity = arcAttribute.outerBorder.opacity;
                arcAttribute.outerBorder.opacity = opacity, context.setStrokeStyle(arc, outerBorder, (originX - x) / scaleX, (originY - y) / scaleY, arcAttribute.outerBorder), 
                arcAttribute.outerBorder.opacity = lastOpacity, context.stroke();
            }
        }
        if (doInnerBorder) {
            const {distance: distance = arcAttribute.innerBorder.distance} = innerBorder, d = getScaledStroke(context, distance, context.dpr), deltaAngle = distance / outerRadius;
            if (arc.setAttributes({
                outerRadius: outerRadius - d,
                innerRadius: innerRadius + d,
                startAngle: startAngle + deltaAngle,
                endAngle: endAngle - deltaAngle
            }), context.beginPath(), drawArcPath(arc, context, x, y, outerRadius - d, innerRadius + d), 
            context.setShadowBlendStyle && context.setShadowBlendStyle(arc, arc.attribute, arcAttribute), 
            strokeCb) strokeCb(context, innerBorder, arcAttribute.innerBorder); else if (doStrokeInner) {
                const lastOpacity = arcAttribute.innerBorder.opacity;
                arcAttribute.innerBorder.opacity = opacity, context.setStrokeStyle(arc, innerBorder, (originX - x) / scaleX, (originY - y) / scaleY, arcAttribute.innerBorder), 
                arcAttribute.innerBorder.opacity = lastOpacity, context.stroke();
            }
        }
        arc.setAttributes({
            outerRadius: outerRadius,
            innerRadius: innerRadius,
            startAngle: startAngle,
            endAngle: endAngle
        });
    }
}

export const defaultArcRenderContribution = new DefaultArcRenderContribution;

export const defaultArcTextureRenderContribution = defaultBaseTextureRenderContribution;

export const defaultArcBackgroundRenderContribution = defaultBaseBackgroundRenderContribution;
//# sourceMappingURL=arc-contribution-render.js.map
