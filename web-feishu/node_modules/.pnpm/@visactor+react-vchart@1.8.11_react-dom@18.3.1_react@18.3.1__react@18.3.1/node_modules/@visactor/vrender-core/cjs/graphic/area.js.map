{"version":3,"sources":["../src/graphic/area.ts"],"names":[],"mappings":"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","file":"area.js","sourcesContent":["import type { AABBBounds, OBBBounds, IPointLike } from '@visactor/vutils';\nimport type { IArea, IAreaCacheItem, IAreaGraphicAttribute } from '../interface';\nimport { Graphic, GRAPHIC_UPDATE_TAG_KEY, NOWORK_ANIMATE_ATTR } from './graphic';\nimport { CustomPath2D } from '../common/custom-path2d';\nimport { parsePadding, pointsInterpolation } from '../common/utils';\nimport { getTheme } from './theme';\nimport { application } from '../application';\nimport { AREA_NUMBER_TYPE } from './constants';\n\nconst AREA_UPDATE_TAG_KEY = ['segments', 'points', 'curveType', ...GRAPHIC_UPDATE_TAG_KEY];\n\nexport class Area extends Graphic<IAreaGraphicAttribute> implements IArea {\n  type: 'area' = 'area';\n\n  static NOWORK_ANIMATE_ATTR = {\n    segments: 1,\n    curveType: 1,\n    ...NOWORK_ANIMATE_ATTR\n  };\n\n  cache?: IAreaCacheItem;\n\n  constructor(params: IAreaGraphicAttribute) {\n    super(params);\n    this.numberType = AREA_NUMBER_TYPE;\n  }\n\n  isValid(): boolean {\n    return super.isValid() && this._isValid();\n  }\n  private _isValid(): boolean {\n    if (this.pathProxy) {\n      return true;\n    }\n    const { points, segments } = this.attribute;\n    if (segments) {\n      if (segments.length === 0) {\n        return false;\n      }\n      return true;\n    } else if (points) {\n      if (points.length === 0) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  protected doUpdateAABBBounds(): AABBBounds {\n    const areaTheme = getTheme(this).area;\n    this._AABBBounds.setValue(Infinity, Infinity, -Infinity, -Infinity);\n\n    const attribute = this.attribute;\n    const bounds = application.graphicService.updateAreaAABBBounds(\n      attribute,\n      getTheme(this).area,\n      this._AABBBounds,\n      this\n    ) as AABBBounds;\n\n    const { boundsPadding = areaTheme.boundsPadding } = attribute;\n    const paddingArray = parsePadding(boundsPadding);\n    if (paddingArray) {\n      bounds.expand(paddingArray);\n    }\n\n    this.clearUpdateBoundTag();\n    return bounds;\n  }\n  // private tryUpdateAABBBoundsByPoints(): AABBBounds {\n  //   const areaTheme = getTheme(this).area;\n  //   const { points = areaTheme.points } = this.attribute;\n  //   const b = this._AABBBounds;\n  //   points.forEach(p => {\n  //     b.add(p.x, p.y);\n  //     b.add(p.x1 ?? p.x, p.y1 ?? p.y); //面积图特殊性：由三个值构成，横向面积图，x1会省略；纵向面积图，y1会省略\n  //   });\n  //   const {\n  //     x = areaTheme.x,\n  //     y = areaTheme.y,\n  //     dx = areaTheme.dx,\n  //     dy = areaTheme.dy,\n  //     scaleX = areaTheme.scaleX,\n  //     scaleY = areaTheme.scaleY,\n  //     angle = areaTheme.angle\n  //   } = this.attribute;\n  //   // 合并shadowRoot的bounds\n  //   this.combindShadowAABBBounds(this._AABBBounds);\n  //   // TODO 加上锚点\n  //   transformBounds(b, x, y, scaleX, scaleY, angle);\n  //   this._AABBBounds.translate(dx, dy);\n  //   return b;\n  // }\n  // private tryUpdateAABBBoundsBySegments(): AABBBounds {\n  //   const areaTheme = getTheme(this).area;\n  //   const { segments = areaTheme.segments } = this.attribute;\n  //   const b = this._AABBBounds;\n  //   segments.forEach(s => {\n  //     s.points.forEach(p => {\n  //       b.add(p.x, p.y);\n  //       b.add(p.x1 ?? p.x, p.y1 ?? p.y); //面积图特殊性：由三个值构成，横向面积图，x1会省略；纵向面积图，y1会省略\n  //     });\n  //   });\n  //   const {\n  //     x = areaTheme.x,\n  //     y = areaTheme.y,\n  //     dx = areaTheme.dx,\n  //     dy = areaTheme.dy,\n  //     scaleX = areaTheme.scaleX,\n  //     scaleY = areaTheme.scaleY,\n  //     angle = areaTheme.angle\n  //   } = this.attribute;\n  //   // 合并shadowRoot的bounds\n  //   this.combindShadowAABBBounds(this._AABBBounds);\n  //   // TODO 加上锚点\n  //   transformBounds(b, x, y, scaleX, scaleY, angle);\n  //   this._AABBBounds.translate(dx, dy);\n  //   return b;\n  // }\n\n  protected tryUpdateOBBBounds(): OBBBounds {\n    throw new Error('暂不支持');\n  }\n\n  protected _interpolate(key: string, ratio: number, lastStepVal: any, nextStepVal: any, nextAttributes: any): void {\n    if (key === 'points') {\n      (nextAttributes as any).points = pointsInterpolation(lastStepVal, nextStepVal, ratio);\n    }\n  }\n\n  getDefaultAttribute(name: string) {\n    const areaTheme = getTheme(this).area;\n    return areaTheme[name];\n  }\n\n  protected needUpdateTags(keys: string[]): boolean {\n    return super.needUpdateTags(keys, AREA_UPDATE_TAG_KEY);\n  }\n  protected needUpdateTag(key: string): boolean {\n    return super.needUpdateTag(key, AREA_UPDATE_TAG_KEY);\n  }\n\n  toCustomPath() {\n    const path = new CustomPath2D();\n    const attribute = this.attribute;\n    const segments = attribute.segments;\n\n    const parsePoints = (points: IPointLike[]) => {\n      if (points && points.length) {\n        let isFirst = true;\n        const basePoints: IPointLike[] = [];\n        points.forEach(point => {\n          if (point.defined === false) {\n            return;\n          }\n          if (isFirst) {\n            path.moveTo(point.x, point.y);\n          } else {\n            path.lineTo(point.x, point.y);\n          }\n          basePoints.push({ x: point.x1 ?? point.x, y: point.y1 ?? point.y });\n\n          isFirst = false;\n        });\n\n        if (basePoints.length) {\n          for (let i = basePoints.length - 1; i >= 0; i--) {\n            path.lineTo(basePoints[i].x, basePoints[i].y);\n          }\n\n          path.closePath();\n        }\n      }\n    };\n\n    if (attribute.points) {\n      parsePoints(attribute.points);\n    } else if (segments && segments.length) {\n      segments.forEach(seg => {\n        parsePoints(seg.points);\n      });\n    }\n\n    return path;\n  }\n\n  clone() {\n    return new Area({ ...this.attribute });\n  }\n\n  getNoWorkAnimateAttr(): Record<string, number> {\n    return Area.NOWORK_ANIMATE_ATTR;\n  }\n}\n\nexport function createArea(attributes: IAreaGraphicAttribute): IArea {\n  return new Area(attributes);\n}\n"]}