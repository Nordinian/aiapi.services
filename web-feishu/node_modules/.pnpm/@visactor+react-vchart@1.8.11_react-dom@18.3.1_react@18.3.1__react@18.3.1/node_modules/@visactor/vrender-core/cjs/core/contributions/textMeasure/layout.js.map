{"version":3,"sources":["../src/core/contributions/textMeasure/layout.ts"],"names":[],"mappings":"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","file":"layout.js","sourcesContent":["import type { vec2 } from '@visactor/vutils';\nimport type { ITextMeasure, TextOptionsType } from '../../../interface/text';\nimport type { TextLayoutBBox, LayoutItemType, LayoutType, TextAlignType, TextBaselineType } from '../../../interface';\n\nexport class CanvasTextLayout {\n  private fontFamily: string;\n  private textOptions: TextOptionsType;\n  private textMeasure: ITextMeasure;\n\n  constructor(fontFamily: string, options: TextOptionsType, textMeasure: ITextMeasure) {\n    this.fontFamily = fontFamily;\n    this.textOptions = options;\n    this.textMeasure = textMeasure;\n  }\n\n  LayoutBBox(bbox: TextLayoutBBox, textAlign: TextAlignType, textBaseline: TextBaselineType): TextLayoutBBox {\n    if (textAlign === 'left' || textAlign === 'start') {\n      bbox.xOffset = 0;\n    } else if (textAlign === 'center') {\n      bbox.xOffset = bbox.width / -2;\n    } else if (textAlign === 'right' || textAlign === 'end') {\n      bbox.xOffset = -bbox.width;\n    } else {\n      throw new Error('非法的textAlign');\n    }\n\n    if (textBaseline === 'top') {\n      bbox.yOffset = 0;\n    } else if (textBaseline === 'middle') {\n      bbox.yOffset = bbox.height / -2;\n    } else if (textBaseline === 'alphabetic') {\n      bbox.yOffset = bbox.height * -0.79;\n    } else {\n      bbox.yOffset = -bbox.height;\n    }\n\n    return bbox;\n  }\n\n  GetLayout(\n    str: string,\n    width: number,\n    height: number,\n    textAlign: TextAlignType,\n    textBaseline: TextBaselineType,\n    lineHeight: number,\n    suffix: string,\n    wordBreak: boolean,\n    suffixPosition: 'start' | 'end' | 'middle'\n  ): LayoutType {\n    // 拆分str\n    const linesLayout: LayoutItemType[] = [];\n    // bbox高度可能大于totalHeight\n    const bboxWH: vec2 = [width, height];\n    const bboxOffset: vec2 = [0, 0];\n\n    while (str.length > 0) {\n      const { str: clipText } = this.textMeasure.clipTextWithSuffix(\n        str,\n        this.textOptions,\n        width,\n        suffix,\n        wordBreak,\n        suffixPosition\n      );\n      linesLayout.push({\n        str: clipText,\n        width: this.textMeasure.measureTextWidth(clipText, this.textOptions)\n      });\n      str = str.substring(clipText.length);\n    }\n\n    if (textAlign === 'left' || textAlign === 'start') {\n      // origin[0] = 0;\n    } else if (textAlign === 'center') {\n      bboxOffset[0] = bboxWH[0] / -2;\n    } else if (textAlign === 'right' || textAlign === 'end') {\n      bboxOffset[0] = -bboxWH[0];\n    }\n\n    if (textBaseline === 'top') {\n      // origin[1] = 0;\n    } else if (textBaseline === 'middle') {\n      bboxOffset[1] = bboxWH[1] / -2;\n    } else if (textBaseline === 'bottom') {\n      bboxOffset[1] = -bboxWH[1];\n    }\n\n    const bbox: TextLayoutBBox = {\n      xOffset: bboxOffset[0],\n      yOffset: bboxOffset[1],\n      width: bboxWH[0],\n      height: bboxWH[1]\n    };\n\n    return this.layoutWithBBox(bbox, linesLayout, textAlign, textBaseline, lineHeight);\n  }\n\n  /**\n   * 给定拆分好的每行字符串进行布局，如果传入lineWidth，那么后面的字符就拆分\n   * @param lines\n   * @param lineWidth\n   */\n  GetLayoutByLines(\n    lines: (string | number)[],\n    textAlign: TextAlignType,\n    textBaseline: TextBaselineType,\n    lineHeight: number,\n    suffix: string = '',\n    wordBreak: boolean,\n    lineWidth?: number,\n    suffixPosition: 'start' | 'end' | 'middle' = 'end'\n  ): LayoutType {\n    lines = lines.map(l => l.toString()) as string[];\n    const linesLayout: LayoutItemType[] = [];\n    // bbox高度可能大于totalHeight\n    const bboxWH: vec2 = [0, 0];\n    if (typeof lineWidth === 'number' && lineWidth !== Infinity) {\n      // 直接使用lineWidth，并拆分字符串\n      let width: number;\n      for (let i = 0, len = lines.length; i < len; i++) {\n        width = Math.min(this.textMeasure.measureTextWidth(lines[i] as string, this.textOptions), lineWidth);\n        linesLayout.push({\n          str: this.textMeasure.clipTextWithSuffix(\n            lines[i] as string,\n            this.textOptions,\n            width,\n            suffix,\n            wordBreak,\n            suffixPosition\n          ).str,\n          width\n        });\n      }\n      bboxWH[0] = lineWidth;\n    } else {\n      // 使用所有行中最长的作为lineWidth\n      lineWidth = 0;\n      let width: number;\n      let text: string;\n      for (let i = 0, len = lines.length; i < len; i++) {\n        text = lines[i] as string;\n        width = this.textMeasure.measureTextWidth(text, this.textOptions);\n        lineWidth = Math.max(lineWidth, width);\n        linesLayout.push({ str: text, width });\n      }\n      bboxWH[0] = lineWidth;\n    }\n    bboxWH[1] = linesLayout.length * lineHeight;\n\n    bboxWH[0] = linesLayout.reduce((a, b) => Math.max(a, b.width), 0);\n\n    const bbox: TextLayoutBBox = {\n      xOffset: 0,\n      yOffset: 0,\n      width: bboxWH[0],\n      height: bboxWH[1]\n    };\n\n    this.LayoutBBox(bbox, textAlign, textBaseline);\n\n    return this.layoutWithBBox(bbox, linesLayout, textAlign, textBaseline, lineHeight);\n  }\n\n  layoutWithBBox(\n    bbox: TextLayoutBBox,\n    lines: LayoutItemType[],\n    textAlign: TextAlignType,\n    textBaseline: TextBaselineType,\n    lineHeight: number\n  ): LayoutType {\n    const origin: vec2 = [0, 0];\n    const totalLineHeight = lines.length * lineHeight; // 总高度\n    // origin在y方向需要初始化，然后递增即可\n    if (textBaseline === 'top') {\n      // origin[1] = 0;\n    } else if (textBaseline === 'middle') {\n      origin[1] = (bbox.height - totalLineHeight) / 2;\n    } else if (textBaseline === 'bottom') {\n      origin[1] = bbox.height - totalLineHeight;\n    }\n\n    for (let i = 0; i < lines.length; i++) {\n      this.lineOffset(bbox, lines[i], textAlign, textBaseline, lineHeight, origin);\n    }\n\n    return {\n      bbox,\n      lines,\n      fontFamily: this.fontFamily,\n      fontSize: this.textOptions.fontSize,\n      fontWeight: this.textOptions.fontWeight,\n      lineHeight,\n      textAlign,\n      textBaseline\n    };\n  }\n\n  /**\n   * 计算line在bbox中的位置，需要配合layoutWithBBox使用\n   * @param bbox\n   * @param line\n   * @param textAlign\n   * @param textBaseline\n   * @param lineHeight\n   * @param origin 这个line的左上角位置，会复用并修改\n   */\n  private lineOffset(\n    bbox: TextLayoutBBox,\n    line: LayoutItemType,\n    textAlign: TextAlignType,\n    textBaseline: TextBaselineType,\n    lineHeight: number,\n    origin: vec2\n  ): LayoutItemType {\n    if (textAlign === 'left' || textAlign === 'start') {\n      line.leftOffset = 0;\n    } else if (textAlign === 'center') {\n      line.leftOffset = (bbox.width - line.width) / 2;\n    } else if (textAlign === 'right' || textAlign === 'end') {\n      line.leftOffset = bbox.width - line.width;\n    }\n\n    // line.topOffset = lineHeight * 0.79 + origin[1]; // 渲染默认使用alphabetic\n    line.topOffset = (lineHeight - this.textOptions.fontSize) / 2 + this.textOptions.fontSize * 0.79 + origin[1];\n    origin[1] += lineHeight;\n\n    return line;\n  }\n}\n"]}