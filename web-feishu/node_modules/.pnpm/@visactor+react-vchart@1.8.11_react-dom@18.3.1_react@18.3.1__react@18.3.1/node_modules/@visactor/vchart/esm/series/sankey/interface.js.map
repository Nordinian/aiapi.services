{"version":3,"sources":["../src/series/sankey/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { ISeriesSpec, DirectionType, IMarkTheme } from '../../typings';\nimport type { IMarkSpec } from '../../typings/spec/common';\nimport type { IRectMarkSpec, ILinkPathMarkSpec } from '../../typings/visual';\nimport type { IAnimationSpec } from '../../animation/spec';\nimport type { SankeyAppearPreset, SankeyMark } from './animation';\nimport type { SeriesMarkNameEnum } from '../interface/type';\nimport type { ILabelSpec } from '../../component/label';\n\nexport interface ISankeySeriesSpec extends Omit<ISeriesSpec, 'data'>, IAnimationSpec<SankeyMark, SankeyAppearPreset> {\n  nameKey: any;\n  type: 'sankey';\n\n  /**\n   * 数据字段配置\n   */\n  /** 节点名称字段配置 */\n  categoryField: string;\n  /** 节点之间关系的权重字段 */\n  valueField: string;\n  /** 来源节点数据字段\n   *  层级数据不提供\n   */\n  sourceField?: string;\n  /** 目标节点数据字段\n   *  层级数据不提供\n   */\n  targetField?: string;\n\n  /**\n   * 图表布局方向\n   */\n  direction?: DirectionType;\n  /**\n   * 节点的对齐类型\n   */\n  nodeAlign?: 'left' | 'right' | 'center' | 'justify' | 'start' | 'end';\n  /**\n   * 同一层中两个节点之间的间隙大小\n   */\n  nodeGap?: number;\n  /**\n   * 每个节点的宽度，支持三种取值\n   * 1. 百分比字符串，例如：{ nodeWidth: '12%' }\n   * 2. 以'px'为单位的简单数字，eg: { nodeWidth: 20 }\n   * 3. function，通过自定义计算指定nodeWidth\n   */\n  nodeWidth?: string | number | ((node: SankeyNodeElement) => number);\n  /**\n   * link宽度，单位px\n   */\n  linkWidth?: number | ((link: SankeyLinkElement) => number);\n  /**\n   * link + node 的最小宽度\n   */\n  minStepWidth?: number;\n  /**\n   * 数据不为零或空时节点的最小大小\n   *  - 这个配置可以用来避免数据太小时看不到太细的节点\n   *  - 建议小于5px\n   */\n  minNodeHeight?: number;\n  /**\n   * 数据不为零或空时边的最小大小\n   *  - 这个配置可以用来避免数据太小的时候看不到太细的链接\n   *  - 建议小于5px\n   *  - 当同时指定 `minNodeHeight` 和 `minLinkHeight` 两个选项时，此选项应小于 `minNodeHeight`\n   */\n  minLinkHeight?: number;\n  /** 布局的迭代次数 */\n  iterations?: number;\n  /** 解析node的key，defaultValue */\n  nodeKey?: string | number | ((datum: SankeyNodeDatum) => string | number);\n  /** 按此funtion排序link */\n  linkSortBy?: (a: SankeyLinkElement, b: SankeyLinkElement) => number;\n  /** 按此funtion排序node */\n  nodeSortBy?: (a: SankeyNodeElement, b: SankeyNodeElement) => number;\n  /** 自定义指定节点层 */\n  setNodeLayer?: (datum: SankeyNodeDatum) => number;\n\n  /** 节点配置 */\n  [SeriesMarkNameEnum.node]?: IMarkSpec<IRectMarkSpec>;\n\n  /** 边配置 */\n  [SeriesMarkNameEnum.link]?: IMarkSpec<ILinkPathMarkSpec>;\n\n  /** 联动交互配置 */\n  emphasis?: {\n    /** 是否开启交互 */\n    enable: boolean;\n    /**\n     * 交互触发类型\n     * 默认为‘click'\n     */\n    trigger?: 'click' | 'hover';\n    /**桑基图提供3种在节点上的交互联动效果\n     * self: 仅高亮当前节点。\n     * adjacency: 高亮当前节点上下游节点和关联的边，淡化其它图形元素。\n     * related： 高亮与当前节点相关的整条路径上的节点和边，淡化其它图形元素。 */\n    effect: 'self' | 'adjacency' | 'related';\n  };\n\n  /** 标签配置 */\n  [SeriesMarkNameEnum.label]?: ILabelSpec & {\n    /**\n     * 标签布局方式\n     * @default 'outside'\n     */\n    position: 'outside' | 'inside-start' | 'inside-middle' | 'inside-end' | 'left' | 'right';\n    /** 标签文字缩略 */\n    limit: number;\n  };\n\n  /** 进度条配置 */\n  // scroll?: IScrollSpec & {\n  //   /** 是否开启进度条 */\n  //   enable: boolean;\n  // };\n}\n\nexport interface SankeyLinkDatum {\n  source: string | number;\n  target: string | number;\n  value?: number;\n}\n\nexport interface SankeyNodeDatum {\n  value?: number;\n}\n\nexport interface HierarchyNodeDatum {\n  value?: number;\n  children?: HierarchyNodeDatum[];\n}\n\nexport type SankeyData =\n  | {\n      nodes?: SankeyNodeDatum[];\n      links: SankeyLinkDatum[];\n    }\n  | {\n      nodes: HierarchyNodeDatum[];\n    };\n\n/**\n * The node element after sankey layout\n */\nexport interface SankeyNodeElement {\n  key: string | number;\n  index: number;\n  /** the depth of node, from source to target */\n  depth: number;\n\n  /** the depth of node, from target to source */\n  endDepth?: number;\n  /** the final layer index after layout */\n  layer?: number;\n  isLastLayer?: boolean;\n  value: number;\n  datum: SankeyNodeDatum;\n  sourceLinks: SankeyLinkElement[];\n  targetLinks: SankeyLinkElement[];\n  x0?: number;\n  y0?: number;\n  x1?: number;\n  y1?: number;\n}\n/**\n * the link element after sankey layout\n */\nexport interface SankeyLinkElement {\n  vertical?: boolean;\n  index: number;\n  source: string | number;\n  target: string | number;\n  value: number;\n  datum: SankeyLinkDatum | SankeyLinkDatum[];\n  thickness?: number;\n  sourceRect?: { x0: number; x1: number; y0: number; y1: number };\n  targetRect?: { x0: number; x1: number; y0: number; y1: number };\n  /** this will only be generate in hierarchy node data*/\n  parents?: (string | number)[];\n  y0?: number;\n  y1?: number;\n  x0?: number;\n  x1?: number;\n}\n\nexport type SankeyLayoutResult = {\n  nodes: SankeyNodeElement[];\n  links: SankeyLinkElement[];\n  columns: SankeyNodeElement[][];\n}[];\n\nexport interface ISankeySeriesTheme {\n  [SeriesMarkNameEnum.node]?: IMarkTheme<IRectMarkSpec>;\n  [SeriesMarkNameEnum.link]?: IMarkTheme<ILinkPathMarkSpec>;\n}\n"]}