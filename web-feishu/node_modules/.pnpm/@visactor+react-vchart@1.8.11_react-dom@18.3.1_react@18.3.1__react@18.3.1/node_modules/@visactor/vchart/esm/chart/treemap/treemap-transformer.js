import { BaseChartSpecTransformer } from "../base";

export class TreemapChartSpecTransformer extends BaseChartSpecTransformer {
    _getDefaultSeriesSpec(spec) {
        const series = Object.assign(Object.assign({}, super._getDefaultSeriesSpec(spec)), {
            categoryField: spec.categoryField,
            valueField: spec.valueField,
            seriesField: spec.seriesField,
            aspectRatio: spec.aspectRatio,
            splitType: spec.splitType,
            maxDepth: spec.maxDepth,
            gapWidth: spec.gapWidth,
            nodePadding: spec.nodePadding,
            minVisibleArea: spec.minVisibleArea,
            minChildrenVisibleArea: spec.minChildrenVisibleArea,
            minChildrenVisibleSize: spec.minChildrenVisibleSize,
            roam: spec.roam,
            drill: spec.drill,
            drillField: spec.drillField,
            leaf: spec.leaf,
            nonLeaf: spec.nonLeaf,
            nonLeafLabel: spec.nonLeafLabel
        }), seriesType = this.seriesType;
        return seriesType && (series.type = seriesType, series[seriesType] = spec[seriesType]), 
        series;
    }
    transformSpec(spec) {
        super.transformSpec(spec);
        const defaultSeriesSpec = this._getDefaultSeriesSpec(spec);
        spec.series && 0 !== spec.series.length ? spec.series.forEach((s => {
            this._isValidSeries(s.type) && Object.keys(defaultSeriesSpec).forEach((k => {
                k in s || (s[k] = defaultSeriesSpec[k]);
            }));
        })) : spec.series = [ defaultSeriesSpec ];
    }
}
//# sourceMappingURL=treemap-transformer.js.map
