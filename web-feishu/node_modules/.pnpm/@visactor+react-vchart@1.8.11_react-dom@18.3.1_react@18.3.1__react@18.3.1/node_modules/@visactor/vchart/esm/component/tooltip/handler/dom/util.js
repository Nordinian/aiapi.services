import { mergeSpec } from "../../../../util/spec/merge-spec";

import { normalizeLayoutPaddingSpec } from "../../../../util/space";

import { isValid, isArray } from "@visactor/vutils";

import { calculateLineHeight } from "@visactor/vrender-core";

const DEFAULT_SHAPE_SPACING = 8, DEFAULT_KEY_SPACING = 26, DEFAULT_VALUE_SPACING = 0;

export const getPixelPropertyStr = (num, defaultStr) => isValid(num) ? isArray(num) ? num.map((n => `${n}px`)).join(" ") : `${num}px` : null != defaultStr ? defaultStr : "initial";

export const pixelPropertyStrToNumber = str => {
    const numArr = str.split(" ").map((n => Number.isNaN(n) ? Number.parseFloat(n.substring(0, n.length - 2)) : Number.parseFloat(n)));
    return 1 === numArr.length ? numArr[0] : numArr;
};

export function getDomStyles(attributes) {
    var _a, _b, _c, _d, _e;
    const {panel: panel = {}, title: titleAttribute, content: contentAttribute, titleStyle: titleStyle = {}, contentStyle: contentStyle = {}, padding: padding, keyWidth: keyWidth, valueWidth: valueWidth, enterable: enterable, transitionDuration: transitionDuration} = null != attributes ? attributes : {}, {fill: backgroundColor, shadow: shadow, shadowBlur: shadowBlur, shadowColor: shadowColor, shadowOffsetX: shadowOffsetX, shadowOffsetY: shadowOffsetY, shadowSpread: shadowSpread, cornerRadius: cornerRadius, stroke: strokeColor, lineWidth: lineWidth = 0, width: width = 0, height: height = 0} = panel, {value: title = {}} = titleStyle, {shape: shape = {}, key: key = {}, value: value = {}} = contentStyle, shapeStyle = getShapeStyle(shape), keyStyle = getLabelStyle(key), valueStyle = getLabelStyle(value), {bottom: bottom, left: left, right: right, top: top} = normalizeLayoutPaddingSpec(padding);
    return {
        panel: {
            width: getPixelPropertyStr(width + 2 * lineWidth),
            minHeight: getPixelPropertyStr(height + 2 * lineWidth),
            paddingBottom: getPixelPropertyStr(bottom),
            paddingLeft: getPixelPropertyStr(left),
            paddingRight: getPixelPropertyStr(right),
            paddingTop: getPixelPropertyStr(top),
            borderColor: strokeColor,
            borderWidth: getPixelPropertyStr(lineWidth),
            borderRadius: getPixelPropertyStr(cornerRadius),
            backgroundColor: backgroundColor ? `${backgroundColor}` : "transparent",
            boxShadow: shadow ? `${shadowOffsetX}px ${shadowOffsetY}px ${shadowBlur}px ${shadowSpread}px ${shadowColor}` : "initial",
            pointerEvents: enterable ? "auto" : "none",
            transitionDuration: transitionDuration ? `${transitionDuration}ms` : "initial",
            transitionProperty: transitionDuration ? "transform" : "initial",
            transitionTimingFunction: transitionDuration ? "ease-out" : "initial"
        },
        title: Object.assign({
            marginTop: "0px",
            marginBottom: (null == contentAttribute ? void 0 : contentAttribute.length) ? getPixelPropertyStr(null == titleAttribute ? void 0 : titleAttribute.spaceRow) : "0px"
        }, getLabelStyle(mergeSpec({}, title, null == titleAttribute ? void 0 : titleAttribute.value))),
        content: {},
        shapeColumn: {
            common: shapeStyle,
            items: [],
            width: getPixelPropertyStr(shape.size),
            marginRight: getPixelPropertyStr(null !== (_a = shape.spacing) && void 0 !== _a ? _a : 8),
            marginBottom: getPixelPropertyStr(-(null !== (_c = null === (_b = null == contentAttribute ? void 0 : contentAttribute[(null == contentAttribute ? void 0 : contentAttribute.length) - 1]) || void 0 === _b ? void 0 : _b.spaceRow) && void 0 !== _c ? _c : 0))
        },
        keyColumn: {
            common: keyStyle,
            items: null == contentAttribute ? void 0 : contentAttribute.map((({key: key, spaceRow: spaceRow}, i) => Object.assign(Object.assign(Object.assign({
                marginTop: "0px",
                marginBottom: i < contentAttribute.length - 1 ? getPixelPropertyStr(spaceRow) : "0px"
            }, keyStyle), getLabelStyle(key)), (null == key ? void 0 : key.multiLine) ? {
                width: getPixelPropertyStr(Math.ceil(key.width))
            } : void 0))),
            width: getPixelPropertyStr(keyWidth),
            marginRight: getPixelPropertyStr(null !== (_d = key.spacing) && void 0 !== _d ? _d : 26)
        },
        valueColumn: {
            common: valueStyle,
            items: null == contentAttribute ? void 0 : contentAttribute.map((({value: value, spaceRow: spaceRow}, i) => Object.assign(Object.assign(Object.assign({
                marginTop: "0px",
                marginBottom: i < contentAttribute.length - 1 ? getPixelPropertyStr(spaceRow) : "0px"
            }, valueStyle), getLabelStyle(value)), (null == value ? void 0 : value.multiLine) ? {
                width: getPixelPropertyStr(Math.ceil(value.width))
            } : void 0))),
            width: getPixelPropertyStr(valueWidth),
            marginRight: getPixelPropertyStr(null !== (_e = value.spacing) && void 0 !== _e ? _e : 0)
        }
    };
}

function getLabelStyle(labelStyle, defaultStyle) {
    if (!labelStyle) return;
    const {fontFamily: labelFont, fontSize: labelFontSize, fill: labelColor, textAlign: textAlign, lineHeight: lineHeight, fontWeight: fontWeight, multiLine: multiLine, wordBreak: wordBreak, maxWidth: maxWidth} = mergeSpec({}, defaultStyle, labelStyle), styleObj = {};
    return styleObj.fontFamily = labelFont, styleObj.fontSize = getPixelPropertyStr(labelFontSize), 
    styleObj.color = labelColor, styleObj.textAlign = textAlign, styleObj.lineHeight = getPixelPropertyStr(calculateLineHeight(lineHeight, labelFontSize)), 
    styleObj.fontWeight = fontWeight, styleObj.whiteSpace = multiLine ? "initial" : "nowrap", 
    styleObj.wordBreak = multiLine ? null != wordBreak ? wordBreak : "break-word" : "normal", 
    styleObj.maxWidth = getPixelPropertyStr(maxWidth), styleObj;
}

function getShapeStyle(shapeStyle, defaultStyle) {
    if (!shapeStyle) return;
    const {size: size} = mergeSpec({}, defaultStyle, shapeStyle), styleObj = {};
    return styleObj.width = getPixelPropertyStr(size), styleObj;
}
//# sourceMappingURL=util.js.map
