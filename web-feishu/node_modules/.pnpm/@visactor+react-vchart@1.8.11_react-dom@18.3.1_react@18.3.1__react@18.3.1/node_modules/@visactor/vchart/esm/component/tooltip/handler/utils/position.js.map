{"version":3,"sources":["../src/component/tooltip/handler/utils/position.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAEjE,MAAM,CAAC,MAAM,6BAA6B,GAAG,CAC3C,QAAqE,EACrE,KAAiB,EACjB,EAAE;IACF,IAAI,MAAM,CAAC;IACX,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;QACrB,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACtB,MAAM,GAAG,QAAQ,CAAC;SACnB;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;YAE/B,MAAM,eAAe,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;YAExC,IAAI,QAAQ,CAAC,eAAe,CAAC,EAAE;gBAC7B,MAAM,GAAG,eAAe,CAAC;aAC1B;SACF;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAKF,MAAM,CAAC,MAAM,YAAY,GACvB;IACE,QAA2B,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC/C,SAA4B,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;IACjD,UAA6B,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;IACnD,OAA0B,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAC;IAC7C,MAAyB,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC;IAC1C,MAAyB,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC;IAC1C,MAAyB,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC;IAC3C,MAAyB,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC;IAC3C,UAA6B,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;IACnD,MAAyB,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC7C,MAAyB,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC7C,MAAyB,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;IAC9C,MAAyB,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;CAC/C,CAAC;AAEJ,MAAM,CAAC,MAAM,yBAAyB,GAAG,CACvC,QAA8B,EAC9B,WAA2C,EACZ,EAAE,eAAC,OAAA,MAAA,MAAA,YAAY,CAAC,QAAQ,CAAC,0CAAG,CAAC,CAAC,mCAAI,WAAW,CAAA,EAAA,CAAC;AAE/E,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,QAA8B,EAC9B,WAAyC,EACZ,EAAE,eAAC,OAAA,MAAA,MAAA,YAAY,CAAC,QAAQ,CAAC,0CAAG,CAAC,CAAC,mCAAI,WAAW,CAAA,EAAA,CAAC","file":"position.js","sourcesContent":["import { TooltipFixedPosition } from '../../../../typings/tooltip/position';\nimport { isFunction, isNumber, isValid } from '@visactor/vutils';\n\nexport const getActualTooltipPositionValue = (\n  position: number | ((event: MouseEvent) => number) | null | undefined,\n  event: MouseEvent\n) => {\n  let result;\n  if (isValid(position)) {\n    if (isNumber(position)) {\n      result = position;\n    } else if (isFunction(position)) {\n      //  这里额外判断下是否合法\n      const tooltipPosition = position(event);\n\n      if (isNumber(tooltipPosition)) {\n        result = tooltipPosition;\n      }\n    }\n  }\n  return result;\n};\n\nexport type TooltipHorizontalPositionType = 'left' | 'right' | 'middle';\nexport type TooltipVerticalPositionType = 'top' | 'bottom' | 'middle';\n\nexport const positionType: Record<TooltipFixedPosition, [TooltipHorizontalPositionType, TooltipVerticalPositionType]> =\n  {\n    [TooltipFixedPosition.left]: ['left', 'middle'],\n    [TooltipFixedPosition.right]: ['right', 'middle'],\n    [TooltipFixedPosition.inside]: ['middle', 'middle'],\n    [TooltipFixedPosition.top]: ['middle', 'top'],\n    [TooltipFixedPosition.lt]: ['left', 'top'],\n    [TooltipFixedPosition.tl]: ['left', 'top'],\n    [TooltipFixedPosition.rt]: ['right', 'top'],\n    [TooltipFixedPosition.tr]: ['right', 'top'],\n    [TooltipFixedPosition.bottom]: ['middle', 'bottom'],\n    [TooltipFixedPosition.bl]: ['left', 'bottom'],\n    [TooltipFixedPosition.lb]: ['left', 'bottom'],\n    [TooltipFixedPosition.br]: ['right', 'bottom'],\n    [TooltipFixedPosition.rb]: ['right', 'bottom']\n  };\n\nexport const getHorizontalPositionType = (\n  position: TooltipFixedPosition,\n  defaultCase?: TooltipHorizontalPositionType\n): TooltipHorizontalPositionType => positionType[position]?.[0] ?? defaultCase;\n\nexport const getVerticalPositionType = (\n  position: TooltipFixedPosition,\n  defaultCase?: TooltipVerticalPositionType\n): TooltipVerticalPositionType => positionType[position]?.[1] ?? defaultCase;\n"]}