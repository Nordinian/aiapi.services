{"version":3,"sources":["../src/component/tooltip/processor/dimension-tooltip.ts"],"names":[],"mappings":";;;AAIA,iCAA8C;AAC9C,6CAAyC;AAGzC,MAAa,yBAA0B,SAAQ,2BAAoB;IAAnE;;QACE,eAAU,GAAsB,WAAW,CAAC;IAsC9C,CAAC;IAnCC,WAAW,CAAC,IAA0B,EAAE,MAAuB,EAAE,kBAA2B;QAC1F,MAAM,SAAS,mCACV,MAAM,KACT,aAAa,EAAE,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAClD,kBAAkB,GACnB,CAAC;QACF,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACrD,CAAC;IAGD,mBAAmB,CAAC,MAAuB,EAAE,cAAuC;;QAClF,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,cAAc,CAAC;QAC7C,IAAI,IAAA,cAAK,EAAC,IAAI,CAAC,EAAE;YACf,OAAO,KAAK,CAAC;SACd;QAED,MAAM,MAAM,GAAG,MAAC,MAAM,CAAC,KAAiB,0CAAE,aAAa,CAAC;QACxD,MAAM,UAAU,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,mCAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC;QAC7E,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YACrC,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAGD,iBAAiB,CAAC,MAAuB;;QACvC,OAAO;YACL,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;YAE3C,MAAM,EAAE,CAAC,GAAG,CAAC,MAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAU,CAAC,YAAY,EAAE,mCAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;;gBACnF,MAAM,cAAc,GAAG,MAAA,KAAK,CAAC,aAAa,0CAAE,gBAAgB,CAAC,SAAS,CAAC;gBACvE,OAAO,CAAC,MAAM,CAAC,KAAK,KAAI,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,KAAI,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA,CAAC,CAAC;YAClH,CAAC,CAAC;SACH,CAAC;IACJ,CAAC;CACF;AAvCD,8DAuCC","file":"dimension-tooltip.js","sourcesContent":["import type { BaseEventParams } from '../../../event/interface';\nimport type { TooltipActiveType } from '../../../typings';\nimport type { TooltipHandlerParams } from '../interface';\nimport type { DimensionTooltipInfo, MouseEventData } from './interface';\nimport { BaseTooltipProcessor } from './base';\nimport { isNil } from '@visactor/vutils';\nimport type { ISeries } from '../../../series/interface';\n\nexport class DimensionTooltipProcessor extends BaseTooltipProcessor {\n  activeType: TooltipActiveType = 'dimension';\n\n  /** 触发对应类型的 tooltip */\n  showTooltip(info: DimensionTooltipInfo, params: BaseEventParams, changePositionOnly: boolean) {\n    const newParams: TooltipHandlerParams = {\n      ...params,\n      dimensionInfo: this._preprocessDimensionInfo(info),\n      changePositionOnly\n    };\n    return this._showTooltipByHandler(info, newParams);\n  }\n\n  /** 判断是否应该触发 tooltip */\n  shouldHandleTooltip(params: BaseEventParams, mouseEventData: Partial<MouseEventData>): boolean {\n    const { tooltipInfo: info } = mouseEventData;\n    if (isNil(info)) {\n      return false;\n    }\n\n    const helper = (params.model as ISeries)?.tooltipHelper;\n    const activeType = helper?.activeType ?? this.component.getSpec().activeType;\n    if (!activeType.includes('dimension')) {\n      return false;\n    }\n    return true;\n  }\n\n  /** 获取触发 tooltip 需要的信息 */\n  getMouseEventData(params: BaseEventParams): MouseEventData {\n    return {\n      tooltipInfo: this._getDimensionInfo(params),\n      // 排除被声明要忽略的项\n      ignore: [...((this.component.getOption() as any).getAllSeries() ?? [])].some(model => {\n        const ignoreTriggers = model.tooltipHelper?.ignoreTriggerSet.dimension;\n        return (params.model && ignoreTriggers?.has(params.model)) || (params.mark && ignoreTriggers?.has(params.mark));\n      })\n    };\n  }\n}\n"]}