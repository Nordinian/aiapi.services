"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.AreaSeriesSpecTransformer = void 0;

const vutils_1 = require("@visactor/vutils"), line_mixin_transformer_1 = require("../mixin/line-mixin-transformer"), util_1 = require("../../util");

class AreaSeriesSpecTransformer extends line_mixin_transformer_1.LineLikeSeriesSpecTransformer {
    _transformLabelSpec(spec) {
        var _a, _b, _c;
        super._transformLabelSpec(spec), this._addMarkLabelSpec(spec, "area", "areaLabel", "initLineLabelMarkStyle", void 0, !0);
        !1 !== (null === (_a = spec.point) || void 0 === _a ? void 0 : _a.visible) && !1 !== (null === (_c = null === (_b = spec.point) || void 0 === _b ? void 0 : _b.style) || void 0 === _c ? void 0 : _c.visible) || this._addMarkLabelSpec(spec, "area");
    }
    _transformSpecAfterMergingTheme(spec, chartSpec, chartSpecInfo) {
        var _a, _b, _c, _d, _e;
        super._transformSpecAfterMergingTheme(spec, chartSpec, chartSpecInfo);
        const {area: area = {}, line: line = {}, seriesMark: seriesMark = "area"} = spec, isAreaVisible = !1 !== area.visible && !1 !== (null === (_a = area.style) || void 0 === _a ? void 0 : _a.visible), isLineVisible = !1 !== line.visible && !1 !== (null === (_b = line.style) || void 0 === _b ? void 0 : _b.visible);
        area.interactive = !(!area.interactive && null !== (_c = line.interactive) && void 0 !== _c && !_c), 
        area.support3d = !(!area.support3d && !line.support3d), area.zIndex = (0, vutils_1.isValid)(area.zIndex) || (0, 
        vutils_1.isValid)(line.zIndex) ? Math.max(null !== (_d = area.zIndex) && void 0 !== _d ? _d : 0, null !== (_e = line.zIndex) && void 0 !== _e ? _e : 0) : void 0, 
        area.style && delete area.style.stroke, area.state && Object.keys(area.state).forEach((state => {
            "style" in area.state[state] ? delete area.state[state].style.stroke : delete area.state[state].stroke;
        }));
        let mainSpec = area, subSpec = line;
        ("line" === seriesMark || isLineVisible && !isAreaVisible) && (mainSpec = line, 
        subSpec = area), area.style = (0, util_1.mergeSpec)({}, subSpec.style, mainSpec.style), 
        area.state = (0, util_1.mergeSpec)({}, subSpec.state, mainSpec.state), isAreaVisible || (area.style.fill = !1), 
        isLineVisible || (area.style.stroke = !1), area.visible = !(!isAreaVisible && !isLineVisible), 
        spec.area = area, spec.line = line;
    }
}

exports.AreaSeriesSpecTransformer = AreaSeriesSpecTransformer;
//# sourceMappingURL=area-transformer.js.map
