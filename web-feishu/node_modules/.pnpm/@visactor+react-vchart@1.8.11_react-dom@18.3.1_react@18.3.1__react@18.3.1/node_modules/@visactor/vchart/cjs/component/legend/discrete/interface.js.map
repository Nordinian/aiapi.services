{"version":3,"sources":["../src/component/legend/discrete/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { IRectMarkSpec, ISymbolMarkSpec, ITextMarkSpec } from '../../../typings/visual';\nimport type { DiscreteLegendAttrs, LegendItemDatum, LegendItem } from '@visactor/vrender-components';\nimport type { ILegendCommonSpec, NoVisibleMarkStyle } from '../interface';\nimport type { StringOrNumber } from '../../../typings';\nimport type { IBaseScale } from '@visactor/vscale';\nimport type { IGlobalScale } from '../../../scale/interface';\n\nexport type formatterCallback = (text: StringOrNumber, item: LegendItemDatum, index: number) => any;\nexport type LegendItemStyleValue<T> =\n  | T\n  | ((item: LegendItemDatum, isSelected: boolean, index: number, allItems: LegendItemDatum[]) => T);\nexport type LegendItemStyle<T> = {\n  /**\n   * 样式配置\n   */\n  style?: T;\n  /**\n   * 状态样式配置\n   */\n  state?: {\n    /**\n     * 选中态\n     */\n    selected?: T;\n    /**\n     * 非选中态\n     */\n    unSelected?: T;\n    /**\n     * 选中态 hover\n     */\n    selectedHover?: T;\n    /**\n     * 非选中态 hover\n     */\n    unSelectedHover?: T;\n  };\n};\n\nexport type IItem = {\n  /**\n   * 图例项背景配置\n   */\n  background?: {\n    /**\n     * 是否展示图例项背景\n     */\n    visible?: boolean;\n  } & LegendItemStyle<LegendItemStyleValue<NoVisibleMarkStyle<IRectMarkSpec>>>;\n  /**\n   * 图例项的 shape 图标的配置\n   */\n  shape?: {\n    /**\n     * 图例项的 shape 图标\n     */\n    visible?: boolean;\n    /** shape 同后面 label 的间距 */\n    space?: number;\n  } & LegendItemStyle<LegendItemStyleValue<Partial<NoVisibleMarkStyle<ISymbolMarkSpec>>>>;\n  /**\n   * 图例项的 label 文本配置\n   */\n  label?: {\n    /**\n     * 图例项 label 同后面 value 的间距\n     */\n    space?: number;\n    /**\n     * 格式化文本函数\n     */\n    formatMethod?: formatterCallback;\n  } & LegendItemStyle<LegendItemStyleValue<NoVisibleMarkStyle<ITextMarkSpec>>>;\n  /**\n   * 图例项 value 配置\n   */\n  value?: {\n    /** value 同后面元素的间距 */\n    space?: number;\n    /**\n     * 是否右对齐显示，仅当设置图例项宽度 itemWidth 时生效\n     * 默认为 false，\n     */\n    alignRight?: boolean;\n    /**\n     * 格式化文本函数\n     */\n    formatMethod?: formatterCallback;\n  } & LegendItemStyle<LegendItemStyleValue<NoVisibleMarkStyle<ITextMarkSpec>>>;\n  /**\n   * 聚焦按钮配置\n   */\n  focusIconStyle?: NoVisibleMarkStyle<ISymbolMarkSpec>;\n  /**\n   * 图例项的最大宽度，默认为 null。\n   * 可使用百分比，表示显示区域的宽度占比。\n   */\n  maxWidth?: number | string;\n  /**\n   * 图例项的宽度, 默认自动计算。\n   * 可使用百分比，表示显示区域的宽度占比。\n   */\n  width?: number | string;\n  /**\n   * 图例的高度，默认自动计算。\n   * 可使用百分比，表示显示区域的高度占比。\n   */\n  height?: number | string;\n} & Omit<LegendItem, 'background' | 'shape' | 'label' | 'value' | 'focusIconStyle' | 'width' | 'height' | 'maxWidth'>;\n\nexport type IPager = {\n  /**\n   * 文本样式配置\n   */\n  textStyle?: Partial<NoVisibleMarkStyle<ITextMarkSpec>>;\n  handler?: {\n    /**\n     * 按钮同文本内容区的间距，默认为 8\n     */\n    space?: number;\n    /**\n     * 上一页按钮形状\n     */\n    preShape?: string;\n    /**\n     * 下一页按钮形状\n     */\n    nextShape?: string;\n    style?: Omit<NoVisibleMarkStyle<ISymbolMarkSpec>, 'symbolType'>;\n    state?: {\n      /**\n       * hover 状态下的样式\n       */\n      hover?: Omit<NoVisibleMarkStyle<ISymbolMarkSpec>, 'symbolType'>;\n      /**\n       * 不可用状态样式\n       */\n      disable?: Omit<NoVisibleMarkStyle<ISymbolMarkSpec>, 'symbolType'>;\n    };\n  };\n} & Omit<DiscreteLegendAttrs['pager'], 'textStyle' | 'handler'>;\n\n/** spec */\nexport type IDiscreteLegendSpec = ILegendCommonSpec & {\n  type?: 'discrete';\n  /**\n   * 在原始图例绘制数据的基础上，进行自定义，比如可以自定义 value 值\n   * @param data 图例的绘制数据\n   * @param colorScale 全局颜色映射 scale\n   * @param globalScale 图表上所有的 scale\n   * @returns\n   */\n  data?: (data: LegendItemDatum[], colorScale: IBaseScale, globalScale: IGlobalScale) => LegendItemDatum[];\n\n  /** 图例项配置 */\n  item?: IItem;\n\n  /**\n   * 翻页器配置\n   */\n  pager?: IPager;\n\n  /**\n   * scaleName must match the id of the scale configured in **scales**\n   */\n  scaleName?: string;\n  /**\n   * After the legend is bound to the scale, the dimension associated with the series data and the legend can be configured through field.\n   * If the field is not configured, the first item of fields in the domain of scale is used by default\n   * If the domain of the scale is not dependent on data statistics, series.getSeriesField() is used by default\n   */\n  field?: string;\n} & Omit<DiscreteLegendAttrs, 'layout' | 'title' | 'items' | 'item' | 'pager'>;\n\n// theme 主题相关配置\nexport type IDiscreteLegendTheme = Omit<\n  IDiscreteLegendSpec,\n  'type' | 'data' | 'regionIndex' | 'regionId' | 'seriesIndex' | 'seriesId' | 'id' | 'defaultSelected'\n>;\n"]}