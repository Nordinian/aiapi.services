"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.SankeySeriesTooltipHelper = void 0;

const tooltip_helper_1 = require("../base/tooltip-helper"), vutils_1 = require("@visactor/vutils");

class SankeySeriesTooltipHelper extends tooltip_helper_1.BaseSeriesTooltipHelper {
    getDefaultTooltipPattern(activeType, dimensionInfo) {
        if ("mark" === activeType) return {
            visible: !0,
            activeType: activeType,
            title: {
                key: void 0,
                value: datum => {
                    if (datum.source) {
                        if ((0, vutils_1.isNumber)(datum.source)) {
                            const seriesKeys = this.series.getSeriesKeys();
                            return seriesKeys[datum.source] + " => " + seriesKeys[datum.target];
                        }
                        return datum.source + " => " + datum.target;
                    }
                    return datum.datum[this.series.getSpec().categoryField];
                },
                hasShape: !1
            },
            content: [ {
                key: this.contentKeyCallback,
                value: datum => datum.value,
                hasShape: !0,
                shapeType: this.contentShapeTypeCallback,
                shapeColor: this.contentShapeColorCallback,
                shapeStroke: this.contentShapeColorCallback,
                shapeHollow: !1
            } ]
        };
        if ("dimension" === activeType && dimensionInfo) {
            const title = {
                key: void 0,
                value: this._getDimensionData,
                hasShape: !1
            }, content = [];
            return dimensionInfo.forEach((({data: data}) => data.forEach((({series: series}) => {
                content.push({
                    seriesId: series.id,
                    key: this.contentKeyCallback,
                    value: this.contentValueCallback,
                    hasShape: !0,
                    shapeType: this.contentShapeTypeCallback,
                    shapeColor: this.contentShapeColorCallback,
                    shapeStroke: this.contentShapeColorCallback,
                    shapeHollow: !1
                });
            })))), {
                visible: !0,
                activeType: activeType,
                title: title,
                content: content
            };
        }
        return null;
    }
}

exports.SankeySeriesTooltipHelper = SankeySeriesTooltipHelper;
//# sourceMappingURL=tooltip-helper.js.map
