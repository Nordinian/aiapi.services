{"version":3,"sources":["../src/chart/box-plot/box-plot-transformer.ts"],"names":[],"mappings":";;;AACA,4CAA6D;AAC7D,kCAA+D;AAG/D,MAAa,2BAEX,SAAQ,yCAAgC;IAC9B,qBAAqB,CAAC,IAAO;;QACrC,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACpH,MAAM,UAAU,mCACX,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,KACpC,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,SAAS,EAAE,MAAA,IAAI,CAAC,SAAS,6CAAsB,EAC/C,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,aAAa,EAAE,IAAI,CAAC,aAAa,EACjC,aAAa,EAAE,IAAI,CAAC,aAAa,GAClC,CAAC;QACF,UAAU,CAAC,UAAU,CAAC,SAAS,eAAuB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;QAE3F,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,aAAa,CAAC,IAAO;QACnB,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,IAAI,CAAC,IAAI,GAAG;gBACV;oBACE,MAAM,EAAE,QAAQ;iBACjB;gBACD;oBACE,MAAM,EAAE,MAAM;iBACf;aACF,CAAC;SACH;QACD,IAAA,2CAAoC,EAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;CACF;AApCD,kEAoCC","file":"box-plot-transformer.js","sourcesContent":["import { Direction } from '../../typings';\nimport { CartesianChartSpecTransformer } from '../cartesian';\nimport { setDefaultCrosshairForCartesianChart } from '../util';\nimport type { IBoxPlotChartSpec } from './interface';\n\nexport class BoxPlotChartSpecTransformer<\n  T extends IBoxPlotChartSpec = IBoxPlotChartSpec\n> extends CartesianChartSpecTransformer<T> {\n  protected _getDefaultSeriesSpec(spec: T): any {\n    const dataFields = [spec.maxField, spec.medianField, spec.q1Field, spec.q3Field, spec.minField, spec.outliersField];\n    const seriesSpec = {\n      ...super._getDefaultSeriesSpec(spec),\n      boxPlot: spec.boxPlot,\n      direction: spec.direction ?? Direction.vertical,\n      minField: spec.minField,\n      maxField: spec.maxField,\n      q1Field: spec.q1Field,\n      medianField: spec.medianField,\n      q3Field: spec.q3Field,\n      outliersField: spec.outliersField,\n      outliersStyle: spec.outliersStyle\n    };\n    seriesSpec[seriesSpec.direction === Direction.vertical ? 'yField' : 'xField'] = dataFields;\n\n    return seriesSpec;\n  }\n\n  transformSpec(spec: T): void {\n    super.transformSpec(spec);\n    if (!spec.axes) {\n      spec.axes = [\n        {\n          orient: 'bottom'\n        },\n        {\n          orient: 'left'\n        }\n      ];\n    }\n    setDefaultCrosshairForCartesianChart(spec);\n  }\n}\n"]}