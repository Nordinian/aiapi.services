{"version":3,"sources":["../src/series/pie/pie.ts"],"names":[],"mappings":"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","file":"pie.js","sourcesContent":["/* eslint-disable no-duplicate-imports */\nimport { array, degreeToRadian, isValid } from '@visactor/vutils';\nimport { DataView } from '@visactor/vdataset';\nimport {\n  AttributeLevel,\n  ARC_START_ANGLE,\n  ARC_END_ANGLE,\n  ARC_RATIO,\n  ARC_MIDDLE_ANGLE,\n  ARC_RADIAN,\n  ARC_QUADRANT,\n  ARC_K,\n  PREFIX,\n  DEFAULT_LABEL_VISIBLE,\n  POLAR_START_RADIAN,\n  POLAR_END_RADIAN,\n  DEFAULT_DATA_INDEX,\n  ChartEvent,\n  DEFAULT_DATA_KEY\n} from '../../constant';\nimport type { Maybe, IPoint, Datum, StateValueType } from '../../typings';\nimport { normalizeStartEndAngle, polarToCartesian } from '../../util/math';\nimport { isSpecValueWithScale } from '../../util/scale';\nimport { field } from '../../util/object';\nimport type { IModelLayoutOption } from '../../model/interface';\nimport { PolarSeries } from '../polar/polar';\nimport type { IMark } from '../../mark/interface';\nimport { MarkTypeEnum } from '../../mark/interface/type';\nimport type { IArcMark } from '../../mark/arc';\nimport type { ITextMark } from '../../mark/text';\nimport type { IPathMark } from '../../mark/path';\nimport type { IArcSeries, SeriesMarkMap } from '../interface';\nimport { SeriesMarkNameEnum, SeriesTypeEnum } from '../interface/type';\nimport type { IPieOpt } from '../../data/transforms/pie';\n// eslint-disable-next-line no-duplicate-imports\nimport { pie } from '../../data/transforms/pie';\nimport { registerDataSetInstanceTransform } from '../../data/register';\nimport { registerPieAnimation, type IPieAnimationParams, type PieAppearPreset } from './animation/animation';\nimport { animationConfig, shouldMarkDoMorph, userAnimationConfig } from '../../animation/utils';\nimport { AnimationStateEnum } from '../../animation/interface';\nimport type { IArcLabelSpec, IBasePieSeriesSpec, IPieSeriesSpec, IPieSeriesTheme } from './interface';\nimport { SeriesData } from '../base/series-data';\nimport type { IStateAnimateSpec } from '../../animation/spec';\nimport type { IAnimationTypeConfig } from '@visactor/vgrammar-core';\nimport { centerOffsetConfig } from './animation/centerOffset';\nimport { ArcMark, registerArcMark } from '../../mark/arc';\nimport { mergeSpec } from '../../util/spec/merge-spec';\nimport { pieSeriesMark } from './constant';\nimport { Factory } from '../../core/factory';\nimport { isNil } from '@visactor/vutils';\nimport { PieSeriesSpecTransformer } from './pie-transformer';\n\nexport class BasePieSeries<T extends IBasePieSeriesSpec> extends PolarSeries<T> implements IArcSeries {\n  static readonly transformerConstructor = PieSeriesSpecTransformer as any;\n  readonly transformerConstructor = PieSeriesSpecTransformer;\n\n  protected _pieMarkName: SeriesMarkNameEnum = SeriesMarkNameEnum.pie;\n  protected _pieMarkType: MarkTypeEnum = MarkTypeEnum.arc;\n\n  static readonly mark: SeriesMarkMap = pieSeriesMark;\n\n  protected _viewDataLabel!: SeriesData;\n\n  // 饼图渲染不依赖于极坐标系轴，因此由 series 自己存储相关配置信息\n  protected _center!: IPoint | null;\n  public get center(): IPoint {\n    return {\n      x: this._spec?.centerX ?? this._region.getLayoutRect().width / 2,\n      y: this._spec?.centerY ?? this._region.getLayoutRect().height / 2\n    };\n  }\n  protected _centerOffset!: number;\n\n  protected _cornerRadius!: number;\n\n  protected _startAngle: number = POLAR_START_RADIAN;\n  protected _endAngle: number = POLAR_END_RADIAN;\n  protected _padAngle!: number;\n\n  protected _pieMark: IArcMark | null = null;\n  protected _labelMark: ITextMark | null = null;\n  protected _labelLineMark: IPathMark | null = null;\n\n  protected _buildMarkAttributeContext() {\n    super._buildMarkAttributeContext();\n    // center\n    this._markAttributeContext.getCenter = () => {\n      return {\n        x: () => this._center?.x ?? this._region.getLayoutRect().width / 2,\n        y: () => this._center?.y ?? this._region.getLayoutRect().height / 2\n      };\n    };\n\n    // angle scale\n    this._markAttributeContext.startAngleScale = (datum: Datum) => this.startAngleScale(datum);\n    this._markAttributeContext.endAngleScale = (datum: Datum) => this.endAngleScale(datum);\n  }\n\n  setAttrFromSpec(): void {\n    super.setAttrFromSpec();\n    this._centerOffset = this._spec.centerOffset ?? 0;\n    this._cornerRadius = this._spec.cornerRadius ?? 0;\n\n    const normalized = normalizeStartEndAngle(\n      isValid(this._spec.startAngle) ? degreeToRadian(this._spec.startAngle) : this._startAngle,\n      isValid(this._spec.endAngle) ? degreeToRadian(this._spec.endAngle) : this._endAngle\n    );\n    this._startAngle = normalized.startAngle;\n    this._endAngle = normalized.endAngle;\n    this._padAngle = isValid(this._spec.padAngle) ? degreeToRadian(this._spec.padAngle) : 0;\n\n    // 值信息给角度，angleField 是为了兼容小组件用法，因为 spec 改造前已经开放了\n    this.setAngleField(this._spec.valueField || this._spec.angleField);\n    if (this._spec.categoryField) {\n      this.setSeriesField(this._spec.categoryField);\n    }\n    this._radiusField = [];\n\n    this._specAngleField = this._angleField.slice();\n    this._specRadiusField = [];\n  }\n\n  initData() {\n    super.initData();\n\n    const viewData = this.getViewData();\n    if (!viewData) {\n      return;\n    }\n\n    registerDataSetInstanceTransform(this._dataSet, 'pie', pie);\n\n    viewData.transform(\n      {\n        type: 'pie',\n        options: {\n          angleField: this._angleField[0],\n          startAngle: this._startAngle,\n          endAngle: this._endAngle,\n          minAngle: isValid(this._spec.minAngle) ? degreeToRadian(this._spec.minAngle) : 0,\n          asStartAngle: ARC_START_ANGLE,\n          asEndAngle: ARC_END_ANGLE,\n          asRatio: ARC_RATIO,\n          asMiddleAngle: ARC_MIDDLE_ANGLE,\n          asRadian: ARC_RADIAN,\n          asQuadrant: ARC_QUADRANT,\n          asK: ARC_K\n        } as IPieOpt\n      },\n      false\n    );\n\n    const viewDataLabel = new DataView(this._dataSet, { name: `${PREFIX}_series_${this.id}_viewDataLabel` });\n    viewDataLabel.parse([this.getViewData()], {\n      type: 'dataview'\n    });\n\n    this._viewDataLabel = new SeriesData(this._option, viewDataLabel);\n  }\n\n  initMark(): void {\n    this._pieMark = this._createMark(\n      {\n        ...BasePieSeries.mark.pie,\n        name: this._pieMarkName,\n        type: this._pieMarkType\n      },\n      {\n        morph: shouldMarkDoMorph(this._spec, this._pieMarkName),\n        defaultMorphElementKey: this._seriesField,\n        key: DEFAULT_DATA_KEY,\n        groupKey: this._seriesField,\n        skipBeforeLayouted: true,\n        isSeriesMark: true,\n        customShape: this._spec.pie?.customShape\n      }\n    ) as IArcMark;\n  }\n\n  private startAngleScale(datum: Datum) {\n    return field(ARC_START_ANGLE)(datum);\n  }\n\n  private endAngleScale(datum: Datum) {\n    return field(ARC_END_ANGLE)(datum);\n  }\n\n  initMarkStyle(): void {\n    const pieMark = this._pieMark;\n    if (pieMark) {\n      this.setMarkStyle(\n        pieMark,\n        {\n          x: () => this._center?.x ?? this._region.getLayoutRect().width / 2,\n          y: () => this._center?.y ?? this._region.getLayoutRect().height / 2,\n          fill: this.getColorAttribute(),\n          outerRadius: isSpecValueWithScale(this._outerRadius)\n            ? this._outerRadius\n            : () => this.computeLayoutRadius() * this._outerRadius,\n          innerRadius: isSpecValueWithScale(this._innerRadius)\n            ? this._innerRadius\n            : () => this.computeLayoutRadius() * this._innerRadius,\n          cornerRadius: () => this.computeLayoutRadius() * this._cornerRadius,\n          startAngle: datum => this.startAngleScale(datum),\n          endAngle: datum => this.endAngleScale(datum),\n          padAngle: this._padAngle,\n          centerOffset: this._centerOffset\n        },\n        'normal',\n        AttributeLevel.Series\n      );\n\n      this._trigger.registerMark(pieMark);\n    }\n  }\n\n  protected initTooltip() {\n    super.initTooltip();\n\n    this._pieMark && this._tooltipHelper.activeTriggerSet.mark.add(this._pieMark);\n  }\n\n  initMarkStyleWithSpec(mark?: IMark, spec?: any, key?: string): void {\n    super.initMarkStyleWithSpec(mark, spec, key);\n    if (mark.name === this._pieMarkName) {\n      // radius 配置需要额外处理比例值\n      const pieSpec = this.getSpec()[mark.name];\n      if (pieSpec) {\n        for (const state in pieSpec.state || {}) {\n          this.setMarkStyle(mark, this.generateRadiusStyle(pieSpec.state[state]), state, AttributeLevel.User_Mark);\n        }\n      }\n    }\n  }\n\n  initLabelMarkStyle(textMark: ITextMark) {\n    if (!textMark) {\n      return;\n    }\n    this.setMarkStyle(textMark, {\n      visible: field(DEFAULT_LABEL_VISIBLE).bind(this),\n      text: (datum: Datum) => {\n        return datum[this.getDimensionField()[0]];\n      },\n      fill: this._spec.label?.style?.fill || this.getColorAttribute(),\n      angle: this._spec.label?.style?.angle,\n      limit: this._spec.label?.style?.limit,\n      z: this.dataToPositionZ.bind(this)\n    });\n  }\n\n  afterInitMark(): void {\n    super.afterInitMark();\n    this._trigger.setStateKeys([this._seriesField as string, ...this._radiusField]);\n  }\n\n  initEvent(): void {\n    super.initEvent();\n    this._viewDataLabel.getDataView()?.target.addListener('change', this.viewDataLabelUpdate.bind(this));\n  }\n\n  // 饼图不支持分组\n  initGroups() {\n    return;\n  }\n\n  /**\n   * @override\n   * @param ctx\n   */\n  onLayoutEnd(ctx: IModelLayoutOption): void {\n    this._viewDataLabel.getDataView().reRunAllTransform();\n    this.onMarkPositionUpdate();\n    super.onLayoutEnd(ctx);\n  }\n\n  getDimensionField(): string[] {\n    return this._seriesField ? [this._seriesField] : [];\n  }\n  getMeasureField(): string[] {\n    return this._specAngleField;\n  }\n\n  private viewDataLabelUpdate() {\n    this.event.emit(ChartEvent.viewDataLabelUpdate, { model: this });\n    this._viewDataLabel.updateData();\n  }\n\n  protected generateRadiusStyle(spec: any) {\n    if (!spec) {\n      return;\n    }\n    const style: any = {};\n    spec.outerRadius && (style.outerRadius = () => this.computeLayoutRadius() * spec.outerRadius);\n    spec.innerRadius && (style.innerRadius = () => this.computeLayoutRadius() * spec.innerRadius);\n    spec.cornerRadius && (style.cornerRadius = () => this.computeLayoutRadius() * spec.cornerRadius);\n    return style;\n  }\n\n  protected computeLayoutRadius() {\n    const { width, height } = this._region.getLayoutRect();\n    return Math.min(width / 2, height / 2);\n  }\n\n  computeCenter(datum: Datum): IPoint {\n    return {\n      x: this._pieMark.getAttribute('x', datum, 'normal') as number,\n      y: this._pieMark.getAttribute('y', datum, 'normal') as number\n    };\n  }\n\n  getRadius(state: StateValueType = 'normal'): number {\n    const styleRadius =\n      state === 'normal'\n        ? this.getSpec()[this._pieMark?.name || 'pie']?.style?.outerRadius\n        : this.getSpec()[this._pieMark?.name || 'pie']?.state?.[state]?.outerRadius;\n    return styleRadius ?? this._outerRadius;\n  }\n\n  getInnerRadius(state: StateValueType = 'normal'): number {\n    const styleRadius =\n      state === 'normal'\n        ? this.getSpec()[this._pieMark?.name || 'pie']?.style?.innerRadius\n        : this.getSpec()[this._pieMark?.name || 'pie']?.state?.[state]?.innerRadius;\n    return styleRadius ?? this._innerRadius;\n  }\n\n  computeRadius(r: number, k?: number): number {\n    return this.computeLayoutRadius() * r * (isNil(k) ? 1 : k) + this._centerOffset;\n  }\n\n  computeDatumRadius(datum: Datum, state?: string): number {\n    return this.computeLayoutRadius() * this.getRadius(state) + this._centerOffset;\n  }\n\n  _compareSpec(spec: T, prevSpec: T, ignoreCheckKeys?: { [key: string]: true }) {\n    ignoreCheckKeys = ignoreCheckKeys ?? { data: true };\n    ignoreCheckKeys.centerX = true;\n    ignoreCheckKeys.centerX = true;\n    ignoreCheckKeys.centerY = true;\n    ignoreCheckKeys.centerOffset = true;\n    ignoreCheckKeys.radius = true;\n    ignoreCheckKeys.innerRadius = true;\n    ignoreCheckKeys.cornerRadius = true;\n    ignoreCheckKeys.startAngle = true;\n    ignoreCheckKeys.endAngle = true;\n    ignoreCheckKeys.padAngle = true;\n    const { centerX, centerY, centerOffset, radius, innerRadius, cornerRadius, startAngle, endAngle, padAngle } =\n      prevSpec;\n    const result = super._compareSpec(spec, prevSpec, ignoreCheckKeys);\n    spec = spec ?? ({} as T);\n    if (\n      spec.centerY !== centerY ||\n      spec.centerX !== centerX ||\n      spec.centerOffset !== centerOffset ||\n      spec.radius !== radius ||\n      spec.innerRadius !== innerRadius ||\n      spec.cornerRadius !== cornerRadius ||\n      spec.startAngle !== startAngle ||\n      spec.endAngle !== endAngle ||\n      spec.padAngle !== padAngle\n    ) {\n      result.reRender = true;\n      result.change = true;\n    }\n    return result;\n  }\n\n  computeDatumInnerRadius(datum: Datum, state?: string): number {\n    return this.computeLayoutRadius() * this.getInnerRadius(state) + this._centerOffset;\n  }\n\n  dataToPosition(datum: Datum): IPoint | null {\n    const angle = datum[ARC_MIDDLE_ANGLE];\n    if (isNil(angle)) {\n      return null;\n    }\n    const radius = this.computeDatumRadius(datum);\n    const center = this.computeCenter(datum);\n    const delta = polarToCartesian({ angle, radius });\n    return { x: center.x + delta.x, y: center.y + delta.y };\n  }\n\n  dataToCentralPosition = (datum: Datum): IPoint | null => {\n    // 和 PieSeries.dataToPosition 实现不同，这里考虑了美观性，返回的位置是曲边梯形的中心\n    const angle = datum[ARC_MIDDLE_ANGLE];\n    if (isNil(angle)) {\n      return null;\n    }\n    const radius = this.computeDatumRadius(datum);\n    const innerRadius = this.computeDatumInnerRadius(datum);\n    const center = this.computeCenter(datum);\n    const delta = polarToCartesian({ angle, radius: (radius + innerRadius) / 2 });\n    return { x: center.x + delta.x, y: center.y + delta.y };\n  };\n\n  initAnimation() {\n    const animationParams: IPieAnimationParams = {\n      growFrom: (datum, element, state) => {\n        if (state === AnimationStateEnum.appear) {\n          return this._startAngle;\n        }\n        if (state === AnimationStateEnum.disappear) {\n          return this._endAngle;\n        }\n\n        const outState = [AnimationStateEnum.disappear, AnimationStateEnum.exit];\n        const markElements = element.mark.elements;\n\n        const data = datum;\n        const dataIndex = data?.[DEFAULT_DATA_INDEX];\n\n        // 当前 mark 在上个状态是否处于第一个\n        if (markElements.find(e => e.data[0]?.[DEFAULT_DATA_INDEX] < dataIndex) === undefined) {\n          return this._startAngle;\n        }\n        // 当前 mark 在上个状态是否处于最后一个\n        if (markElements.find(e => e.data[0]?.[DEFAULT_DATA_INDEX] > dataIndex) === undefined) {\n          return this._endAngle;\n        }\n\n        // 扇形不在边缘时，获取扇形生长点：获取相邻状态下相邻扇形的边缘\n        const prevMarkElement = [...markElements].reverse().find(e => e.data[0]?.[DEFAULT_DATA_INDEX] < dataIndex);\n\n        if (outState.includes(state)) {\n          return prevMarkElement?.getNextGraphicAttributes()?.endAngle;\n        }\n        return prevMarkElement?.getGraphicAttribute('endAngle', true);\n      }\n    };\n    const appearPreset = (this._spec.animationAppear as IStateAnimateSpec<PieAppearPreset>)?.preset;\n\n    if (this._pieMark) {\n      const pieAnimationConfig = animationConfig(\n        Factory.getAnimationInKey('pie')?.(animationParams, appearPreset),\n        userAnimationConfig(SeriesMarkNameEnum.pie, this._spec, this._markAttributeContext)\n      );\n\n      if (pieAnimationConfig.normal && (pieAnimationConfig.normal as IAnimationTypeConfig).type) {\n        pieAnimationConfig.normal = centerOffsetConfig(\n          this._pieMark,\n          pieAnimationConfig.normal as IAnimationTypeConfig\n        );\n      }\n\n      this._pieMark.setAnimationConfig(pieAnimationConfig);\n    }\n  }\n\n  getDefaultShapeType() {\n    return 'circle';\n  }\n\n  getGroupFields(): string[] {\n    // do nothing\n    return [];\n  }\n\n  getStackGroupFields(): string[] {\n    // do nothing\n    return [];\n  }\n\n  getStackValueField(): string {\n    // do nothing\n    return '';\n  }\n\n  // make sure this function fast\n  protected _noAnimationDataKey(datum: Datum, index: number) {\n    return index;\n  }\n\n  getActiveMarks(): IMark[] {\n    return [this._pieMark];\n  }\n}\n\nexport class PieSeries<T extends IPieSeriesSpec = IPieSeriesSpec> extends BasePieSeries<T> implements IArcSeries {\n  static readonly type: string = SeriesTypeEnum.pie;\n  type = SeriesTypeEnum.pie;\n}\n\nexport const registerPieSeries = () => {\n  registerArcMark();\n  registerPieAnimation();\n  Factory.registerSeries(PieSeries.type, PieSeries);\n};\n"]}