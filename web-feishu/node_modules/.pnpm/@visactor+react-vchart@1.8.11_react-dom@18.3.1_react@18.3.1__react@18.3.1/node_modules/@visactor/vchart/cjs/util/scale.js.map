{"version":3,"sources":["../src/util/scale.ts"],"names":[],"mappings":";;;AAGA,6CAAqD;AAGrD,6CAAqH;AAErH,sEAAiE;AAEjE,MAAM,eAAe,GAAG;IACtB,MAAM,EAAE,oBAAW;IACnB,IAAI,EAAE,kBAAS;IACf,KAAK,EAAE,mBAAU;IACjB,OAAO,EAAE,qBAAY;IACrB,SAAS,EAAE,uBAAc;IACzB,YAAY,EAAE,uCAAiB;CAChC,CAAC;AAEF,SAAgB,WAAW,CAAC,IAAkC;IAC5D,MAAM,gBAAgB,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC;IAC/C,IAAI,gBAAgB,EAAE;QACpB,OAAO,IAAI,gBAAgB,EAAE,CAAC;KAC/B;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAPD,kCAOC;AAED,SAAgB,mBAAmB,CACjC,IAAkB,EAClB,OAGC;IAED,IAAI,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;QACjC,IAAI,IAAA,iBAAQ,EAAC,IAAI,CAAC,KAAK,CAAC,KAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CAAA,EAAE;YAChD,OAAO,OAAO,CAAC,WAAW,CAAC,0BAA0B,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;SAC/E;QACD,OAAO,IAAI,CAAC,KAA8B,CAAC;KAC5C;IACD,MAAM,KAAK,GAAG,WAAW,CAAE,IAAkC,CAAC,IAAI,CAAC,CAAC;IACpE,IAAI,KAAK,EAAE;QACT,iBAAiB,CAAC,KAAK,EAAE,IAAiC,CAAC,CAAC;KAC7D;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAlBD,kDAkBC;AAGD,SAAS,iBAAiB,CAAC,KAAiB,EAAE,IAA+B;IAC3E,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,EAAE;QACnB,OAAO;KACR;IAED,IAAI,IAAI,CAAC,MAAM,EAAE;QACf,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC3B;IAED,IAAI,IAAI,CAAC,KAAK,EAAE;QACd,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACzB;IAED,IAAI,IAAI,CAAC,SAAS,IAAmB,KAAM,CAAC,SAAS,EAAE;QACtC,KAAM,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACjD;AACH,CAAC;AAED,SAAgB,iBAAiB,CAAC,CAAS,EAAE,CAAc;IACzD,IAAI,CAAC,CAAC,EAAE;QACN,OAAO,CAAC,CAAC;KACV;IACD,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;IACxB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IACxD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IACxD,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AACzC,CAAC;AARD,8CAQC;AAED,SAAgB,oBAAoB,CAAC,SAAc;IACjD,OAAO,IAAA,gBAAO,EAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CAAC,IAAI,IAAA,gBAAO,EAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CAAC,CAAC;AAChE,CAAC;AAFD,oDAEC","file":"scale.js","sourcesContent":["/**\n * @description Scale 相关的工具函数\n */\nimport { isString, isValid } from '@visactor/vutils';\nimport type { DataView } from '@visactor/vdataset';\nimport type { IGlobalScale } from '../scale/interface';\nimport { type IBaseScale, BandScale, LinearScale, OrdinalScale, PointScale, ThresholdScale } from '@visactor/vscale';\nimport type { IVisual, IVisualSpecBase } from '../typings/visual';\nimport { ColorOrdinalScale } from '../scale/color-ordinal-scale';\n\nconst defaultScaleMap = {\n  linear: LinearScale,\n  band: BandScale,\n  point: PointScale,\n  ordinal: OrdinalScale,\n  threshold: ThresholdScale,\n  colorOrdinal: ColorOrdinalScale\n};\n\nexport function createScale(type: keyof typeof defaultScaleMap): IBaseScale | null {\n  const scaleConstructor = defaultScaleMap[type];\n  if (scaleConstructor) {\n    return new scaleConstructor();\n  }\n\n  return null;\n}\n\nexport function createScaleWithSpec(\n  spec: IVisual<any>,\n  context: {\n    globalScale: IGlobalScale;\n    seriesId: number;\n  }\n): IBaseScale | null {\n  if ('scale' in spec && spec.scale) {\n    if (isString(spec.scale) && context?.globalScale) {\n      return context.globalScale.registerMarkAttributeScale(spec, context.seriesId);\n    }\n    return spec.scale as unknown as IBaseScale;\n  }\n  const scale = createScale((spec as IVisualSpecBase<any, any>).type);\n  if (scale) {\n    initScaleWithSpec(scale, spec as IVisualSpecBase<any, any>);\n  }\n  return scale;\n}\n\n// 需要一个通用的从spec初始化scale的方法，避免在scale属性更新后需要维护多组逻辑\nfunction initScaleWithSpec(scale: IBaseScale, spec: IVisualSpecBase<any, any>) {\n  if (!scale || !spec) {\n    return;\n  }\n\n  if (spec.domain) {\n    scale.domain(spec.domain);\n  }\n\n  if (spec.range) {\n    scale.range(spec.range);\n  }\n\n  if (spec.specified && (<OrdinalScale>scale).specified) {\n    (<OrdinalScale>scale).specified(spec.specified);\n  }\n}\n\nexport function valueInScaleRange(v: number, s?: IBaseScale) {\n  if (!s) {\n    return v;\n  }\n  const range = s.range();\n  const min = Math.min(range[0], range[range.length - 1]);\n  const max = Math.max(range[0], range[range.length - 1]);\n  return Math.min(Math.max(min, v), max);\n}\n\nexport function isSpecValueWithScale(specValue: any) {\n  return isValid(specValue?.field) && isValid(specValue?.scale);\n}\n"]}