import { GrammarMarkType } from "../graph/enums";

import { Mark } from "../view/mark";

import { createGraphicItem } from "../graph/util/graphic";

import { transformsByType } from "../graph/attributes/transform";

export class Text extends Mark {
    addGraphicItem(initAttrs, groupKey) {
        const textConfig = null == initAttrs ? void 0 : initAttrs.text, isRich = "rich" === (null == textConfig ? void 0 : textConfig.type), graphicItem = createGraphicItem(this, isRich ? GrammarMarkType.richtext : GrammarMarkType.text, initAttrs);
        return isRich && (initAttrs.textConfig = []), super.addGraphicItem(initAttrs, groupKey, graphicItem);
    }
    getAttributeTransforms() {
        var _a;
        return "richtext" === (null === (_a = this.getGroupGraphicItem()) || void 0 === _a ? void 0 : _a.type) ? transformsByType.richtext : transformsByType.text;
    }
    release() {
        super.release();
    }
}

Text.markType = GrammarMarkType.text;
//# sourceMappingURL=text.js.map
