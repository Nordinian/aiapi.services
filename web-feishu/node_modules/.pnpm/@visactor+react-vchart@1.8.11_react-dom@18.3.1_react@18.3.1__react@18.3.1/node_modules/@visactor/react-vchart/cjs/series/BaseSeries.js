"use strict";

var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.createSeries = void 0;

const react_1 = __importDefault(require("react")), vutils_1 = require("@visactor/vutils"), chart_1 = __importDefault(require("../context/chart")), eventsUtils_1 = require("../eventsUtils"), util_1 = require("../util"), createSeries = (componentName, markNames, type) => {
    const notSpecKeys = eventsUtils_1.COMMON_EVENTK_KEYS.concat([ "id", "updateId" ]), Comp = props => {
        const context = react_1.default.useContext(chart_1.default), id = react_1.default.useRef((0, 
        vutils_1.isNil)(props.id) ? (0, util_1.uid)(null != type ? type : "series") : props.id), seriesSpec = react_1.default.useRef(), bindedEvents = react_1.default.useRef({}), updateId = react_1.default.useRef(props.updateId), handleEvent = e => {
            const markIds = markNames.map((markName => `${id.current}-${markName}`));
            (null == e ? void 0 : e.mark) && markIds.includes(e.mark.getUserId()) && props[eventsUtils_1.VCHART_TO_REACT_EVENTS[e.event.type]](e);
        }, addMarkEvent = events => {
            events && context.chart && (bindedEvents && Object.keys(bindedEvents).forEach((eventKey => {
                events[eventKey] || context.chart.off(eventsUtils_1.REACT_TO_VCHART_EVENTS[eventKey], handleEvent), 
                bindedEvents.current[eventKey] = !1;
            })), Object.keys(events).forEach((eventKey => {
                (null == bindedEvents ? void 0 : bindedEvents[eventKey]) || (context.chart.on(eventsUtils_1.REACT_TO_VCHART_EVENTS[eventKey], handleEvent), 
                bindedEvents || (bindedEvents.current = {}), bindedEvents.current[eventKey] = !0);
            })));
        }, addMarkId = spec => {
            markNames.forEach((markName => {
                const defaultMarkId = `${id.current}-${markName}`;
                (0, vutils_1.isNil)(spec[markName]) ? spec[markName] = {
                    id: defaultMarkId
                } : (0, vutils_1.isNil)(spec[markName].id) && (spec[markName].id = defaultMarkId);
            }));
        }, insertToContext = props => {
            if (context.specFromChildren) {
                context.specFromChildren.series || (context.specFromChildren.series = []);
                const spec = (0, vutils_1.isNil)(type) ? Object.assign(Object.assign({}, props), {
                    id: id.current
                }) : Object.assign(Object.assign({}, props), {
                    id: id.current,
                    type: type
                });
                addMarkId(spec), context.specFromChildren.series.push(spec), context.isChildrenUpdated = !0;
            }
        };
        if (addMarkEvent((0, eventsUtils_1.findEventProps)(props)), props.updateId !== updateId.current) updateId.current = props.updateId; else {
            const newSeriesSpec = (0, vutils_1.pickWithout)(props, notSpecKeys);
            addMarkId(newSeriesSpec), (0, vutils_1.isEqual)(newSeriesSpec, seriesSpec.current) || (seriesSpec.current = newSeriesSpec, 
            (props => {
                if (!context.specFromChildren) return;
                if (!context.specFromChildren.series) return void insertToContext(props);
                const series = context.specFromChildren.series, index = series.findIndex((entry => entry.id === id.current));
                index >= 0 ? (series[index] = (0, vutils_1.isNil)(type) ? Object.assign(Object.assign({}, props), {
                    id: id.current
                }) : Object.assign(Object.assign({}, props), {
                    id: id.current,
                    type: type
                }), addMarkId(series[index])) : insertToContext(props), context.isChildrenUpdated = !0;
            })(newSeriesSpec));
        }
        return react_1.default.useEffect((() => () => {
            (() => {
                var _a;
                if (!context.specFromChildren) return;
                const series = null !== (_a = context.specFromChildren.series) && void 0 !== _a ? _a : [], index = series.findIndex((entry => entry.id === id.current));
                if (index >= 0) {
                    const newSeries = series.slice(0, index - 1).concat(series.slice(index + 1));
                    context.specFromChildren.series = newSeries, context.isChildrenUpdated = !0;
                }
            })(), addMarkEvent({});
        }), []), null;
    };
    return Comp.displayName = componentName, Comp;
};

exports.createSeries = createSeries;
//# sourceMappingURL=BaseSeries.js.map