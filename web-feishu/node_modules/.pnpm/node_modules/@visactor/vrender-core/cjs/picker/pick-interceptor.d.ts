import type { IMatrix, IPointLike } from '@visactor/vutils';
import type { IContext2d, IGraphic, IPickItemInterceptorContribution, IPickParams, IPickerService, PickResult } from '../interface';
export declare const PickItemInterceptor: unique symbol;
export declare class ShadowRootPickItemInterceptorContribution implements IPickItemInterceptorContribution {
    order: number;
    afterPickItem(graphic: IGraphic, pickerService: IPickerService, point: IPointLike, pickParams: IPickParams, params?: {
        parentMatrix: IMatrix;
    }): null | PickResult;
    beforePickItem(graphic: IGraphic, pickerService: IPickerService, point: IPointLike, pickParams: IPickParams, params?: {
        parentMatrix: IMatrix;
    }): null | PickResult;
    protected _pickItem(graphic: IGraphic, pickerService: IPickerService, point: IPointLike, pickParams: IPickParams, params?: {
        parentMatrix: IMatrix;
    }): PickResult | null;
}
export declare class InteractivePickItemInterceptorContribution implements IPickItemInterceptorContribution {
    order: number;
    beforePickItem(graphic: IGraphic, pickerService: IPickerService, point: IPointLike, pickParams: IPickParams, params?: {
        parentMatrix: IMatrix;
    }): null | PickResult;
}
export declare class Canvas3DPickItemInterceptor implements IPickItemInterceptorContribution {
    order: number;
    beforePickItem(graphic: IGraphic, pickerService: IPickerService, point: IPointLike, pickParams: IPickParams, params?: {
        parentMatrix: IMatrix;
    }): PickResult;
    initCanvasCtx(context: IContext2d): void;
}
