{"version":3,"sources":["../src/allocator/point-allocate.ts"],"names":[],"mappings":"","file":"point-allocate.js","sourcesContent":["// import { Point, IPoint, IPointLike } from '@visactor/vutils';\n// import { IAllocate } from './interface';\n// import { Disposable } from '../interface';\n\n// export const PointLikeAllocate = Symbol.for('PointLikeAllocate');\n\n// export type IPointLikeAllocate = IAllocate<IPointLike>;\n\n// @injectable()\n// export class DefaultPointLikeAllocate implements IAllocate<IPointLike>, Disposable {\n//   protected pools: IPointLike[] = [];\n//   allocate(x: number, y: number): IPointLike {\n//     if (!this.pools.length) {\n//       return { x, y };\n//     }\n//     const p = this.pools.pop() as any;\n//     p.x = x;\n//     p.y = y;\n//     return p;\n//   }\n//   free(d: IPointLike) {\n//     this.pools.push(d);\n//   }\n//   get length(): number {\n//     return this.pools.length;\n//   }\n//   dispose(...params: any): void {\n//     this.pools = [];\n//   }\n// }\n\n// export const PointAllocate = Symbol.for('PointAllocate');\n\n// export type IPointAllocate = IAllocate<IPoint>;\n\n// @injectable()\n// export class DefaultPointAllocate implements IAllocate<IPoint>, Disposable {\n//   protected pools: IPoint[] = [];\n//   allocate(x: number, y: number): IPoint {\n//     if (!this.pools.length) {\n//       return new Point(x, y);\n//     }\n//     const p = this.pools.pop() as any;\n//     p.x = x;\n//     p.y = y;\n//     return p;\n//   }\n//   free(d: IPoint) {\n//     this.pools.push(d);\n//   }\n//   get length(): number {\n//     return this.pools.length;\n//   }\n//   dispose(...params: any): void {\n//     this.pools = [];\n//   }\n// }\n"]}