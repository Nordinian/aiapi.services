"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.ElementHighlightByKey = void 0;

const vutils_1 = require("@visactor/vutils"), base_1 = require("./base"), enums_1 = require("../graph/enums");

class ElementHighlightByKey extends base_1.BaseInteraction {
    constructor(view, options) {
        super(view, options), this.type = ElementHighlightByKey.type, this.handleStart = e => {
            if (e.element && this._marks && this._marks.includes(e.element.mark)) {
                const highlightKey = e.element.key;
                if ((0, vutils_1.isNil)(highlightKey)) return;
                this._marks.forEach((mark => {
                    mark.elements.forEach((el => {
                        el.key === highlightKey ? (el.removeState(this.options.blurState), el.addState(this.options.highlightState)) : (el.removeState(this.options.highlightState), 
                        el.addState(this.options.blurState));
                    }));
                }));
            }
        }, this.handleReset = e => {
            e.element && this._marks && this._marks.includes(e.element.mark) && this.clearPrevElements();
        }, this.options = Object.assign({}, ElementHighlightByKey.defaultOptions, options), 
        this._marks = view.getMarksBySelector(this.options.selector);
    }
    getEvents() {
        return [ {
            type: this.options.trigger,
            handler: this.handleStart
        }, {
            type: this.options.resetTrigger,
            handler: this.handleReset
        } ];
    }
    clearPrevElements() {
        this._marks.forEach((mark => {
            mark.elements.forEach((el => {
                el.removeState(this.options.highlightState), el.removeState(this.options.blurState);
            }));
        }));
    }
}

exports.ElementHighlightByKey = ElementHighlightByKey, ElementHighlightByKey.type = "element-highlight-by-key", 
ElementHighlightByKey.defaultOptions = {
    highlightState: enums_1.InteractionStateEnum.highlight,
    blurState: enums_1.InteractionStateEnum.blur,
    trigger: "pointerover",
    resetTrigger: "pointerout"
};
//# sourceMappingURL=element-highlight-by-key.js.map