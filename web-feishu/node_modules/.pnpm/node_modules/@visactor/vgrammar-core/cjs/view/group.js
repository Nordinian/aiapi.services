"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.GroupMark = void 0;

const attributes_1 = require("../graph/attributes"), constants_1 = require("../graph/constants"), enums_1 = require("../graph/enums"), element_1 = require("../graph/util/element"), graphic_1 = require("../graph/util/graphic"), mark_1 = require("./mark");

class GroupMark extends mark_1.Mark {
    constructor(view, group) {
        super(view, enums_1.GrammarMarkType.group, group), this.children = [];
    }
    parseRenderContext() {
        return {
            large: !1
        };
    }
    appendChild(mark) {
        return this.children.push(mark), this;
    }
    removeChild(mark) {
        return this.children = this.children.filter((child => child !== mark)), this;
    }
    includesChild(mark, descendant = !0) {
        return !!this.children.includes(mark) || !!descendant && this.children.some((child => child.markType === enums_1.GrammarMarkType.group && child.includesChild(mark, !0)));
    }
    updateLayoutChildren() {
        return this.children.length ? (this.layoutChildren || (this.layoutChildren = []), 
        this.layoutChildren = this.children.filter((child => child.needLayout())), this) : this;
    }
    getAttributeTransforms() {
        return attributes_1.transformsByType.rect;
    }
    evaluateJoin(data) {
        if (!this.elements.length) {
            const el = (0, element_1.createElement)(this);
            el.updateData(constants_1.DefaultKey, constants_1.DefaultMarkData, (() => ""), this.view), 
            this.elements = [ el ], this.elementMap.set(constants_1.DefaultKey, el);
        }
    }
    addGraphicItem(attrs, groupKey, newGraphicItem) {
        const graphicItem = null != newGraphicItem ? newGraphicItem : (0, graphic_1.createGraphicItem)(this, this.markType, attrs);
        if (graphicItem) return this.emit(enums_1.HOOK_EVENT.BEFORE_ADD_VRENDER_MARK), graphicItem.name = `${this.id() || this.markType}`, 
        this.graphicParent.insertIntoKeepIdx(graphicItem, this.graphicIndex), this.emit(enums_1.HOOK_EVENT.AFTER_ADD_VRENDER_MARK), 
        graphicItem;
    }
}

exports.GroupMark = GroupMark;
//# sourceMappingURL=group.js.map
