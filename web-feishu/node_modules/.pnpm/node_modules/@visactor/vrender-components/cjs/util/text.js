"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.measureTextSize = exports.initTextMeasure = void 0;

const vrender_core_1 = require("@visactor/vrender-core"), vutils_1 = require("@visactor/vutils"), constant_1 = require("../constant"), initTextMeasure = (textSpec, option, useNaiveCanvas) => new vutils_1.TextMeasure(Object.assign({
    defaultFontParams: {
        fontFamily: constant_1.DEFAULT_TEXT_FONT_FAMILY,
        fontSize: constant_1.DEFAULT_TEXT_FONT_SIZE
    },
    getTextBounds: useNaiveCanvas ? void 0 : vrender_core_1.getTextBounds,
    specialCharSet: "-/: .,@%'\"~" + vutils_1.TextMeasure.ALPHABET_CHAR_SET + vutils_1.TextMeasure.ALPHABET_CHAR_SET.toUpperCase()
}, null != option ? option : {}), textSpec);

function measureTextSize(text, textSpec, fontFamily = constant_1.DEFAULT_TEXT_FONT_FAMILY) {
    var _a, _b;
    if (!text) return {
        width: 0,
        height: 0
    };
    const bounds = (0, vrender_core_1.getTextBounds)({
        text: text,
        fontFamily: null !== (_a = textSpec.fontFamily) && void 0 !== _a ? _a : fontFamily,
        fontSize: textSpec.fontSize || 12,
        fontWeight: textSpec.fontWeight,
        textAlign: null !== (_b = textSpec.textAlign) && void 0 !== _b ? _b : "center",
        textBaseline: textSpec.textBaseline,
        ellipsis: !!textSpec.ellipsis,
        maxLineWidth: textSpec.maxLineWidth || 1 / 0,
        lineHeight: textSpec.fontSize || 12
    });
    return {
        width: bounds.width(),
        height: bounds.height()
    };
}

exports.initTextMeasure = initTextMeasure, exports.measureTextSize = measureTextSize;
//# sourceMappingURL=text.js.map
