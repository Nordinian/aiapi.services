{"version":3,"sources":["../src/util/text.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAGvD,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,wBAAwB,EAAE,sBAAsB,EAAE,MAAM,aAAa,CAAC;AAE/E,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,QAAyC,EACzC,MAAoC,EACpC,cAAwB,EACY,EAAE;IACtC,OAAO,IAAI,WAAW,iBAElB,iBAAiB,EAAE;YACjB,UAAU,EAAE,wBAAwB;YACpC,QAAQ,EAAE,sBAAsB;SACjC,EACD,aAAa,EAAE,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa,EACzD,cAAc,EAAE,cAAc,GAAG,WAAW,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CAAC,WAAW,EAAE,IACzG,CAAC,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,EAAE,CAAC,GAEnB,QAAQ,CACT,CAAC;AACJ,CAAC,CAAC;AAGF,MAAM,UAAU,eAAe,CAC7B,IAA2C,EAC3C,QAAwC,EACxC,aAAqB,wBAAwB;;IAE7C,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;KAChC;IACD,MAAM,MAAM,GAAG,aAAa,CAAC;QAC3B,IAAI;QACJ,UAAU,EAAE,MAAA,QAAQ,CAAC,UAAU,mCAAI,UAAU;QAC7C,QAAQ,EAAE,QAAQ,CAAC,QAAQ,IAAI,EAAE;QACjC,UAAU,EAAE,QAAQ,CAAC,UAAiB;QACtC,SAAS,EAAE,MAAA,QAAQ,CAAC,SAAS,mCAAI,QAAQ;QACzC,YAAY,EAAE,QAAQ,CAAC,YAAY;QACnC,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ;QAC7B,YAAY,EAAE,QAAQ,CAAC,YAAY,IAAI,QAAQ;QAC/C,UAAU,EAAE,QAAQ,CAAC,QAAQ,IAAI,EAAE;KACpC,CAAC,CAAC;IAEH,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC;AAC5D,CAAC","file":"text.js","sourcesContent":["import type { ITextGraphicAttribute } from '@visactor/vrender-core';\n// eslint-disable-next-line no-duplicate-imports\nimport { getTextBounds } from '@visactor/vrender-core';\nimport type { ITextMeasureOption } from '@visactor/vutils';\n// eslint-disable-next-line no-duplicate-imports\nimport { TextMeasure } from '@visactor/vutils';\nimport { DEFAULT_TEXT_FONT_FAMILY, DEFAULT_TEXT_FONT_SIZE } from '../constant';\n\nexport const initTextMeasure = (\n  textSpec?: Partial<ITextGraphicAttribute>,\n  option?: Partial<ITextMeasureOption>,\n  useNaiveCanvas?: boolean\n): TextMeasure<ITextGraphicAttribute> => {\n  return new TextMeasure<ITextGraphicAttribute>(\n    {\n      defaultFontParams: {\n        fontFamily: DEFAULT_TEXT_FONT_FAMILY,\n        fontSize: DEFAULT_TEXT_FONT_SIZE\n      },\n      getTextBounds: useNaiveCanvas ? undefined : getTextBounds,\n      specialCharSet: '-/: .,@%\\'\"~' + TextMeasure.ALPHABET_CHAR_SET + TextMeasure.ALPHABET_CHAR_SET.toUpperCase(),\n      ...(option ?? {})\n    },\n    textSpec\n  );\n};\n\n// FIXME: 和上一个方法统一，使用 TextMeasure 类\nexport function measureTextSize(\n  text: string | number | string[] | number[],\n  textSpec: Partial<ITextGraphicAttribute>,\n  fontFamily: string = DEFAULT_TEXT_FONT_FAMILY\n) {\n  if (!text) {\n    return { width: 0, height: 0 };\n  }\n  const bounds = getTextBounds({\n    text,\n    fontFamily: textSpec.fontFamily ?? fontFamily,\n    fontSize: textSpec.fontSize || 12,\n    fontWeight: textSpec.fontWeight as any,\n    textAlign: textSpec.textAlign ?? 'center',\n    textBaseline: textSpec.textBaseline,\n    ellipsis: !!textSpec.ellipsis,\n    maxLineWidth: textSpec.maxLineWidth || Infinity,\n    lineHeight: textSpec.fontSize || 12\n  });\n\n  return { width: bounds.width(), height: bounds.height() };\n}\n"]}