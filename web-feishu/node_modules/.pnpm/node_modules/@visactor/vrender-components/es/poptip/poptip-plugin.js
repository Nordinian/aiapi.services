var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { Generator, injectable } from "@visactor/vrender-core";

let PopTipPlugin = class {
    constructor() {
        this.name = "poptip", this.activeEvent = "onRegister", this._uid = Generator.GenAutoIncrementId(), 
        this.key = this.name + this._uid, this.poptip = e => {
            const graphic = e.target;
            if (graphic.isContainer || !graphic.attribute) return void this.unpoptip(e);
            if (graphic === this.activeGraphic) return;
            const {poptip: poptip} = graphic.attribute;
            poptip && (graphic.setAttributes({}), graphic._showPoptip = 1), this.activeGraphic && (this.activeGraphic.setAttributes({}), 
            this.activeGraphic._showPoptip = 2), this.setActiveGraphic(graphic, !0);
        }, this.unpoptip = e => {
            this.activeGraphic && (this.activeGraphic.setAttributes({}), this.activeGraphic._showPoptip = 2, 
            this.setActiveGraphic(null, !0));
        };
    }
    activate(context) {
        this.pluginService = context;
        const {stage: stage} = this.pluginService;
        stage.addEventListener("pointerover", this.poptip);
    }
    setActiveGraphic(graphic, rerender) {
        this.activeGraphic = graphic, this.pluginService.stage.renderNextFrame();
    }
    deactivate(context) {
        const {stage: stage} = this.pluginService;
        stage.removeEventListener("pointerover", this.poptip);
    }
};

PopTipPlugin = __decorate([ injectable() ], PopTipPlugin);

export { PopTipPlugin };

let PopTipForClipedTextPlugin = class {
    constructor() {
        this.name = "poptipForText", this.activeEvent = "onRegister", this._uid = Generator.GenAutoIncrementId(), 
        this.key = this.name + this._uid, this.pointerlave = e => {
            const {stage: stage} = this.pluginService;
            e.target === stage && this.unpoptip(e);
        }, this.poptip = e => {
            const graphic = e.target;
            if ("text" !== graphic.type || !graphic.cliped || graphic.isContainer || !graphic.attribute || graphic.attribute.disableAutoClipedPoptip) return void this.unpoptip(e);
            if (graphic === this.activeGraphic) return;
            const {poptip: poptip = {}} = graphic.attribute;
            poptip && (graphic.setAttributes({}), graphic._showPoptip = 1), this.activeGraphic && (this.activeGraphic.setAttributes({}), 
            this.activeGraphic._showPoptip = 2), this.setActiveGraphic(graphic, !0);
        }, this.unpoptip = e => {
            this.activeGraphic && (this.activeGraphic.setAttributes({}), this.activeGraphic._showPoptip = 2, 
            this.setActiveGraphic(null, !0));
        };
    }
    activate(context) {
        this.pluginService = context;
        const {stage: stage} = this.pluginService;
        stage.addEventListener("pointerover", this.poptip), stage.addEventListener("pointerleave", this.pointerlave);
    }
    setActiveGraphic(graphic, rerender) {
        this.activeGraphic = graphic, this.pluginService.stage.renderNextFrame();
    }
    deactivate(context) {
        const {stage: stage} = this.pluginService;
        stage.removeEventListener("pointerover", this.poptip), stage.removeEventListener("pointerleave", this.pointerlave);
    }
};

PopTipForClipedTextPlugin = __decorate([ injectable() ], PopTipForClipedTextPlugin);

export { PopTipForClipedTextPlugin };
//# sourceMappingURL=poptip-plugin.js.map
