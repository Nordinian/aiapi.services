var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}, __metadata = this && this.__metadata || function(k, v) {
    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v);
}, __param = this && this.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};

import { inject, injectable, getTheme, PolygonRender, POLYGON_NUMBER_TYPE, getScaledStroke } from "@visactor/vrender-core";

let DefaultCanvasPolygonPicker = class {
    constructor(canvasRenderer) {
        this.canvasRenderer = canvasRenderer, this.type = "polygon", this.numberType = POLYGON_NUMBER_TYPE;
    }
    contains(polygon, point, params) {
        if (!polygon.AABBBounds.contains(point.x, point.y)) return !1;
        if ("imprecise" === polygon.attribute.pickMode) return !0;
        const {pickContext: pickContext} = null != params ? params : {};
        if (!pickContext) return !1;
        const polygonAttribute = getTheme(polygon).polygon;
        let {x: x = polygonAttribute.x, y: y = polygonAttribute.y} = polygon.attribute;
        if (pickContext.highPerformanceSave(), polygon.transMatrix.onlyTranslate()) {
            const point = polygon.getOffsetXY(polygonAttribute);
            x += point.x, y += point.y, pickContext.setTransformForCurrent();
        } else x = 0, y = 0, pickContext.transformFromMatrix(polygon.transMatrix, !0);
        let picked = !1;
        return this.canvasRenderer.drawShape(polygon, pickContext, x, y, {}, null, ((context, pathAttribute, themeAttribute) => !!picked || (picked = context.isPointInPath(point.x, point.y), 
        picked)), ((context, pathAttribute, themeAttribute) => {
            if (picked) return !0;
            const lineWidth = pathAttribute.lineWidth || themeAttribute.lineWidth, pickStrokeBuffer = pathAttribute.pickStrokeBuffer || themeAttribute.pickStrokeBuffer;
            return pickContext.lineWidth = getScaledStroke(pickContext, lineWidth + pickStrokeBuffer, pickContext.dpr), 
            picked = context.isPointInStroke(point.x, point.y), picked;
        })), pickContext.highPerformanceRestore(), picked;
    }
};

DefaultCanvasPolygonPicker = __decorate([ injectable(), __param(0, inject(PolygonRender)), __metadata("design:paramtypes", [ Object ]) ], DefaultCanvasPolygonPicker);

export { DefaultCanvasPolygonPicker };
//# sourceMappingURL=polygon-picker.js.map
