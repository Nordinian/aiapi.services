{"version":3,"sources":["../src/util/hierarchy.ts"],"names":[],"mappings":"AAQA,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,aAAkB,EAClB,GAAW,EACX,QAAQ,GAAG,KAAK,EAChB,aAAa,GAAG,UAAU,EAChB,EAAE;IACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC7C,MAAM,IAAI,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE;YAC1B,OAAO,IAAI,CAAC;SACb;QACD,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;YACvB,MAAM,MAAM,GAAG,iBAAiB,CAAI,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;YACvF,IAAI,MAAM,EAAE;gBACV,OAAO,MAAM,CAAC;aACf;SACF;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAUF,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,aAAkB,EAClB,GAAW,EACX,QAAQ,GAAG,KAAK,EAChB,aAAa,GAAG,UAAU,EAChB,EAAE;IACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC7C,MAAM,IAAI,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;YACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnD,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzC,IAAI,SAAS,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE;oBAC/B,OAAO,IAAI,CAAC;iBACb;gBACD,MAAM,MAAM,GAAG,uBAAuB,CAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;gBACrF,IAAI,MAAM,EAAE;oBACV,OAAO,MAAM,CAAC;iBACf;aACF;SACF;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAUF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,aAAkB,EAClB,GAAW,EACX,QAAQ,GAAG,KAAK,EAChB,aAAa,GAAG,UAAU,EAChB,EAAE;IACZ,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,MAAM,GAAG,GAAG,CAAC,IAAS,EAAE,IAAc,EAAW,EAAE;QACjD,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACvB,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE;gBAC1B,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAChD,OAAO,IAAI,CAAC;aACb;YAED,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;gBACvB,MAAM,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAChE,IAAI,GAAG,KAAK,IAAI,EAAE;oBAChB,OAAO,GAAG,CAAC;iBACZ;aACF;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;IACF,GAAG,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;IACvB,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","file":"hierarchy.js","sourcesContent":["/**\n * 根据Key, 找到对应节点\n * @param hierarchyData\n * @param key\n * @param keyField\n * @param childrenField\n * @returns\n */\nexport const findHierarchyNode = <T>(\n  hierarchyData: T[],\n  key: string,\n  keyField = 'key',\n  childrenField = 'children'\n): T | null => {\n  for (let i = 0; i < hierarchyData.length; i++) {\n    const node = hierarchyData[i];\n    if (node[keyField] === key) {\n      return node;\n    }\n    if (node[childrenField]) {\n      const result = findHierarchyNode<T>(node[childrenField], key, keyField, childrenField);\n      if (result) {\n        return result;\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * 根据key, 找到对应节点的父节点\n * @param hierarchyData\n * @param key\n * @param keyField\n * @param childrenField\n * @returns\n */\nexport const findHierarchyNodeParent = <T>(\n  hierarchyData: T[],\n  key: string,\n  keyField = 'key',\n  childrenField = 'children'\n): T | null => {\n  for (let i = 0; i < hierarchyData.length; i++) {\n    const node = hierarchyData[i];\n    if (node[childrenField]) {\n      for (let j = 0; j < node[childrenField].length; j++) {\n        const childNode = node[childrenField][j];\n        if (childNode[keyField] === key) {\n          return node;\n        }\n        const result = findHierarchyNodeParent<T>([childNode], key, keyField, childrenField);\n        if (result) {\n          return result;\n        }\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * 回溯遍历多叉树, 找到给定key的路径.\n * @param hierarchyData\n * @param key\n * @param keyField\n * @param childrenField\n * @returns\n */\nexport const findHierarchyPath = <T>(\n  hierarchyData: T[],\n  key: string,\n  keyField = 'key',\n  childrenField = 'children'\n): string[] => {\n  const result: string[] = [];\n  const dfs = (data: T[], path: string[]): boolean => {\n    for (const item of data) {\n      if (item[keyField] === key) {\n        result.push(...path, item[keyField].toString());\n        return true;\n      }\n\n      if (item[childrenField]) {\n        const res = dfs(item[childrenField], [...path, item[keyField]]);\n        if (res === true) {\n          return res;\n        }\n      }\n    }\n    return false;\n  };\n  dfs(hierarchyData, []);\n  return result;\n};\n"]}