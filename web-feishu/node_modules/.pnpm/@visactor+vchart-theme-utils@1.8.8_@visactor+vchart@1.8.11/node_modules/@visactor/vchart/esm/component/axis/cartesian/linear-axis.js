import { LinearScale } from "@visactor/vscale";

import { CartesianAxis } from "./axis";

import { isValid, mixin } from "@visactor/vutils";

import { ComponentTypeEnum } from "../../interface/type";

import { LinearAxisMixin } from "../mixin/linear-axis-mixin";

import { Factory } from "../../../core/factory";

import { registerAxis } from "../base-axis";

export class CartesianLinearAxis extends CartesianAxis {
    constructor() {
        super(...arguments), this.type = ComponentTypeEnum.cartesianLinearAxis, this._zero = !0, 
        this._nice = !0, this._extend = {}, this._scale = new LinearScale;
    }
    setAttrFromSpec() {
        super.setAttrFromSpec(), this.setExtraAttrFromSpec();
    }
    initScales() {
        var _a, _b;
        super.initScales();
        const range = [ 0, 1 ];
        isValid(null === (_a = this._domain) || void 0 === _a ? void 0 : _a.min) && (range[0] = this._domain.min), 
        isValid(null === (_b = this._domain) || void 0 === _b ? void 0 : _b.max) && (range[1] = this._domain.max), 
        this._scale.domain(range);
    }
    computeDomain(data) {
        return this.computeLinearDomain(data);
    }
    axisHelper() {
        const helper = super.axisHelper();
        return helper.setExtendDomain = this.setExtendDomain.bind(this), helper.valueToPosition = this.valueToPosition.bind(this), 
        helper;
    }
}

CartesianLinearAxis.type = ComponentTypeEnum.cartesianLinearAxis, CartesianLinearAxis.specKey = "axes", 
mixin(CartesianLinearAxis, LinearAxisMixin);

export const registerCartesianLinearAxis = () => {
    registerAxis(), Factory.registerComponent(CartesianLinearAxis.type, CartesianLinearAxis);
};
//# sourceMappingURL=linear-axis.js.map
