import { isValid } from "@visactor/vutils";

import { BaseTooltipModel } from "./base-tooltip-model";

import { ContentModel } from "./content-model";

import { TitleModel } from "./title-model";

import { defaultContainerStyle } from "./style-constants";

import { mergeSpec } from "../../../../../util/spec/merge-spec";

export class TooltipModel extends BaseTooltipModel {
    constructor(parent, option, classList, id) {
        super(parent, option, 0), this.title = null, this.content = null, this._classList = classList, 
        this._id = id;
    }
    setVisibility(visibility) {
        if (super.setVisibility(visibility), !this.product) return;
        const {classList: classList} = this.product;
        visibility ? classList.add("visible") : classList.remove("visible");
    }
    init() {
        var _a;
        const tooltipActual = this._option.getTooltipActual();
        this.product || this._initPanel(this._classList, this._id);
        const {title: title} = tooltipActual;
        !1 !== (null == title ? void 0 : title.visible) && isValid(null == title ? void 0 : title.value) ? this.title || this._initTitle() : this.title && this._releaseTitle();
        (null !== (_a = tooltipActual.content) && void 0 !== _a ? _a : []).length > 0 ? this.content || this._initContent() : this.content && this._releaseContent();
    }
    _initPanel(classList, id) {
        const panel = this.createElement("div", classList, {
            left: "0",
            top: "0",
            pointerEvents: "none",
            padding: "12px",
            position: "absolute",
            zIndex: "99999999999999",
            fontFamily: "sans-serif",
            fontSize: "11px",
            borderRadius: "3px",
            borderStyle: "solid",
            lineHeight: "initial",
            background: "#fff",
            boxShadow: "2px 2px 4px rgba(0, 0, 0, 0.1)",
            maxWidth: "100wh",
            maxHeight: "100vh"
        }, id);
        this.product = panel;
    }
    _initTitle() {
        const title = new TitleModel(this.product, this._option, 0);
        title.init(), this.title = title, this.children[title.childIndex] = title;
    }
    _releaseTitle() {
        this.title && (this.title.release(), delete this.children[this.title.childIndex], 
        this.title = null);
    }
    _initContent() {
        const content = new ContentModel(this.product, this._option, 1);
        content.init(), this.content = content, this.children[content.childIndex] = content;
    }
    _releaseContent() {
        this.content && (this.content.release(), delete this.children[this.content.childIndex], 
        this.content = null);
    }
    setStyle() {
        const tooltipStyle = this._option.getTooltipStyle();
        super.setStyle(mergeSpec({}, defaultContainerStyle, tooltipStyle.panel)), Object.values(this.children).forEach((c => c.setStyle()));
    }
    setContent() {
        Object.values(this.children).forEach((c => {
            c.setContent();
        }));
    }
    release() {
        super.release(), this.title = null, this.content = null;
    }
}
//# sourceMappingURL=tooltip-model.js.map
