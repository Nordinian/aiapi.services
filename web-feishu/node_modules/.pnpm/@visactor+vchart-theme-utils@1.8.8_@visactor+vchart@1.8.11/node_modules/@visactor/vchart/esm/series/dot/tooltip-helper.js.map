{"version":3,"sources":["../src/series/dot/tooltip-helper.ts"],"names":[],"mappings":"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","file":"tooltip-helper.js","sourcesContent":["import type { ISeriesTooltipHelper } from '../interface';\nimport { BaseSeriesTooltipHelper } from '../base/tooltip-helper';\nimport type { IToolTipLinePattern, ITooltipPattern, TooltipActiveType } from '../../typings';\nimport { TimeUtil } from '../../component/axis/cartesian/util/time';\nimport { isValid } from '@visactor/vutils';\n\nexport class DotSeriesTooltipHelper extends BaseSeriesTooltipHelper implements ISeriesTooltipHelper {\n  updateTooltipSpec() {\n    super.updateTooltipSpec();\n    if (isValid(this.spec?.mark)) {\n      this.spec!.mark.updateContent = (prev: any, datum: any, params: any) => {\n        const childrenContent: IToolTipLinePattern[] = [];\n        const childrenPrev = prev.filter((p: any) => p.key === 'children');\n        childrenPrev.length > 0 &&\n          childrenPrev[0].value.forEach((element: any) => {\n            let flag = true;\n            for (const key in element) {\n              childrenContent.push({\n                shapeType: 'circle',\n                hasShape: flag,\n                shapeColor: this.contentShapeColorCallback(datum[0].datum[0]),\n                shapeStroke: this.contentShapeColorCallback(datum[0].datum[0]),\n                key: key,\n                value: element[key] + ''\n              });\n              flag = false;\n            }\n          });\n        return prev.concat(childrenContent);\n      };\n    }\n  }\n\n  /** 获取默认的tooltip pattern */\n  getDefaultTooltipPattern(activeType: TooltipActiveType): ITooltipPattern | null {\n    if (activeType === 'mark') {\n      return {\n        visible: true,\n        activeType,\n        title: {\n          key: 'event info',\n          value: 'event info'\n        },\n        content: [\n          {\n            hasShape: true,\n            shapeType: 'square',\n            shapeColor: this.contentShapeColorCallback,\n            shapeStroke: this.contentShapeColorCallback,\n            key: (datum: any) => datum.type,\n            value: (datum: any) => datum.id\n          },\n          {\n            hasShape: true,\n            shapeType: 'square',\n            shapeColor: this.contentShapeColorCallback,\n            shapeStroke: this.contentShapeColorCallback,\n            key: 'event_time',\n            value: (datum: any) => TimeUtil.getInstance().timeFormat('%Y%m%d', datum.event_time)\n          },\n          {\n            hasShape: true,\n            shapeType: 'square',\n            shapeColor: this.contentShapeColorCallback,\n            shapeStroke: this.contentShapeColorCallback,\n            key: 'action_type',\n            value: (datum: any) => datum.action_type\n          },\n          {\n            shapeType: 'square',\n            hasShape: true,\n            shapeColor: this.contentShapeColorCallback,\n            shapeStroke: this.contentShapeColorCallback,\n            key: 'children',\n            value: (datum: any) => {\n              return datum.children;\n            }\n          }\n        ],\n        updateContent: (prev: any, datum: any, params: any) => {\n          const childrenContent: IToolTipLinePattern[] = [];\n          prev[3].value.forEach((element: any) => {\n            let flag = true;\n            for (const key in element) {\n              childrenContent.push({\n                shapeType: 'circle',\n                hasShape: flag,\n                shapeColor: this.contentShapeColorCallback(datum[0].datum[0]),\n                shapeStroke: this.contentShapeColorCallback(datum[0].datum[0]),\n                key: key,\n                value: element[key] + ''\n              } as IToolTipLinePattern);\n              flag = false;\n            }\n          });\n          return prev.concat(childrenContent);\n        }\n      };\n    }\n    return null;\n  }\n}\n"]}