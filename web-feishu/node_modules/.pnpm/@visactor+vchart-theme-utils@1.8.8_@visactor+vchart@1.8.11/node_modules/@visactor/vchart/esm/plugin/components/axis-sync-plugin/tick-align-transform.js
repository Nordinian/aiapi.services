import { convertDomainToTickData } from "@visactor/vutils-extension";

export const tickAlign = (data, op) => {
    var _a, _b, _c, _d, _e;
    if (!data) return data;
    const targetAxis = null === (_a = null == op ? void 0 : op.targetAxis) || void 0 === _a ? void 0 : _a.call(op);
    if (!targetAxis) return data;
    const currentAxis = null === (_b = null == op ? void 0 : op.currentAxis) || void 0 === _b ? void 0 : _b.call(op);
    if (!currentAxis) return data;
    const currentData = null === (_c = currentAxis.getTickData()) || void 0 === _c ? void 0 : _c.getDataView();
    if (!currentData) return data;
    if (!currentData.transformsArr.find((t => "ticks" === t.type))) return data;
    const currentScale = currentAxis.getScale();
    if (!currentScale) return data;
    const targetData = null === (_e = null === (_d = targetAxis.getTickData()) || void 0 === _d ? void 0 : _d.getDataView()) || void 0 === _e ? void 0 : _e.latestData;
    if (!(null == targetData ? void 0 : targetData.length)) return data;
    const targetScale = targetAxis.getScale();
    if (!targetScale) return data;
    const targetDomain = targetScale.domain(), targetRange = targetDomain[1] - targetDomain[0];
    if (0 === targetRange) return data;
    const currentDomain = currentScale.domain(), currentRange = currentDomain[1] - currentDomain[0];
    if (0 === targetRange) return data;
    const newTicks = targetData.map((d => {
        const percent = (d.value - targetDomain[0]) / targetRange;
        return currentRange * percent + currentDomain[0];
    }));
    return convertDomainToTickData(newTicks);
};
//# sourceMappingURL=tick-align-transform.js.map
