{"version":3,"sources":["../src/event/events/dimension/util/cartesian.ts"],"names":[],"mappings":"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","file":"cartesian.js","sourcesContent":["import type { IChart } from '../../../../chart/interface';\nimport type { IDimensionInfo } from '../interface';\nimport { isDiscrete } from '@visactor/vscale';\nimport { getDimensionData, getAxis } from './common';\nimport type { CartesianAxis } from '../../../../component/axis/cartesian';\nimport type { ICartesianSeries } from '../../../../series/interface';\nimport { isNil } from '@visactor/vutils';\nimport { isXAxis, isYAxis } from '../../../../component/axis/cartesian/util/common';\nimport { Direction } from '../../../../typings/space';\nimport type { ILayoutPoint } from '../../../../typings/layout';\nimport { getFirstSeries } from '../../../../util/model';\n\nconst discreteXAxisGetDimensionField = (series: ICartesianSeries) => series.fieldX[0];\nconst discreteYAxisGetDimensionField = (series: ICartesianSeries) => series.fieldY[0];\nconst continuousXAxisGetDimensionField = (series: ICartesianSeries) => [series.fieldX[0], series.fieldX2];\nconst continuousYAxisGetDimensionField = (series: ICartesianSeries) => [series.fieldY[0], series.fieldY2];\n\nexport const getCartesianDimensionInfo = (chart: IChart | undefined, pos: ILayoutPoint): IDimensionInfo[] | null => {\n  if (!chart) {\n    return null;\n  }\n  const series = getFirstSeries(chart.getRegionsInIndex(), 'cartesian');\n  if (!series) {\n    return null;\n  }\n\n  const { x, y } = pos;\n  const xAxisList = getAxis(chart, (cmp: CartesianAxis) => isXAxis(cmp.getOrient()), pos) ?? [];\n  const yAxisList = getAxis(chart, (cmp: CartesianAxis) => isYAxis(cmp.getOrient()), pos) ?? [];\n\n  const bandAxisSet: Set<CartesianAxis> = new Set();\n  const linearAxisSet: Set<CartesianAxis> = new Set();\n  [xAxisList, yAxisList].forEach(axisList =>\n    axisList.forEach(axis => {\n      const isDiscreteAxis = isDiscrete(axis.getScale().type);\n      if (isDiscreteAxis) {\n        bandAxisSet.add(axis);\n      } else {\n        linearAxisSet.add(axis);\n      }\n    })\n  );\n\n  const targetAxisInfo: IDimensionInfo[] = [];\n\n  const addAxisDimensionInfo = (orient: 'x' | 'y', isDiscrete: boolean) => {\n    (orient === 'x' ? xAxisList : yAxisList).forEach(axis => {\n      if ((isDiscrete ? bandAxisSet : linearAxisSet).has(axis)) {\n        const info = getDimensionInfoByPosition(\n          axis,\n          orient === 'x' ? x : y,\n          orient,\n          orient === 'x'\n            ? isDiscrete\n              ? discreteXAxisGetDimensionField\n              : continuousXAxisGetDimensionField\n            : isDiscrete\n            ? discreteYAxisGetDimensionField\n            : continuousYAxisGetDimensionField\n        );\n        info && targetAxisInfo.push(info);\n      }\n    });\n  };\n\n  // 优先筛选 band 轴，其次按照 direction 判断\n  if (chart.getSpec().direction === Direction.horizontal) {\n    addAxisDimensionInfo('y', bandAxisSet.size > 0);\n    if (targetAxisInfo.length === 0) {\n      addAxisDimensionInfo('x', bandAxisSet.size > 0);\n    }\n  } else {\n    addAxisDimensionInfo('x', bandAxisSet.size > 0);\n    if (targetAxisInfo.length === 0) {\n      addAxisDimensionInfo('y', bandAxisSet.size > 0);\n    }\n  }\n\n  if (!targetAxisInfo.length) {\n    return null;\n  }\n  return targetAxisInfo;\n};\n\nexport const getDimensionInfoByPosition = (\n  axis: CartesianAxis,\n  posValue: number,\n  posKey: 'x' | 'y',\n  getDimensionField: (series: ICartesianSeries) => string | string[]\n): IDimensionInfo | null => {\n  const scale = axis.getScale();\n  const scalePos = posValue - axis.getLayoutStartPoint()[posKey];\n  // 判断是否在 range 范围内\n  if ((scalePos - scale.range()[0]) * (scalePos - scale.range()[1]) > 0) {\n    return null;\n  }\n\n  const value = scale.invert(scalePos);\n  return getDimensionInfoByValue(axis, value, getDimensionField);\n};\n\nexport const getDimensionInfoByValue = (\n  axis: CartesianAxis,\n  value: any,\n  getDimensionField?: (series: ICartesianSeries) => string | string[]\n): IDimensionInfo | null => {\n  const scale = axis.getScale();\n\n  if (isNil(value)) {\n    return null;\n  }\n  const domain = scale.domain();\n  let index: number | undefined = domain.findIndex((v: any) => v?.toString() === value.toString());\n  if (index < 0) {\n    index = undefined;\n  }\n\n  const data = getDimensionData(\n    value,\n    axis,\n    'cartesian',\n    getDimensionField ?? (isXAxis(axis.getOrient()) ? discreteXAxisGetDimensionField : discreteYAxisGetDimensionField)\n  );\n  return { index, value, axis, data };\n};\n"]}