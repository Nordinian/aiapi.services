{"version":3,"sources":["../src/component/axis/polar/axis.ts"],"names":[],"mappings":"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","file":"axis.js","sourcesContent":["import { POLAR_DEFAULT_RADIUS, POLAR_END_ANGLE, POLAR_END_RADIAN } from '../../../constant/polar';\nimport type { IBaseScale, BandScale, LinearScale } from '@visactor/vscale';\n// eslint-disable-next-line no-duplicate-imports\nimport { isContinuous } from '@visactor/vscale';\nimport { ChartEvent, LayoutZIndex, POLAR_START_ANGLE, POLAR_START_RADIAN } from '../../../constant';\nimport type { IPolarAxis, IPolarAxisCommonSpec, IPolarAxisCommonTheme } from './interface';\nimport type { IComponentOption } from '../../interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { ComponentTypeEnum } from '../../interface/type';\nimport { Factory } from '../../../core/factory';\nimport { mergeSpec } from '../../../util/spec/merge-spec';\nimport { eachSeries } from '../../../util/model';\nimport { polarToCartesian } from '../../../util/math';\nimport type { IPolarTickDataOpt, CoordinateType } from '@visactor/vutils-extension';\n// eslint-disable-next-line no-duplicate-imports\nimport type { IPolarSeries } from '../../../series/interface';\nimport type { IPoint, IPolarOrientType, IPolarPoint, Datum, StringOrNumber, ILayoutType } from '../../../typings';\nimport { isPolarAxisSeries } from '../../../series/util/utils';\nimport { getAxisLabelOffset, isValidPolarAxis } from '../util';\n\nimport type { Dict, Maybe } from '@visactor/vutils';\n// eslint-disable-next-line no-duplicate-imports\nimport { PointService, degreeToRadian, isValid, isArray, isValidNumber } from '@visactor/vutils';\nimport type { IEffect, IModelSpecInfo } from '../../../model/interface';\nimport { CompilableData } from '../../../compile/data/compilable-data';\nimport { AxisComponent } from '../base-axis';\nimport type { IBandAxisSpec, ITick } from '../interface';\nimport { HOOK_EVENT } from '@visactor/vgrammar-core';\nimport { getPolarAxisInfo } from './util';\n\nexport abstract class PolarAxis<T extends IPolarAxisCommonSpec = IPolarAxisCommonSpec>\n  extends AxisComponent<T>\n  implements IPolarAxis\n{\n  static type = ComponentTypeEnum.polarAxis;\n  type = ComponentTypeEnum.polarAxis;\n  name: string = ComponentTypeEnum.polarAxis;\n\n  static specKey = 'axes';\n\n  protected readonly _defaultBandPosition = 0;\n  protected readonly _defaultBandInnerPadding = 0;\n  protected readonly _defaultBandOuterPadding = 0;\n\n  layoutType: ILayoutType = 'absolute';\n  layoutZIndex: number = LayoutZIndex.Axis;\n  protected _tick: ITick | undefined = undefined;\n\n  protected _center: IPoint | null = null;\n  get center() {\n    return this._center;\n  }\n\n  protected _startAngle: number = POLAR_START_RADIAN;\n  get startAngle() {\n    return this._startAngle;\n  }\n\n  protected _endAngle: number = POLAR_END_RADIAN;\n  get endAngle() {\n    return this._endAngle;\n  }\n\n  protected _orient: IPolarOrientType = 'radius';\n  getOrient() {\n    return this._orient;\n  }\n\n  protected _groupScales: IBaseScale[] = [];\n  getGroupScales() {\n    return this._groupScales;\n  }\n\n  private _axisStyle: any;\n  private _gridStyle: any;\n\n  static getSpecInfo(chartSpec: any): Maybe<IModelSpecInfo[]> {\n    const axesSpec = chartSpec[this.specKey];\n    if (!axesSpec) {\n      return null;\n    }\n\n    if (!isArray(axesSpec)) {\n      if (!isValidPolarAxis(axesSpec)) {\n        return null;\n      }\n      const { axisType, componentName } = getPolarAxisInfo(axesSpec);\n      axesSpec.center = chartSpec.center;\n      axesSpec.startAngle = chartSpec.startAngle ?? POLAR_START_ANGLE;\n      axesSpec.endAngle =\n        chartSpec.endAngle ?? (isValid(chartSpec.startAngle) ? chartSpec.startAngle + 360 : POLAR_END_ANGLE);\n      axesSpec.type = axisType;\n      return [\n        {\n          spec: axesSpec,\n          specPath: [this.specKey],\n          type: componentName\n        }\n      ];\n    }\n    const specInfos: IModelSpecInfo[] = [];\n    let angleAxisIndex: number;\n    const radiusAxisSpecInfos: IModelSpecInfo[] = [];\n    axesSpec.forEach((s: any, i: number) => {\n      if (!isValidPolarAxis(s)) {\n        return;\n      }\n      const { axisType, componentName } = getPolarAxisInfo(s);\n      s.center = chartSpec.center;\n      s.startAngle = chartSpec.startAngle ?? POLAR_START_ANGLE;\n      s.endAngle = chartSpec.endAngle ?? (isValid(chartSpec.startAngle) ? chartSpec.startAngle + 360 : POLAR_END_ANGLE);\n      // 优先使用outerRadius, 但要兼容s.radius, spec.radius\n      s.outerRadius = s.radius ?? chartSpec.outerRadius ?? chartSpec.radius ?? POLAR_DEFAULT_RADIUS;\n      s.type = axisType;\n      const info = {\n        spec: s,\n        specIndex: i,\n        specPath: [this.specKey, i],\n        type: componentName\n      };\n      specInfos.push(info);\n      if (s.orient === 'radius') {\n        radiusAxisSpecInfos.push(info);\n      } else {\n        angleAxisIndex = i;\n      }\n    });\n    radiusAxisSpecInfos.forEach(info => {\n      (info as any).angleAxisIndex = angleAxisIndex;\n    });\n    return specInfos;\n  }\n\n  static createComponent(specInfo: IModelSpecInfo, options: IComponentOption) {\n    const { spec, ...others } = specInfo;\n    const C = Factory.getComponentInKey(others.type);\n    if (C) {\n      return new C(spec, {\n        ...options,\n        ...others\n      }) as IPolarAxis;\n    }\n    options.onError(`Component ${others.type} not found`);\n    return null;\n  }\n\n  effect: IEffect = {\n    scaleUpdate: param => {\n      this.computeData(param?.value);\n      eachSeries(\n        this._regions,\n        s => {\n          if (this.getOrient() === 'radius') {\n            (s as IPolarSeries).radiusAxisHelper = this.axisHelper();\n          } else {\n            (s as IPolarSeries).angleAxisHelper = this.axisHelper();\n          }\n        },\n        {\n          userId: this._seriesUserId,\n          specIndex: this._seriesIndex\n        }\n      );\n    }\n  };\n\n  setAttrFromSpec() {\n    super.setAttrFromSpec();\n\n    if (this.visible) {\n      this._axisStyle = this._getAxisAttributes();\n      this._gridStyle = this._getGridAttributes();\n    }\n\n    this._tick = this._spec.tick;\n    this._orient = this._spec.orient === 'angle' ? 'angle' : 'radius';\n    this._center = this._spec.center;\n    const chartSpec = this.getChart().getSpec() as any;\n    const startAngle = this._spec.startAngle ?? chartSpec.startAngle;\n    const endAngle = this._spec.endAngle ?? chartSpec.endAngle;\n    this._startAngle = degreeToRadian(startAngle ?? POLAR_START_ANGLE);\n    this._endAngle = degreeToRadian(endAngle ?? (isValid(startAngle) ? startAngle + 360 : POLAR_END_ANGLE));\n    this._inverse = this._spec.inverse;\n  }\n\n  _transformLayoutPosition = (pos: Partial<IPoint>) => {\n    const region = this.getRegions()?.[0];\n    return region ? region.getLayoutStartPoint() : pos;\n  };\n\n  onLayoutEnd(ctx: any): void {\n    const isChanged = this.updateScaleRange();\n\n    if (isChanged) {\n      this.updateSeriesScale();\n      this.event.emit(ChartEvent.scaleUpdate, { model: this, value: 'range' });\n    }\n\n    super.onLayoutEnd(ctx);\n  }\n\n  onRender(ctx: any): void {\n    // do nothing\n  }\n\n  changeRegions(/** regions: IRegion[] */): void {\n    // do nothing\n  }\n\n  // data\n  protected _initData() {\n    const tickData = this._initTickDataSet(this._tickTransformOption('polar'));\n    tickData.target.addListener('change', this._forceLayout.bind(this));\n    this._tickData = new CompilableData(this._option, tickData);\n  }\n\n  protected _tickTransformOption(coordinateType: CoordinateType) {\n    return {\n      ...super._tickTransformOption(coordinateType),\n      noDecimal: this._tick.noDecimals,\n      startAngle: this.startAngle,\n      labelOffset: getAxisLabelOffset(this._spec),\n      getRadius: () => this.getOuterRadius()\n    } as IPolarTickDataOpt;\n  }\n\n  afterCompile() {\n    const product = this._axisMark?.getProduct();\n    if (product) {\n      product.addEventListener(HOOK_EVENT.AFTER_ELEMENT_ENCODE, () => {\n        if (this._isLayout === false) {\n          // 布局结束之后再进行插件的调用\n          this._delegateAxisContainerEvent(product.getGroupGraphicItem());\n        }\n      });\n    }\n  }\n\n  protected updateScaleRange() {\n    const prevRange = this._scale.range();\n    let newRange: [number, number];\n\n    if (this.getOrient() === 'radius') {\n      newRange = this._inverse\n        ? [this.computeLayoutOuterRadius(), this.computeLayoutInnerRadius()]\n        : [this.computeLayoutInnerRadius(), this.computeLayoutOuterRadius()];\n    } else {\n      newRange = this._inverse ? [this._endAngle, this._startAngle] : [this._startAngle, this._endAngle];\n    }\n\n    if (prevRange && newRange && prevRange[0] === newRange[0] && prevRange[1] === newRange[1]) {\n      return false;\n    }\n\n    this._scale.range(newRange);\n\n    return true;\n  }\n\n  protected collectData(depth: number, rawData?: boolean) {\n    const data: { min: number; max: number; values: any[] }[] = [];\n    eachSeries(\n      this._regions,\n      s => {\n        let field: string | string[];\n        if (depth > 0) {\n          field = s.getGroups()?.fields?.[depth];\n        } else {\n          field =\n            this.getOrient() === 'radius' ? (s as IPolarSeries).getRadiusField() : (s as IPolarSeries).getAngleField();\n        }\n        field = (isArray(field) ? (isContinuous(this._scale.type) ? field : [field[0]]) : [field]) as string[];\n        if (!depth) {\n          this._dataFieldText = s.getFieldAlias(field[0]);\n        }\n\n        if (field) {\n          const viewData = s.getViewData();\n          if (rawData) {\n            field.forEach(f => {\n              data.push(s.getRawDataStatisticsByField(f, false) as { min: number; max: number; values: any[] });\n            });\n          } else if (viewData && viewData.latestData && viewData.latestData.length) {\n            const seriesData = s.getViewDataStatistics?.();\n\n            field.forEach(f => {\n              if (seriesData?.latestData?.[f]) {\n                data.push(seriesData.latestData[f]);\n              }\n            });\n          }\n        }\n      },\n      {\n        userId: this._seriesUserId,\n        specIndex: this._seriesIndex\n      }\n    );\n    return data;\n  }\n\n  protected abstract computeDomain(data: { min: number; max: number; values: any[] }[]): StringOrNumber[];\n\n  protected updateSeriesScale(): void {\n    eachSeries(\n      this._regions,\n      s => {\n        if (this.getOrient() === 'radius') {\n          (s as IPolarSeries).setRadiusScale(this._scale);\n          (s as IPolarSeries).radiusAxisHelper = this.axisHelper();\n        } else {\n          (s as IPolarSeries).setAngleScale(this._scale);\n          (s as IPolarSeries).angleAxisHelper = this.axisHelper();\n        }\n      },\n      {\n        userId: this._seriesUserId,\n        specIndex: this._seriesIndex\n      }\n    );\n  }\n\n  protected getSeriesStatisticsField(s: IPolarSeries) {\n    const f = this.getOrient() === 'radius' ? s.getRadiusField() : s.getAngleField();\n    if (isContinuous(this._scale.type)) {\n      return f;\n    }\n    return [f[0]];\n  }\n\n  protected initGroupScales() {\n    // do nothing\n  }\n\n  // axisHelper\n  protected axisHelper() {\n    const getScale = (depth: number) => {\n      return this._scales[depth];\n    };\n\n    const helper = {\n      isContinuous: isContinuous(this._scale.type),\n      dataToPosition: this.dataToPosition.bind(this),\n      coordToPoint: this.coordToPoint.bind(this),\n      pointToCoord: this.pointToCoord.bind(this),\n      center: this.getCenter.bind(this),\n      getScale,\n      getAxisId: () => this.id\n    };\n    return helper;\n  }\n\n  positionToData(position: IPoint) {\n    const coord = this.pointToCoord(position);\n    if (this.getOrient() === 'radius') {\n      return this.invert(coord.radius);\n    }\n    return this.invert(coord.angle);\n  }\n\n  /**\n   * 将半径和角度转换为笛卡尔坐标点\n   * @param point 角度 & 弧度信息\n   * @returns 笛卡尔坐标点 { x, y }\n   */\n  coordToPoint(point: IPolarPoint): IPoint {\n    // center & startAngle 都是坐标系转换的配置，在 scale 中不生效，仅在最终转换时生效\n    const angle = point.angle;\n    const { x: centerX, y: centerY } = this.getCenter();\n    const p = polarToCartesian({ angle, radius: point.radius });\n    return {\n      x: p.x + centerX,\n      y: p.y + centerY\n    };\n  }\n\n  /**\n   * 将笛卡尔坐标转换为对应的半径和弧度\n   * @param point 笛卡尔坐标点 { x, y }\n   * @returns 角度 & 弧度信息 { radius, angle }\n   */\n  pointToCoord(point: IPoint): IPolarPoint {\n    const { x: centerX, y: centerY } = this.getCenter();\n    let dx = point.x - centerX;\n    let dy = point.y - centerY;\n    const startAngle = this._startAngle;\n    const endAngle = this._endAngle;\n    const radius = Math.sqrt(dx * dx + dy * dy);\n    dx /= radius;\n    dy /= radius;\n\n    let radian = Math.atan2(dy, dx);\n    if (radian < startAngle) {\n      while (radian <= startAngle) {\n        radian += Math.PI * 2;\n      }\n    }\n    if (radian > endAngle) {\n      while (radian >= endAngle) {\n        radian -= Math.PI * 2;\n      }\n    }\n    return {\n      radius,\n      angle: radian\n    };\n  }\n\n  /**\n   * 获取坐标轴圆心位置\n   * @returns 圆心位置\n   */\n  getCenter(): IPoint {\n    return {\n      x: this._center?.x || this.getRefLayoutRect().width / 2,\n      y: this._center?.y || this.getRefLayoutRect().height / 2\n    };\n  }\n\n  /**\n   * 获取极坐标半径值\n   * @returns 半径数值\n   */\n  getOuterRadius(): number {\n    return this.computeLayoutOuterRadius();\n  }\n\n  /**\n   * 获取极坐标内半径值\n   * @returns 内半径数值\n   */\n  getInnerRadius(): number {\n    return this.computeLayoutInnerRadius();\n  }\n\n  tickValues(): number[] {\n    if (this._tickData) {\n      const latestData = this._tickData.getLatestData();\n\n      if (latestData && !isArray(latestData)) {\n        // the ticks data of scale has not be calculated\n        this.computeData('force');\n      } else {\n        return latestData || [];\n      }\n    }\n\n    return (this._scale as BandScale | LinearScale).ticks();\n  }\n\n  updateLayoutAttribute(): void {\n    if (this._visible) {\n      if (this.getOrient() === 'radius') {\n        this._layoutRadiusAxis();\n      } else {\n        this._layoutAngleAxis();\n      }\n    }\n\n    super.updateLayoutAttribute();\n  }\n\n  private _layoutAngleAxis(): void {\n    const center = this.getCenter();\n    const radius = this.computeLayoutOuterRadius();\n    const innerRadius = this.computeLayoutInnerRadius();\n    const angleRange = this._endAngle - this._startAngle;\n    const items = isArray(this._tickData.getLatestData())\n      ? this._tickData.getLatestData().map((obj: Datum) => {\n          const angle = this.dataToPosition([obj.value]);\n          return {\n            id: obj.value,\n            label: obj.value,\n            value: (angle - this._startAngle) / angleRange,\n            rawValue: obj.value\n          };\n        })\n      : [];\n    const commonAttrs = {\n      ...this.getLayoutStartPoint(),\n      inside: this._spec.inside,\n      center,\n      radius,\n      innerRadius,\n      startAngle: this._startAngle,\n      endAngle: this._endAngle\n    };\n    const attrs: any = {\n      ...commonAttrs,\n      title: {\n        text: this._spec.title.text || this._dataFieldText\n      },\n      items: items.length ? [items] : [],\n      orient: 'angle'\n    };\n    if (this._spec.grid.visible) {\n      attrs.grid = {\n        type: 'line',\n        smoothLink: true,\n        items,\n        ...commonAttrs\n      };\n    }\n    this._update(attrs);\n  }\n\n  private _layoutRadiusAxis(): void {\n    const center = this.getCenter();\n    const radius = this.computeLayoutOuterRadius();\n    const innerRadius = this.computeLayoutInnerRadius();\n    const endPoint = this.coordToPoint({ angle: this._startAngle, radius });\n    const startPoint = this.coordToPoint({ angle: this._startAngle, radius: innerRadius });\n    const distance = PointService.distancePP(startPoint, endPoint);\n    const items = isArray(this._tickData.getLatestData())\n      ? this._tickData.getLatestData().map((obj: Datum) => {\n          const value = this.dataToPosition([obj.value]);\n          return {\n            id: obj.value,\n            label: obj.value,\n            value: (value - innerRadius) / distance,\n            rawValue: obj.value\n          };\n        })\n      : [];\n    const commonAttrs = {\n      ...this.getLayoutStartPoint(),\n      start: startPoint,\n      end: endPoint,\n      verticalFactor: -1\n    };\n    const attrs: any = {\n      ...commonAttrs,\n      title: {\n        text: this._spec.title.text || this._dataFieldText\n      },\n      items: items.length ? [items] : [],\n      orient: 'radius'\n    };\n    if (this._spec.grid?.visible) {\n      attrs.grid = {\n        items,\n        type: this._spec.grid?.smooth ? 'circle' : 'polygon',\n        center,\n        closed: true,\n        sides: this._getRelatedAngleAxis()?.tickValues().length,\n        startAngle: this._startAngle,\n        endAngle: this._endAngle,\n        ...commonAttrs\n      };\n    }\n    this._update(attrs);\n  }\n\n  protected _getRelatedAngleAxis(): IPolarAxis | undefined {\n    const index = (this._option as any).angleAxisIndex;\n    if (isValid(index)) {\n      return this._option.getComponentByIndex(this.specKey, index) as IPolarAxis;\n    }\n    return undefined;\n  }\n\n  private computeLayoutOuterRadius() {\n    /**\n     * 兼容radius旧配置\n     * @deprecated use outerRadius instead\n     */\n    const radius = this._spec.outerRadius ?? this._spec.radius;\n    const outerRadius = radius ?? this.getRefSeriesRadius().outerRadius;\n    const { width, height } = this.getRefLayoutRect();\n    return (Math.min(width, height) / 2) * outerRadius;\n  }\n\n  private computeLayoutInnerRadius() {\n    const innerRadius = this._spec.innerRadius ?? this.getRefSeriesRadius().innerRadius;\n    const { width, height } = this.getRefLayoutRect();\n    return (Math.min(width, height) / 2) * innerRadius;\n  }\n\n  private getRefLayoutRect() {\n    return this.getRegions()[0].getLayoutRect();\n  }\n\n  private getRefSeriesRadius() {\n    let outerRadius: number = POLAR_DEFAULT_RADIUS;\n    let innerRadius: number = 0;\n    const chartSpec = this.getChart().getSpec() as any;\n    // FIXME: 为了保证 common 图表能够应用系列的 radius 配置，当前从相应的 region 中取到 radius 信息\n    eachSeries(\n      this.getRegions(),\n      s => {\n        const series = s as IPolarSeries;\n        if (isPolarAxisSeries(series.type)) {\n          const {\n            outerRadius: seriesRadius = chartSpec.outerRadius,\n            innerRadius: seriesInnerRadius = chartSpec.innerRadius\n          } = series;\n          if (isValidNumber(seriesRadius)) {\n            outerRadius = seriesRadius;\n          }\n          if (isValidNumber(seriesInnerRadius)) {\n            innerRadius = seriesInnerRadius;\n          }\n        }\n      },\n      {\n        userId: this._seriesUserId,\n        specIndex: this._seriesIndex\n      }\n    );\n    return { outerRadius, innerRadius };\n  }\n\n  private _update(attrs: Dict<unknown>) {\n    const { grid: gridAttrs, ...axisAttrs } = attrs;\n    const axisProduct = this._axisMark.getProduct(); // 获取语法元素并更新\n    axisProduct.encode(mergeSpec({}, this._axisStyle, axisAttrs));\n\n    if (this._gridMark) {\n      const gridProduct = this._gridMark.getProduct(); // 获取语法元素并更新\n      gridProduct.encode(mergeSpec({}, this._gridStyle, gridAttrs));\n    }\n  }\n\n  invert(value: number): number {\n    if (this.getOrient() === 'angle' && this._scale.type === 'band') {\n      //极坐标轴需要手动取模，超出range时默认会截断\n      const range = this._scale.range();\n      const rangeValue = range[range.length - 1] - range[0];\n      const bandPosition = (this.getSpec() as IBandAxisSpec).bandPosition ?? this._defaultBandPosition;\n      const offset = bandPosition === 0.5 ? 0 : (this._scale as BandScale).bandwidth() / 2;\n      if (range[0] < 0) {\n        const angle = value + offset;\n        const transformedAngle = ((angle + Math.abs(range[0])) % rangeValue) - Math.abs(range[0]);\n        return this._scale.invert(transformedAngle);\n      }\n      return this._scale.invert((value + offset) % rangeValue);\n    }\n\n    return this._scale.invert(value);\n  }\n}\n"]}