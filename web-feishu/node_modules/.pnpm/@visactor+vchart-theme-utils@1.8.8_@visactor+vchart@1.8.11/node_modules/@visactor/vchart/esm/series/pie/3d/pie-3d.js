import { AttributeLevel, ARC_MIDDLE_ANGLE } from "../../../constant";

import { SeriesTypeEnum } from "../../interface/type";

import { registerArc3dMark } from "../../../mark/arc-3d";

import { BasePieSeries } from "../pie";

import { pie3dSeriesMark } from "../constant";

import { radianToDegree } from "@visactor/vutils";

import { Factory } from "../../../core/factory";

import { registerPie3dAnimation } from "../animation/animation";

import { Pie3dSeriesSpecTransformer } from "./pie-3d-transformer";

export class Pie3dSeries extends BasePieSeries {
    constructor() {
        super(...arguments), this.type = SeriesTypeEnum.pie3d, this._pieMarkName = "pie3d", 
        this._pieMarkType = "arc3d", this.transformerConstructor = Pie3dSeriesSpecTransformer;
    }
    setAttrFromSpec() {
        var _a, _b;
        super.setAttrFromSpec(), this._angle3d = null !== (_b = null === (_a = this._spec) || void 0 === _a ? void 0 : _a.angle3d) && void 0 !== _b ? _b : -Math.PI / 3;
    }
    initMarkStyle() {
        super.initMarkStyle();
        const pieMark = this._pieMark;
        pieMark && this.setMarkStyle(pieMark, {
            beta: () => this._angle3d
        }, "normal", AttributeLevel.Series);
    }
    initLabelMarkStyle(textMark) {
        if (!textMark) return;
        super.initLabelMarkStyle(textMark);
        const params3d = {};
        textMark.setSupport3d(!0), params3d.beta = this._angle3d, params3d.anchor3d = datum => {
            var _a, _b, _c, _d;
            return [ null !== (_b = null === (_a = this._center) || void 0 === _a ? void 0 : _a.x) && void 0 !== _b ? _b : this._region.getLayoutRect().width / 2, null !== (_d = null === (_c = this._center) || void 0 === _c ? void 0 : _c.y) && void 0 !== _d ? _d : this._region.getLayoutRect().height / 2 ];
        }, params3d.angle = datum => {
            var _a;
            const angle = datum[ARC_MIDDLE_ANGLE];
            return "inside" === (null === (_a = this._spec.label) || void 0 === _a ? void 0 : _a.position) ? radianToDegree(angle) : 0;
        }, this.setMarkStyle(textMark, Object.assign(Object.assign({}, params3d), {
            z: 100
        }), void 0, AttributeLevel.Mark);
    }
}

Pie3dSeries.type = SeriesTypeEnum.pie3d, Pie3dSeries.mark = pie3dSeriesMark, Pie3dSeries.transformerConstructor = Pie3dSeriesSpecTransformer;

export const registerPie3dSeries = () => {
    registerPie3dAnimation(), registerArc3dMark(), Factory.registerSeries(Pie3dSeries.type, Pie3dSeries);
};
//# sourceMappingURL=pie-3d.js.map
