import { array, isNil, mergeSpec } from "../../util";

import { getComponentThemeFromOption } from "../util";

import { getDirectionByOrient } from "../axis/cartesian/util";

export const dataFilterWithNewDomain = (data, op) => {
    const {getNewDomain: getNewDomain, isContinuous: isContinuous, field: field} = op, datumField = field(), newDomain = getNewDomain();
    if (isNil(newDomain) || isNil(datumField)) return data;
    if (0 === newDomain.length) return [];
    let filter = null;
    return filter = isContinuous() ? d => d[datumField] >= newDomain[0] && d[datumField] <= newDomain[1] : d => newDomain.indexOf(d[datumField] + "") >= 0 || newDomain.indexOf(d[datumField]) >= 0, 
    data.filter(filter);
};

export const dataFilterComputeDomain = (data, op) => {
    const {stateFields: stateFields, valueFields: valueFields, dataCollection: dataCollection} = op.input, {stateField: stateField, valueField: valueField} = op.output, resultObj = {}, resultData = [];
    return dataCollection.forEach(((dv, i) => {
        var _a;
        if (isNil(stateFields[i])) return;
        const stateFieldInfo = null === (_a = dv.getFields()) || void 0 === _a ? void 0 : _a[stateFields[i]];
        stateFieldInfo && stateFieldInfo.lockStatisticsByDomain && stateFieldInfo.domain.forEach((d => {
            resultObj[d] = 0;
        })), dv.latestData.forEach((d => {
            array(stateFields[i]).forEach((state => {
                isNil(d[state]) || (isNil(resultObj[d[state]]) && (resultObj[d[state]] = 0), isNil(valueFields[i]) || (resultObj[d[state]] += isNaN(parseFloat(d[valueFields[i]])) ? 1 : parseFloat(d[valueFields[i]])));
            }));
        }));
    })), Object.keys(resultObj).forEach(((d, i) => {
        const res = {
            [stateField]: d
        };
        valueField && (res[valueField] = resultObj[d]), resultData.push(res);
    })), resultData;
};

export const getDataFilterTheme = (orient, type, chartTheme) => {
    const theme = getComponentThemeFromOption(type, chartTheme), directionTheme = theme[getDirectionByOrient(orient)], finalTheme = mergeSpec({}, theme, directionTheme);
    return delete finalTheme.horizontal, delete finalTheme.vertical, finalTheme;
};
//# sourceMappingURL=util.js.map
