"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.registerProgressArcMark = exports.ProgressArcMark = void 0;

const factory_1 = require("./../core/factory"), vutils_1 = require("@visactor/vutils"), arc_1 = require("./arc"), config_1 = require("../animation/config"), vgrammar_core_1 = require("@visactor/vgrammar-core");

class ProgressArcMark extends arc_1.BaseArcMark {
    constructor() {
        super(...arguments), this._cacheStateStyle = {};
    }
    _getDefaultStyle() {
        return Object.assign(Object.assign({}, super._getDefaultStyle()), {
            innerPadding: 0,
            outerPadding: 0
        });
    }
    _filterStyle(style, state, level, stateStyle = this.stateStyle) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        (0, vutils_1.isValid)(style.innerRadius) && this.setAttribute("innerRadius", this._styleConvert(style.innerRadius), state, level, this._cacheStateStyle), 
        (0, vutils_1.isValid)(style.outerRadius) && this.setAttribute("outerRadius", this._styleConvert(style.outerRadius), state, level, this._cacheStateStyle);
        const innerPadding = null !== (_a = style.innerPadding) && void 0 !== _a ? _a : null === (_c = null === (_b = stateStyle[state]) || void 0 === _b ? void 0 : _b.innerPadding) || void 0 === _c ? void 0 : _c.style, outerPadding = null !== (_d = style.outerPadding) && void 0 !== _d ? _d : null === (_f = null === (_e = stateStyle[state]) || void 0 === _e ? void 0 : _e.outerPadding) || void 0 === _f ? void 0 : _f.style, innerRadius = null !== (_k = null !== (_g = style.innerRadius) && void 0 !== _g ? _g : null === (_j = null === (_h = this._cacheStateStyle[state]) || void 0 === _h ? void 0 : _h.innerRadius) || void 0 === _j ? void 0 : _j.style) && void 0 !== _k ? _k : null === (_m = null === (_l = stateStyle[state]) || void 0 === _l ? void 0 : _l.innerRadius) || void 0 === _m ? void 0 : _m.style, outerRadius = null !== (_r = null !== (_o = style.outerRadius) && void 0 !== _o ? _o : null === (_q = null === (_p = this._cacheStateStyle[state]) || void 0 === _p ? void 0 : _p.outerRadius) || void 0 === _q ? void 0 : _q.style) && void 0 !== _r ? _r : null === (_t = null === (_s = stateStyle[state]) || void 0 === _s ? void 0 : _s.outerRadius) || void 0 === _t ? void 0 : _t.style;
        if (0 === innerRadius && 0 === outerRadius) return style;
        const paddingModified = (0, vutils_1.isValid)(style.innerPadding) && (0, vutils_1.isValid)(innerRadius) || (0, 
        vutils_1.isValid)(style.outerPadding) && (0, vutils_1.isValid)(outerRadius), radiusModified = (0, 
        vutils_1.isValid)(style.innerRadius) && innerPadding || (0, vutils_1.isValid)(style.outerRadius) && outerPadding;
        if (paddingModified || radiusModified) {
            const newStyle = Object.assign({}, style);
            return innerPadding && (0, vutils_1.isValid)(innerRadius) && ((0, vutils_1.isFunction)(innerRadius) ? newStyle.innerRadius = (item, ctx, opt, source) => innerRadius(item, ctx, opt, source) + ((0, 
            vutils_1.isFunction)(innerPadding) ? innerPadding(item, ctx, opt, source) : innerPadding) : (0, 
            vutils_1.isFunction)(innerPadding) ? newStyle.innerRadius = (item, ctx, opt, source) => {
                const padding = innerPadding(item, ctx, opt, source);
                return innerRadius + padding;
            } : newStyle.innerRadius = innerRadius + innerPadding), outerPadding && (0, vutils_1.isValid)(outerRadius) && ((0, 
            vutils_1.isFunction)(outerRadius) ? newStyle.outerRadius = (item, ctx, opt, source) => outerRadius(item, ctx, opt, source) - ((0, 
            vutils_1.isFunction)(outerPadding) ? outerPadding(item, ctx, opt, source) : outerPadding) : (0, 
            vutils_1.isFunction)(outerPadding) ? newStyle.outerRadius = (item, ctx, opt, source) => {
                const padding = outerPadding(item, ctx, opt, source);
                return outerRadius - padding;
            } : newStyle.outerRadius = outerRadius - outerPadding), newStyle;
        }
        return style;
    }
}

exports.ProgressArcMark = ProgressArcMark, ProgressArcMark.type = "arc", ProgressArcMark.constructorType = "progressArc";

const registerProgressArcMark = () => {
    (0, vgrammar_core_1.registerArcGraphic)(), (0, config_1.registerVGrammarArcAnimation)(), 
    factory_1.Factory.registerMark(ProgressArcMark.constructorType, ProgressArcMark);
};

exports.registerProgressArcMark = registerProgressArcMark;
//# sourceMappingURL=progress-arc.js.map
