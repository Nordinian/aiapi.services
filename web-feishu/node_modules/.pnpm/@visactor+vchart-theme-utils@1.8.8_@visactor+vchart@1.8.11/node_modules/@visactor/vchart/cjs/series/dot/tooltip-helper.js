"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.DotSeriesTooltipHelper = void 0;

const tooltip_helper_1 = require("../base/tooltip-helper"), time_1 = require("../../component/axis/cartesian/util/time"), vutils_1 = require("@visactor/vutils");

class DotSeriesTooltipHelper extends tooltip_helper_1.BaseSeriesTooltipHelper {
    updateTooltipSpec() {
        var _a;
        super.updateTooltipSpec(), (0, vutils_1.isValid)(null === (_a = this.spec) || void 0 === _a ? void 0 : _a.mark) && (this.spec.mark.updateContent = (prev, datum, params) => {
            const childrenContent = [], childrenPrev = prev.filter((p => "children" === p.key));
            return childrenPrev.length > 0 && childrenPrev[0].value.forEach((element => {
                let flag = !0;
                for (const key in element) childrenContent.push({
                    shapeType: "circle",
                    hasShape: flag,
                    shapeColor: this.contentShapeColorCallback(datum[0].datum[0]),
                    shapeStroke: this.contentShapeColorCallback(datum[0].datum[0]),
                    key: key,
                    value: element[key] + ""
                }), flag = !1;
            })), prev.concat(childrenContent);
        });
    }
    getDefaultTooltipPattern(activeType) {
        return "mark" === activeType ? {
            visible: !0,
            activeType: activeType,
            title: {
                key: "event info",
                value: "event info"
            },
            content: [ {
                hasShape: !0,
                shapeType: "square",
                shapeColor: this.contentShapeColorCallback,
                shapeStroke: this.contentShapeColorCallback,
                key: datum => datum.type,
                value: datum => datum.id
            }, {
                hasShape: !0,
                shapeType: "square",
                shapeColor: this.contentShapeColorCallback,
                shapeStroke: this.contentShapeColorCallback,
                key: "event_time",
                value: datum => time_1.TimeUtil.getInstance().timeFormat("%Y%m%d", datum.event_time)
            }, {
                hasShape: !0,
                shapeType: "square",
                shapeColor: this.contentShapeColorCallback,
                shapeStroke: this.contentShapeColorCallback,
                key: "action_type",
                value: datum => datum.action_type
            }, {
                shapeType: "square",
                hasShape: !0,
                shapeColor: this.contentShapeColorCallback,
                shapeStroke: this.contentShapeColorCallback,
                key: "children",
                value: datum => datum.children
            } ],
            updateContent: (prev, datum, params) => {
                const childrenContent = [];
                return prev[3].value.forEach((element => {
                    let flag = !0;
                    for (const key in element) childrenContent.push({
                        shapeType: "circle",
                        hasShape: flag,
                        shapeColor: this.contentShapeColorCallback(datum[0].datum[0]),
                        shapeStroke: this.contentShapeColorCallback(datum[0].datum[0]),
                        key: key,
                        value: element[key] + ""
                    }), flag = !1;
                })), prev.concat(childrenContent);
            }
        } : null;
    }
}

exports.DotSeriesTooltipHelper = DotSeriesTooltipHelper;
//# sourceMappingURL=tooltip-helper.js.map
