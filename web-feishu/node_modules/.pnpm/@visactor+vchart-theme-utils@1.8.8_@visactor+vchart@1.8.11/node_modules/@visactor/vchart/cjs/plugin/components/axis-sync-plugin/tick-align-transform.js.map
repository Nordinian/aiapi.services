{"version":3,"sources":["../src/plugin/components/axis-sync-plugin/tick-align-transform.ts"],"names":[],"mappings":";;;AAEA,iEAAqE;AAO9D,MAAM,SAAS,GAAG,CAAC,IAAkB,EAAE,EAAiB,EAAE,EAAE;;IACjE,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IAED,MAAM,UAAU,GAAG,MAAA,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,UAAU,kDAAI,CAAC;IACtC,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,IAAI,CAAC;KACb;IACD,MAAM,WAAW,GAAG,MAAA,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,WAAW,kDAAI,CAAC;IACxC,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,WAAW,GAAG,MAAA,WAAW,CAAC,WAAW,EAAE,0CAAE,WAAW,EAAE,CAAC;IAC7D,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,oBAAoB,GAAG,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;IACrF,IAAI,CAAC,oBAAoB,EAAE;QACzB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,YAAY,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;IAC5C,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,UAAU,GAAG,MAAA,MAAA,UAAU,CAAC,WAAW,EAAE,0CAAE,WAAW,EAAE,0CAAE,UAAU,CAAC;IACvE,IAAI,CAAC,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,CAAA,EAAE;QACvB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,WAAW,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;IAC1C,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,YAAY,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;IAC1C,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IACtD,IAAI,WAAW,KAAK,CAAC,EAAE;QACrB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,aAAa,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC;IAC5C,MAAM,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IACzD,IAAI,WAAW,KAAK,CAAC,EAAE;QACrB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,QAAQ,GAAa,UAAU,CAAC,GAAG,CAAC,CAAC,CAAoB,EAAE,EAAE;QACjE,MAAM,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;QAC1D,OAAO,YAAY,GAAG,OAAO,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IACH,OAAO,IAAA,0CAAuB,EAAC,QAAQ,CAAC,CAAC;AAC3C,CAAC,CAAC;AAjDW,QAAA,SAAS,aAiDpB","file":"tick-align-transform.js","sourcesContent":["import type { Datum } from '../../../typings';\nimport type { CartesianAxis } from '../../../component';\nimport { convertDomainToTickData } from '@visactor/vutils-extension';\n\nexport interface ITickAlignOpt {\n  targetAxis: () => CartesianAxis;\n  currentAxis: () => CartesianAxis;\n}\n\nexport const tickAlign = (data: Array<Datum>, op: ITickAlignOpt) => {\n  if (!data) {\n    return data;\n  }\n  // check align enable\n  const targetAxis = op?.targetAxis?.();\n  if (!targetAxis) {\n    return data;\n  }\n  const currentAxis = op?.currentAxis?.();\n  if (!currentAxis) {\n    return data;\n  }\n  const currentData = currentAxis.getTickData()?.getDataView();\n  if (!currentData) {\n    return data;\n  }\n  const currentTickTransform = currentData.transformsArr.find(t => t.type === 'ticks');\n  if (!currentTickTransform) {\n    return data;\n  }\n  const currentScale = currentAxis.getScale();\n  if (!currentScale) {\n    return data;\n  }\n  const targetData = targetAxis.getTickData()?.getDataView()?.latestData;\n  if (!targetData?.length) {\n    return data;\n  }\n  const targetScale = targetAxis.getScale();\n  if (!targetScale) {\n    return data;\n  }\n  const targetDomain = targetScale.domain();\n  const targetRange = targetDomain[1] - targetDomain[0];\n  if (targetRange === 0) {\n    return data;\n  }\n  const currentDomain = currentScale.domain();\n  const currentRange = currentDomain[1] - currentDomain[0];\n  if (targetRange === 0) {\n    return data;\n  }\n  // make the tickData of the current axis consistent with the tickData of the target axis\n  const newTicks: number[] = targetData.map((d: { value: number }) => {\n    const percent = (d.value - targetDomain[0]) / targetRange;\n    return currentRange * percent + currentDomain[0];\n  });\n  return convertDomainToTickData(newTicks);\n};\n"]}