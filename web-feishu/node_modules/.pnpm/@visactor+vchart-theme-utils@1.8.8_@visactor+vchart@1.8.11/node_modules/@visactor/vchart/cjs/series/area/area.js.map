{"version":3,"sources":["../src/series/area/area.ts"],"names":[],"mappings":"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","file":"area.js","sourcesContent":["import type { DataView } from '@visactor/vdataset';\nimport { isValid, isArray } from '@visactor/vutils';\n/* eslint-disable no-duplicate-imports */\nimport { LineLikeSeriesMixin } from '../mixin/line-mixin';\nimport type { IAreaMark } from '../../mark/area';\nimport { Direction } from '../../typings/space';\nimport { CartesianSeries } from '../cartesian/cartesian';\nimport { AttributeLevel } from '../../constant';\nimport type { Datum, ConvertToMarkStyleSpec, IAreaMarkSpec, InterpolateType } from '../../typings';\nimport { mergeSpec } from '../../util/spec/merge-spec';\nimport { valueInScaleRange } from '../../util/scale';\nimport type { SeriesMarkMap } from '../interface';\nimport { SeriesMarkNameEnum, SeriesTypeEnum } from '../interface/type';\nimport { mixin } from '@visactor/vutils';\nimport { animationConfig, userAnimationConfig } from '../../animation/utils';\nimport { DEFAULT_SMOOTH_INTERPOLATE } from '../../typings/interpolate';\nimport type { IAreaSeriesSpec } from './interface';\nimport type { IMarkAnimateSpec } from '../../animation/spec';\nimport { registerLineMark } from '../../mark/line';\nimport { registerAreaMark } from '../../mark/area';\nimport { registerSymbolMark } from '../../mark/symbol';\nimport { AreaSeriesTooltipHelper } from './tooltip-helpter';\nimport { areaSeriesMark } from './constant';\nimport { Factory } from '../../core/factory';\nimport { registerAreaAnimation } from './animation';\nimport type { IMark } from '../../mark/interface';\nimport { registerSampleTransform, registerMarkOverlapTransform } from '@visactor/vgrammar-core';\nimport { AreaSeriesSpecTransformer } from './area-transformer';\nimport { getGroupAnimationParams } from '../util/utils';\n\nexport interface AreaSeries<T extends IAreaSeriesSpec = IAreaSeriesSpec>\n  extends Pick<\n      LineLikeSeriesMixin,\n      | 'initLineMark'\n      | 'initSymbolMark'\n      | 'initLabelMarkStyle'\n      | 'initLineMarkStyle'\n      | 'initSymbolMarkStyle'\n      | 'encodeDefined'\n      | '_lineMark'\n      | '_symbolMark'\n      | 'addSamplingCompile'\n      | 'addOverlapCompile'\n      | 'reCompileSampling'\n      | 'initLineLabelMarkStyle'\n    >,\n    CartesianSeries<T> {}\n\nexport class AreaSeries<T extends IAreaSeriesSpec = IAreaSeriesSpec> extends CartesianSeries<T> {\n  static readonly type: string = SeriesTypeEnum.area;\n  type = SeriesTypeEnum.area;\n\n  static readonly mark: SeriesMarkMap = areaSeriesMark;\n  static readonly transformerConstructor = AreaSeriesSpecTransformer as any;\n  readonly transformerConstructor = AreaSeriesSpecTransformer;\n\n  protected _areaMark!: IAreaMark;\n  protected _supportStack: boolean = true;\n  protected _sortDataByAxis: boolean = false;\n\n  initMark(): void {\n    const progressive = {\n      progressiveStep: this._spec.progressiveStep,\n      progressiveThreshold: this._spec.progressiveThreshold,\n      large: this._spec.large,\n      largeThreshold: this._spec.largeThreshold\n    };\n\n    const isAreaVisible = this._spec.area?.visible !== false && this._spec.area?.style?.visible !== false;\n\n    const seriesMark = this._spec.seriesMark ?? 'area';\n    // area\n    this._areaMark = this._createMark(AreaSeries.mark.area, {\n      groupKey: this._seriesField,\n      defaultMorphElementKey: this.getDimensionField()[0],\n      progressive,\n      isSeriesMark: isAreaVisible && seriesMark !== 'point',\n      customShape: this._spec.area?.customShape\n    }) as IAreaMark;\n    this.initSymbolMark(progressive, seriesMark === 'point');\n  }\n\n  initMarkStyle(): void {\n    // FIXME 是不是应该把curveType提前到上层配置\n    // 不允许area和line的curveType不一致\n    const userCurveType = (this.getSpec().area?.style?.curveType ??\n      this.getSpec().line?.style?.curveType) as InterpolateType;\n    const curveType =\n      userCurveType === DEFAULT_SMOOTH_INTERPOLATE\n        ? this._direction === Direction.vertical\n          ? 'monotoneX'\n          : 'monotoneY'\n        : userCurveType;\n\n    // area\n    const areaMark = this._areaMark;\n    if (areaMark) {\n      if (this._direction === Direction.vertical) {\n        this.setMarkStyle(\n          this._areaMark,\n          {\n            x: this.dataToPositionX.bind(this),\n            y1: (datum: Datum) => {\n              return valueInScaleRange(this.dataToPositionY1(datum), this._yAxisHelper?.getScale?.(0));\n            },\n            y: this.dataToPositionY.bind(this),\n            z: this._fieldZ ? this.dataToPositionZ.bind(this) : null\n          },\n          'normal',\n          AttributeLevel.Series\n        );\n      } else {\n        this.setMarkStyle(\n          this._areaMark,\n          {\n            x: this.dataToPositionX.bind(this),\n            x1: (datum: Datum) => {\n              return valueInScaleRange(this.dataToPositionX1(datum), this._xAxisHelper?.getScale?.(0));\n            },\n            y: this.dataToPositionY.bind(this),\n            z: this._fieldZ ? this.dataToPositionZ.bind(this) : null,\n            orient: this._direction\n          },\n          'normal',\n          AttributeLevel.Series\n        );\n      }\n      this.setMarkStyle(\n        areaMark,\n        {\n          fill: this.getColorAttribute(),\n          stroke: this.getColorAttribute()\n        },\n        'normal',\n        AttributeLevel.Series\n      );\n      if (this._invalidType !== 'zero') {\n        this.setMarkStyle(\n          areaMark,\n          {\n            defined: this._getInvalidDefined,\n            connectedType: this._getInvalidConnectType()\n          },\n          'normal',\n          AttributeLevel.Series\n        );\n      }\n      this.setMarkStyle(\n        areaMark,\n        {\n          curveType\n        },\n        'normal',\n        AttributeLevel.Built_In\n      );\n      this._trigger.registerMark(areaMark);\n\n      // change stroke to area stoke = [lineStroke,false,false,false]\n      Object.keys(areaMark.stateStyle).forEach(state => {\n        if (areaMark.stateStyle[state].stroke) {\n          areaMark.setPostProcess(\n            'stroke',\n            result => {\n              return [result, false, false, false];\n            },\n            state\n          );\n        }\n      });\n    }\n\n    this.initLineMarkStyle(this._direction, userCurveType);\n    this.initSymbolMarkStyle();\n  }\n\n  initAnimation() {\n    const areaAnimationParams = { direction: this.direction };\n    const appearPreset = (this._spec.animationAppear as IMarkAnimateSpec<string>)?.preset;\n    if (this._lineMark) {\n      this._lineMark.setAnimationConfig(\n        animationConfig(\n          Factory.getAnimationInKey('line')?.(areaAnimationParams, appearPreset),\n          userAnimationConfig(SeriesMarkNameEnum.line, this._spec, this._markAttributeContext)\n        )\n      );\n    }\n\n    if (this._areaMark) {\n      this._areaMark.setAnimationConfig(\n        animationConfig(\n          Factory.getAnimationInKey('area')?.(areaAnimationParams, appearPreset),\n          userAnimationConfig(SeriesMarkNameEnum.area, this._spec, this._markAttributeContext)\n        )\n      );\n    }\n\n    if (this._symbolMark) {\n      const animationParams = getGroupAnimationParams(this);\n      this._symbolMark.setAnimationConfig(\n        animationConfig(\n          Factory.getAnimationInKey('scaleInOut')?.(),\n          userAnimationConfig(SeriesMarkNameEnum.point, this._spec, this._markAttributeContext),\n          animationParams\n        )\n      );\n    }\n  }\n\n  protected initTooltip() {\n    this._tooltipHelper = new AreaSeriesTooltipHelper(this);\n    this._areaMark && this._tooltipHelper.activeTriggerSet.dimension.add(this._areaMark);\n    this._lineMark && this._tooltipHelper.activeTriggerSet.dimension.add(this._lineMark);\n    this._symbolMark && this._tooltipHelper.activeTriggerSet.mark.add(this._symbolMark);\n  }\n\n  viewDataStatisticsUpdate(d: DataView) {\n    super.viewDataStatisticsUpdate(d);\n    this.encodeDefined(this._areaMark, 'defined');\n  }\n\n  compile(): void {\n    super.compile();\n    this.addSamplingCompile();\n    this.addOverlapCompile();\n  }\n\n  getDefaultShapeType() {\n    return 'square';\n  }\n\n  getActiveMarks(): IMark[] {\n    return [this._areaMark, this._symbolMark, this._lineMark];\n  }\n\n  onLayoutEnd(ctx: any): void {\n    super.onLayoutEnd(ctx);\n    this.reCompileSampling();\n  }\n\n  getSeriesStyle(datum: Datum) {\n    return (attribute: string) => {\n      const seriesMarkType = this._spec.seriesMark ?? 'area';\n\n      let result = this._seriesMark?.getAttribute(attribute as any, datum) ?? undefined;\n      if (attribute === 'fill' && (!result || seriesMarkType === 'line')) {\n        attribute = 'stroke';\n        result = this._seriesMark?.getAttribute(attribute, datum) ?? undefined;\n      }\n      if (attribute === 'stroke' && isArray(result)) {\n        return result[0];\n      }\n      return result;\n    };\n  }\n}\n\nmixin(AreaSeries, LineLikeSeriesMixin);\n\nexport const registerAreaSeries = () => {\n  registerSampleTransform();\n  registerMarkOverlapTransform();\n  registerLineMark();\n  registerAreaMark();\n  registerSymbolMark();\n  registerAreaAnimation();\n  Factory.registerSeries(AreaSeries.type, AreaSeries);\n};\n"]}