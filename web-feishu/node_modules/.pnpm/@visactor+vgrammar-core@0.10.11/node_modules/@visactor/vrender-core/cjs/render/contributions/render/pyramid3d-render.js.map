{"version":3,"sources":["../src/render/contributions/render/pyramid3d-render.ts"],"names":[],"mappings":"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","file":"pyramid3d-render.js","sourcesContent":["import { injectable } from '../../../common/inversify-lite';\nimport { getTheme } from '../../../graphic/theme';\nimport { PYRAMID3D_NUMBER_TYPE } from '../../../graphic/constants';\nimport type {\n  IGraphicAttribute,\n  IContext2d,\n  IDirectionLight,\n  IMarkAttribute,\n  IPyramid3d,\n  IFace3d,\n  IThemeAttribute,\n  ICamera,\n  IPolygonItem,\n  IGraphicRender,\n  IDrawContext,\n  IGraphicRenderDrawParams,\n  IRenderService\n} from '../../../interface';\nimport { fillVisible, runFill, runStroke, strokeVisible } from './utils';\nimport { mat4Allocate } from '../../../allocator/matrix-allocate';\nimport { BaseRender } from './base-render';\nimport { ColorStore, ColorType } from '../../../color-string';\n\n@injectable()\nexport class DefaultCanvasPyramid3dRender extends BaseRender<IPyramid3d> implements IGraphicRender {\n  type = 'pyramid3d';\n  numberType: number = PYRAMID3D_NUMBER_TYPE;\n  declare z: number;\n\n  drawShape(\n    pyramid3d: IPyramid3d,\n    context: IContext2d,\n    x: number,\n    y: number,\n    drawContext: IDrawContext,\n    params?: IGraphicRenderDrawParams,\n    fillCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean,\n    strokeCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean\n  ) {\n    // const rectAttribute = graphicService.themeService.getCurrentTheme().rectAttribute;\n    const pyramidAttribute = getTheme(pyramid3d, params?.theme).polygon;\n    const {\n      fill = pyramidAttribute.fill,\n      stroke = pyramidAttribute.stroke,\n      face = [true, true, true, true, true, true]\n    } = pyramid3d.attribute;\n\n    const z = this.z ?? 0;\n\n    const data = this.valid(pyramid3d, pyramidAttribute, fillCb, strokeCb);\n    if (!data) {\n      return;\n    }\n    // const { fVisible, sVisible, doFill, doStroke } = data;\n\n    const { light, camera } = drawContext.stage || {};\n\n    const face3d = pyramid3d.findFace();\n\n    if (fill !== false) {\n      context.setCommonStyle(pyramid3d, pyramid3d.attribute, x, y, pyramidAttribute);\n      let fc = fill;\n      if (typeof fc !== 'string') {\n        fc = 'black';\n      }\n      this.fill(x, y, z, face3d, face, fc, context, light, camera, pyramid3d, pyramidAttribute, fillCb);\n    }\n    if (stroke !== false) {\n      context.setStrokeStyle(pyramid3d, pyramid3d.attribute, x, y, pyramidAttribute);\n      this.stroke(x, y, z, face3d, context);\n    }\n  }\n\n  stroke(x: number, y: number, z: number, face3d: IFace3d, context: IContext2d) {\n    const vertices = face3d.vertices;\n    face3d.edges.forEach(p => {\n      const p1 = vertices[p[0]];\n      const p2 = vertices[p[1]];\n      const v1 = {\n        x: x + p1[0],\n        y: y + p1[1],\n        z: z + p1[2]\n      };\n      const v2 = {\n        x: x + p2[0],\n        y: y + p2[1],\n        z: z + p2[2]\n      };\n      context.beginPath();\n      context.moveTo(v1.x, v1.y, v1.z);\n      context.lineTo(v2.x, v2.y, v2.z);\n      context.stroke();\n    });\n  }\n  fill(\n    x: number,\n    y: number,\n    z: number,\n    face3d: IFace3d,\n    faces: [boolean, boolean, boolean, boolean, boolean, boolean],\n    fillColor: string,\n    context: IContext2d,\n    light: IDirectionLight,\n    camera: ICamera,\n    pyramid3d: IPyramid3d,\n    pyramid3dAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n    fillCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean\n  ) {\n    const rgbArray = ColorStore.Get(fillColor as string, ColorType.Color255);\n\n    // 上下左右前后\n    // 0,1,2,3,4,5\n    const vertices = face3d.vertices;\n    // 计算每个顶点的view\n    const viewdVerticesZ = vertices.map(v => {\n      return context.view(v[0], v[1], v[2])[2];\n    });\n    // 排序\n    const sortFace: { faceIdx: number; polygon: IPolygonItem }[] = [];\n    face3d.polygons.forEach((p, i) => {\n      if (!faces[i]) {\n        return;\n      }\n      sortFace.push({\n        faceIdx: i,\n        polygon: p\n      });\n      // 设置ave_z进行排序\n      const { polygon, normal } = p;\n\n      const z1 = viewdVerticesZ[polygon[0]];\n      const z2 = viewdVerticesZ[polygon[1]];\n      const z3 = viewdVerticesZ[polygon[2]];\n      const z4 = viewdVerticesZ[polygon[3]];\n\n      p.ave_z = z1 + z2 + z3 + z4;\n    });\n    sortFace.sort((a, b) => b.polygon.ave_z - a.polygon.ave_z);\n    sortFace.forEach(item => {\n      const { polygon, normal } = item.polygon;\n\n      const p1 = vertices[polygon[0]];\n      const p2 = vertices[polygon[1]];\n      const p3 = vertices[polygon[2]];\n      const p4 = vertices[polygon[3]];\n\n      const v1 = {\n        x: x + p1[0],\n        y: y + p1[1],\n        z: z + p1[2]\n      };\n      const v2 = {\n        x: x + p2[0],\n        y: y + p2[1],\n        z: z + p2[2]\n      };\n      const v3 = {\n        x: x + p3[0],\n        y: y + p3[1],\n        z: z + p3[2]\n      };\n      const v4 = {\n        x: x + p4[0],\n        y: y + p4[1],\n        z: z + p4[2]\n      };\n      context.beginPath();\n      context.moveTo(v1.x, v1.y, v1.z);\n      context.lineTo(v2.x, v2.y, v2.z);\n      context.lineTo(v3.x, v3.y, v3.z);\n      context.lineTo(v4.x, v4.y, v4.z);\n      context.closePath();\n      if (fillCb) {\n        fillCb(context, pyramid3d.attribute, pyramid3dAttribute);\n      } else {\n        context.fillStyle = light ? light.computeColor(normal, rgbArray as any) : fillColor;\n        context.fill();\n      }\n    });\n  }\n\n  draw(pyramid3d: IPyramid3d, renderService: IRenderService, drawContext: IDrawContext) {\n    const pyramid3dAttribute = getTheme(pyramid3d).polygon;\n    this._draw(pyramid3d, pyramid3dAttribute, false, drawContext);\n  }\n}\n"]}