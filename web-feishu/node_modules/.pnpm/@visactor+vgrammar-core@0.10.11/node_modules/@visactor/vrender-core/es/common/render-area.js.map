{"version":3,"sources":["../src/common/render-area.ts"],"names":[],"mappings":"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","file":"render-area.js","sourcesContent":["import type { IPoint } from '@visactor/vutils';\nimport { abs } from '@visactor/vutils';\nimport type { IAreaCacheItem, ICubicBezierCurve, ICurve, IDirection, ILineCurve, IPath2D } from '../interface';\nimport { Direction } from './enums';\nimport { divideCubic } from './segment/curve/cubic-bezier';\nimport { divideLinear } from './segment/curve/line';\nimport { drawSegItem } from './render-utils';\n\n/**\n * 绘制连续的线段\n * 绘制长度为总长度percent的path，drawDirection为绘制的方向，也就是percent的方向\n * @param path\n * @param segPath\n * @param percent\n * @param drawDirection 绘制的方向，用于使用percent绘制\n * @param line 用于获取line相关属性\n */\nexport function drawAreaSegments(\n  path: IPath2D,\n  segPath: IAreaCacheItem,\n  percent: number,\n  params?: {\n    offsetX?: number;\n    offsetY?: number;\n    offsetZ?: number;\n    direction?: IDirection;\n    drawConnect?: boolean; // 是否是绘制connect区域的效果\n    mode?: 'none' | 'connect' | 'zero';\n    zeroX?: number;\n    zeroY?: number;\n  }\n) {\n  const { drawConnect = false, mode = 'none' } = params || {};\n  if (drawConnect && mode === 'none') {\n    return;\n  }\n  // let needMoveTo: boolean = true;\n  const { top, bottom } = segPath;\n  // 如果top和bottom的curves数量不同，那么就跳过\n  if (top.curves.length !== bottom.curves.length) {\n    return;\n  }\n  if (percent >= 1) {\n    const topList: ICurve<IPoint>[] = [];\n    const bottomList: ICurve<IPoint>[] = [];\n    let lastDefined: boolean = true;\n    if (drawConnect) {\n      let defined0 = true;\n      let lastCurve: ICurve<IPoint>;\n      let lastBottomCurve: ICurve<IPoint>;\n      const n = top.curves.length;\n      top.curves.forEach((curve, i) => {\n        // step的逻辑\n        const bototmCurve = bottom.curves[n - i - 1];\n        let currentTopCurve = curve;\n        let currentBottomCurve = bototmCurve;\n        if (curve.originP1 === curve.originP2) {\n          lastCurve = curve;\n          lastBottomCurve = bototmCurve;\n          return;\n        }\n        if (lastCurve && lastCurve.originP1 === lastCurve.originP2) {\n          currentTopCurve = lastCurve;\n          currentBottomCurve = lastBottomCurve;\n        }\n        if (curve.defined) {\n          // 非法变合法需要lineTo，合法变非法需要moveTo，初始非法需要moveTo\n          if (!defined0) {\n            topList.push(currentTopCurve);\n            bottomList.push(currentBottomCurve);\n            drawAreaConnectBlock(path, topList, bottomList, params);\n            topList.length = 0;\n            bottomList.length = 0;\n            defined0 = !defined0;\n          }\n        } else {\n          // 找到合法的点\n          const { originP1, originP2 } = curve;\n          let validTopCurve: ICurve<IPoint>;\n          let validBottomCurve: ICurve<IPoint>;\n          if (originP1 && originP1.defined !== false) {\n            validTopCurve = currentTopCurve;\n            validBottomCurve = currentBottomCurve;\n          } else if (originP1 && originP2.defined !== false) {\n            validTopCurve = curve;\n            validBottomCurve = bototmCurve;\n          }\n          // 合法/（初始）变非法，moveTo\n          if (defined0) {\n            defined0 = !defined0;\n            topList.push(validTopCurve || curve);\n            bottomList.push(validBottomCurve || bototmCurve);\n          } else {\n            // 非法变非法/合法，看情况要不要lineTo\n            if (validTopCurve) {\n              // 非法变合法，需要lineTo\n              defined0 = !defined0;\n              topList.push(validTopCurve || curve);\n              bottomList.push(validBottomCurve || bototmCurve);\n              drawAreaConnectBlock(path, topList, bottomList, params);\n              topList.length = 0;\n              bottomList.length = 0;\n            }\n          }\n        }\n        lastCurve = curve;\n      });\n      drawAreaConnectBlock(path, topList, bottomList, params);\n    } else {\n      for (let i = 0, n = top.curves.length; i < n; i++) {\n        const topCurve = top.curves[i];\n        if (lastDefined !== topCurve.defined) {\n          if (lastDefined) {\n            drawAreaBlock(path, topList, bottomList, params);\n            topList.length = 0;\n            bottomList.length = 0;\n          } else {\n            topList.push(topCurve);\n            bottomList.push(bottom.curves[n - i - 1]);\n          }\n          lastDefined = !lastDefined;\n        } else {\n          if (lastDefined) {\n            topList.push(topCurve);\n            bottomList.push(bottom.curves[n - i - 1]);\n          }\n        }\n      }\n      drawAreaBlock(path, topList, bottomList, params);\n    }\n\n    return;\n  }\n  if (percent <= 0) {\n    return;\n  }\n\n  let { direction } = params || {};\n  const { curves: topCurves } = top;\n  const endP = topCurves[topCurves.length - 1].p3 ?? topCurves[topCurves.length - 1].p1;\n  const xTotalLength = abs(endP.x - topCurves[0].p0.x);\n  const yTotalLength = abs(endP.y - topCurves[0].p0.y);\n  direction = direction ?? (xTotalLength > yTotalLength ? Direction.ROW : Direction.COLUMN);\n  if (!Number.isFinite(xTotalLength)) {\n    direction = Direction.COLUMN;\n  }\n  if (!Number.isFinite(yTotalLength)) {\n    direction = Direction.ROW;\n  }\n\n  // x和y必须始终保持同方向\n  // 整个线段的总长度（基于水平、垂直方向）\n  const totalLength: number = direction === Direction.ROW ? xTotalLength : yTotalLength;\n\n  // 总需要绘制的长度\n  const totalDrawLength = percent * totalLength;\n  // 直到上次绘制的长度\n  let drawedLengthUntilLast = 0;\n  let lastDefined: boolean = true;\n  const topList: ICurve<IPoint>[] = [];\n  const bottomList: ICurve<IPoint>[] = [];\n  let defined0 = true;\n  let lastTopCurve: ICurve<IPoint>;\n  let lastBottomCurve: ICurve<IPoint>;\n  for (let i = 0, n = top.curves.length; i < n; i++) {\n    const topCurve = top.curves[i];\n    const curCurveLength = topCurve.getLength(direction);\n    const percent = (totalDrawLength - drawedLengthUntilLast) / curCurveLength;\n    if (percent < 0) {\n      break;\n    }\n    drawedLengthUntilLast += curCurveLength;\n\n    if (drawConnect) {\n      // step的逻辑\n      const bototmCurve = bottom.curves[n - i - 1];\n      let currentTopCurve = topCurve;\n      let currentBottomCurve = bototmCurve;\n      if (topCurve.originP1 === topCurve.originP2) {\n        lastTopCurve = topCurve;\n        lastBottomCurve = bototmCurve;\n        continue;\n      }\n      if (lastTopCurve && lastTopCurve.originP1 === lastTopCurve.originP2) {\n        currentTopCurve = lastTopCurve;\n        currentBottomCurve = lastBottomCurve;\n      }\n      if (topCurve.defined) {\n        // 非法变合法需要lineTo，合法变非法需要moveTo，初始非法需要moveTo\n        if (!defined0) {\n          topList.push(currentTopCurve);\n          bottomList.push(currentBottomCurve);\n          drawAreaConnectBlock(path, topList, bottomList, params);\n          topList.length = 0;\n          bottomList.length = 0;\n          defined0 = !defined0;\n        }\n      } else {\n        // 找到合法的点\n        const { originP1, originP2 } = topCurve;\n        let validTopCurve: ICurve<IPoint>;\n        let validBottomCurve: ICurve<IPoint>;\n        if (originP1 && originP1.defined !== false) {\n          validTopCurve = currentTopCurve;\n          validBottomCurve = currentBottomCurve;\n        } else if (originP1 && originP2.defined !== false) {\n          validTopCurve = topCurve;\n          validBottomCurve = bototmCurve;\n        }\n        // 合法/（初始）变非法，moveTo\n        if (defined0) {\n          defined0 = !defined0;\n          topList.push(validTopCurve || topCurve);\n          bottomList.push(validBottomCurve || bototmCurve);\n        } else {\n          // 非法变非法/合法，看情况要不要lineTo\n          if (validTopCurve) {\n            // 非法变合法，需要lineTo\n            defined0 = !defined0;\n            topList.push(validTopCurve || topCurve);\n            bottomList.push(validBottomCurve || bototmCurve);\n            drawAreaConnectBlock(path, topList, bottomList, params);\n            topList.length = 0;\n            bottomList.length = 0;\n          }\n        }\n      }\n      lastTopCurve = topCurve;\n      // drawAreaBlock(path, topList, bottomList, params);\n    } else {\n      let tc: ICurve<IPoint> | null = null;\n      let bc: ICurve<IPoint> | null = null;\n      if (lastDefined !== topCurve.defined) {\n        if (lastDefined) {\n          drawAreaBlock(path, topList, bottomList, params);\n          topList.length = 0;\n          bottomList.length = 0;\n        } else {\n          tc = topCurve;\n          bc = bottom.curves[n - i - 1];\n        }\n        lastDefined = !lastDefined;\n      } else {\n        if (lastDefined) {\n          tc = topCurve;\n          bc = bottom.curves[n - i - 1];\n        }\n      }\n\n      if (tc && bc) {\n        if (percent < 1) {\n          if (tc.p2 && tc.p3) {\n            tc = divideCubic(tc as ICubicBezierCurve, percent)[0];\n          } else {\n            tc = divideLinear(tc as ILineCurve, percent)[0];\n          }\n          if (bc.p2 && bc.p3) {\n            bc = divideCubic(bc as ICubicBezierCurve, 1 - percent)[1];\n          } else {\n            bc = divideLinear(bc as ILineCurve, 1 - percent)[1];\n          }\n        }\n        tc.defined = lastDefined;\n        bc.defined = lastDefined;\n        topList.push(tc);\n        bottomList.push(bc);\n      }\n\n      tc = null;\n      bc = null;\n    }\n  }\n\n  if (drawConnect) {\n    drawAreaConnectBlock(path, topList, bottomList, params);\n  } else {\n    drawAreaBlock(path, topList, bottomList, params);\n  }\n\n  // const totalLength = segPath.tryUpdateLength();\n\n  // // 直到上次绘制的长度\n  // let drawedLengthUntilLast = 0;\n  // for (let i = 0, n = curves.length; i < n; i++) {\n  //   const curve = curves[i];\n  //   const curCurveLength = curve.getLength();\n  //   const _p = (totalDrawLength - drawedLengthUntilLast) / curCurveLength;\n  //   drawedLengthUntilLast += curCurveLength;\n  //   if (_p < 0) {\n  //     break;\n  //   }\n\n  //   // 跳过这个点\n  //   if (!curve.defined()) {\n  //     needMoveTo = true;\n  //     continue;\n  //   }\n  //   if (needMoveTo) {\n  //     path.moveTo(curve.p0.x + offsetX, curve.p0.y + offsetY);\n  //   }\n  //   drawSegItem(path, curve, min(_p, 1), params);\n  //   needMoveTo = false;\n  // }\n}\n\nfunction drawAreaConnectBlock(\n  path: IPath2D,\n  topList: ICurve<IPoint>[],\n  bottomList: ICurve<IPoint>[],\n  params?: {\n    offsetX?: number;\n    offsetY?: number;\n    offsetZ?: number;\n    mode?: 'none' | 'connect' | 'zero';\n    zeroX?: number;\n    zeroY?: number;\n  }\n) {\n  if (topList.length < 2) {\n    return;\n  }\n  const { offsetX = 0, offsetY = 0, offsetZ = 0, mode } = params || {};\n  let curve = topList[0];\n  // mode不支持zero\n  path.moveTo(curve.p0.x + offsetX, curve.p0.y + offsetY, offsetZ);\n  curve = topList[topList.length - 1];\n  let end = curve.p3 || curve.p1;\n  path.lineTo(end.x + offsetX, end.y + offsetY, offsetZ);\n\n  curve = bottomList[bottomList.length - 1];\n  path.lineTo(curve.p0.x + offsetX, curve.p0.y + offsetY, offsetZ);\n  curve = bottomList[0];\n  end = curve.p3 || curve.p1;\n  path.lineTo(end.x + offsetX, end.y + offsetY, offsetZ);\n\n  path.closePath();\n}\n\nfunction drawAreaBlock(\n  path: IPath2D,\n  topList: ICurve<IPoint>[],\n  bottomList: ICurve<IPoint>[],\n  params?: {\n    offsetX?: number;\n    offsetY?: number;\n    offsetZ?: number;\n  }\n) {\n  const { offsetX = 0, offsetY = 0, offsetZ = 0 } = params || {};\n  let needMoveTo = true;\n  topList.forEach(curve => {\n    // 跳过这个点\n    if (!curve.defined) {\n      needMoveTo = true;\n      return;\n    }\n    if (needMoveTo) {\n      path.moveTo(curve.p0.x + offsetX, curve.p0.y + offsetY, offsetZ);\n    }\n    drawSegItem(path, curve, 1, params);\n    needMoveTo = false;\n  });\n  needMoveTo = true;\n  for (let i = bottomList.length - 1; i >= 0; i--) {\n    const curve = bottomList[i];\n    // 跳过这个点\n    if (!curve.defined) {\n      needMoveTo = true;\n      continue;\n    }\n    if (needMoveTo) {\n      // bottom需要直接line绘制\n      path.lineTo(curve.p0.x + offsetX, curve.p0.y + offsetY, offsetZ);\n    }\n    drawSegItem(path, curve, 1, params);\n    needMoveTo = false;\n  }\n  path.closePath();\n}\n"]}