import { application } from "../application";

export class ResourceLoader {
    static GetImage(url, mark) {
        var _a;
        let data = ResourceLoader.cache.get(url);
        data ? "fail" === data.loadState ? application.global.getRequestAnimationFrame()((() => {
            mark.imageLoadFail(url);
        })) : "init" === data.loadState || "loading" === data.loadState ? null === (_a = data.waitingMark) || void 0 === _a || _a.push(mark) : mark && mark.imageLoadSuccess(url, data.data) : (data = {
            type: "image",
            loadState: "init"
        }, ResourceLoader.cache.set(url, data), data.dataPromise = application.global.loadImage(url), 
        data.dataPromise ? (data.waitingMark = [ mark ], data.dataPromise.then((res => {
            var _a;
            data.loadState = (null == res ? void 0 : res.data) ? "success" : "fail", data.data = null == res ? void 0 : res.data, 
            null === (_a = data.waitingMark) || void 0 === _a || _a.map(((mark, index) => {
                (null == res ? void 0 : res.data) ? (data.loadState = "success", data.data = res.data, 
                mark.imageLoadSuccess(url, res.data)) : (data.loadState = "fail", mark.imageLoadFail(url));
            }));
        }))) : (data.loadState = "fail", mark.imageLoadFail(url)));
    }
    static GetSvg(svgStr, mark) {
        var _a;
        let data = ResourceLoader.cache.get(svgStr);
        data ? "fail" === data.loadState ? application.global.getRequestAnimationFrame()((() => {
            mark.imageLoadFail(svgStr);
        })) : "init" === data.loadState || "loading" === data.loadState ? null === (_a = data.waitingMark) || void 0 === _a || _a.push(mark) : mark && application.global.getRequestAnimationFrame()((() => {
            mark.imageLoadSuccess(svgStr, data.data);
        })) : (data = {
            type: "image",
            loadState: "init"
        }, ResourceLoader.cache.set(svgStr, data), data.dataPromise = application.global.loadSvg(svgStr), 
        data.dataPromise ? (data.waitingMark = [ mark ], data.dataPromise.then((res => {
            var _a;
            data.loadState = (null == res ? void 0 : res.data) ? "success" : "fail", data.data = null == res ? void 0 : res.data, 
            null === (_a = data.waitingMark) || void 0 === _a || _a.map(((mark, index) => {
                (null == res ? void 0 : res.data) ? (data.loadState = "success", data.data = res.data, 
                mark.imageLoadSuccess(svgStr, res.data)) : (data.loadState = "fail", mark.imageLoadFail(svgStr));
            }));
        }))) : (data.loadState = "fail", mark.imageLoadFail(svgStr)));
    }
    static GetFile(url, type) {
        let data = ResourceLoader.cache.get(url);
        return data ? "init" === data.loadState || "fail" === data.loadState ? Promise.reject() : "loading" === data.loadState ? data.dataPromise.then((data => data.data)) : Promise.resolve(data.data) : (data = {
            type: type,
            loadState: "init"
        }, ResourceLoader.cache.set(url, data), "arrayBuffer" === type ? data.dataPromise = application.global.loadArrayBuffer(url) : "blob" === type ? data.dataPromise = application.global.loadBlob(url) : "json" === type && (data.dataPromise = application.global.loadJson(url)), 
        data.dataPromise.then((data => data.data)));
    }
}

ResourceLoader.cache = new Map;
//# sourceMappingURL=loader.js.map
