{"version":3,"sources":["../src/symlog-scale.ts"],"names":[],"mappings":"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","file":"symlog-scale.js","sourcesContent":["import type { ContinuousScaleType, NiceOptions, NiceType } from './interface';\nimport { LinearScale } from './linear-scale';\nimport { ScaleEnum } from './type';\nimport {\n  d3TicksForLog,\n  forceTicksBaseTransform,\n  parseNiceOptions,\n  tickIncrement,\n  ticksBaseTransform\n} from './utils/tick-sample';\nimport { symlog, symexp, nice } from './utils/utils';\n\nexport class SymlogScale extends LinearScale {\n  readonly type: ContinuousScaleType = ScaleEnum.Symlog;\n\n  _const: number;\n\n  constructor() {\n    super(symlog(1), symexp(1));\n    this._const = 1;\n  }\n\n  clone(): SymlogScale {\n    return new SymlogScale()\n      .domain(this._domain, true)\n      .range(this._range, true)\n      .unknown(this._unknown)\n      .clamp(this.clamp(), null, true)\n      .interpolate(this._interpolate, true)\n      .constant(this._const) as SymlogScale;\n  }\n\n  constant(): number;\n  constant(_: number, slience?: boolean): this;\n  constant(_?: number, slience?: boolean): this | number {\n    if (!arguments.length) {\n      return this._const;\n    }\n\n    this._const = _;\n    this.transformer = symlog(_);\n    this.untransformer = symexp(_);\n\n    return this.rescale(slience);\n  }\n\n  d3Ticks(count: number = 10, options?: { noDecimals?: boolean }) {\n    const d = this.domain();\n    const u = d[0];\n    const v = d[d.length - 1];\n    return d3TicksForLog(u, v, count, this._const, this.transformer, this.untransformer, options);\n  }\n\n  ticks(count: number = 10) {\n    // return this.d3Ticks(count);\n    const d = this.calculateVisibleDomain(this._range);\n    return ticksBaseTransform(d[0], d[d.length - 1], count, this._const, this.transformer, this.untransformer);\n  }\n\n  /**\n   * 生成tick数组，这个tick数组的长度就是count的长度\n   * @param count\n   */\n  forceTicks(count: number = 10): any[] {\n    const d = this.calculateVisibleDomain(this._range);\n    return forceTicksBaseTransform(d[0], d[d.length - 1], count, this.transformer, this.untransformer);\n  }\n\n  /**\n   * 基于给定step的ticks数组生成\n   * @param step\n   */\n  stepTicks(step: number): any[] {\n    const d = this.calculateVisibleDomain(this._range);\n    return forceTicksBaseTransform(d[0], d[d.length - 1], step, this.transformer, this.untransformer);\n  }\n\n  nice(count: number = 10, option?: NiceOptions): this {\n    const originalDomain = this._domain;\n    let niceMinMax: number[] = [];\n    let niceType: NiceType = null;\n\n    if (option) {\n      const res = parseNiceOptions(originalDomain, option);\n      niceMinMax = res.niceMinMax;\n      this._domainValidator = res.domainValidator;\n\n      niceType = res.niceType;\n\n      if (res.niceDomain) {\n        this._niceDomain = res.niceDomain;\n        this.rescale();\n        return this;\n      }\n    } else {\n      niceType = 'all';\n    }\n\n    if (niceType) {\n      const niceDomain = nice(originalDomain.slice(), {\n        floor: (x: number) => Math.floor(x),\n        ceil: (x: number) => Math.ceil(x)\n      });\n\n      if (niceType === 'min') {\n        niceDomain[niceDomain.length - 1] = niceMinMax[1] ?? niceDomain[niceDomain.length - 1];\n      } else if (niceType === 'max') {\n        niceDomain[0] = niceMinMax[0] ?? niceDomain[0];\n      }\n\n      this._niceDomain = niceDomain as number[];\n      this.rescale();\n      return this;\n    }\n\n    return this;\n  }\n\n  /**\n   * 只对min区间进行nice\n   * 如果保持某一边界的值，就很难有好的nice效果，所以这里实现就是nice之后还原固定的边界值\n   */\n  niceMin(): this {\n    const maxD = this._domain[this._domain.length - 1];\n    this.nice();\n    const niceDomain = this._domain.slice();\n\n    if (this._domain) {\n      niceDomain[niceDomain.length - 1] = maxD;\n      this._niceDomain = niceDomain;\n      this.rescale();\n    }\n\n    return this;\n  }\n\n  /**\n   * 只对max区间进行nice\n   * 如果保持某一边界的值，就很难有好的nice效果，所以这里实现就是nice之后还原固定的边界值\n   */\n  niceMax(): this {\n    const minD = this._domain[0];\n    this.nice();\n    const niceDomain = this._domain.slice();\n\n    if (this._domain) {\n      niceDomain[0] = minD;\n      this._niceDomain = niceDomain;\n      this.rescale();\n    }\n\n    return this;\n  }\n}\n"]}