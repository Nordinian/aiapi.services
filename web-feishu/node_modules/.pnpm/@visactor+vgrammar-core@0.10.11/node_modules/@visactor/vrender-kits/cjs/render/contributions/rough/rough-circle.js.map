{"version":3,"sources":["../src/render/contributions/rough/rough-circle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAYA,yDAAqH;AACrH,sDAA4B;AAGrB,IAAM,uBAAuB,GAA7B,MAAM,uBAAuB;IAKlC,YAEkB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAJhD,UAAK,GAAY,OAAO,CAAC;QAMvB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,iCAAkB,CAAC;IACvC,CAAC;IAED,IAAI,CAAC,MAAe,EAAE,aAA6B,EAAE,WAAyB,EAAE,MAAiC;QAC/G,MAAM,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QAGD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC;QAC3C,MAAM,EAAE,GAAG,iBAAK,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAGpC,MAAM,eAAe,GAAG,IAAA,uBAAQ,EAAC,MAAM,CAAC,CAAC,MAAM,CAAC;QAChD,IAAI,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC;QACxE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,EAAE;YAEvC,CAAC,GAAG,CAAC,CAAC;YACN,CAAC,GAAG,CAAC,CAAC;YACN,OAAO,CAAC,mBAAmB,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SACvD;aAAM,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE;YAEnC,OAAO,CAAC,WAAW,EAAE,CAAC;SACvB;QAED,MAAM,EACJ,MAAM,GAAG,eAAe,CAAC,MAAM,EAC/B,IAAI,GAAG,eAAe,CAAC,IAAI,EAC3B,MAAM,GAAG,eAAe,CAAC,MAAM,EAC/B,SAAS,GAAG,eAAe,CAAC,SAAS,EACtC,GAAG,MAAM,CAAC,SAAS,CAAC;QACrB,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE;YACtB,IAAI,EAAE,IAAI,CAAC,CAAC,CAAE,IAAe,CAAC,CAAC,CAAC,SAAS;YACzC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAE,MAAiB,CAAC,CAAC,CAAC,SAAS;YAC/C,WAAW,EAAE,SAAS;YACtB,SAAS,EAAE,QAAQ;YACnB,SAAS,EAAE,GAAG;SACf,CAAC,CAAC;IACL,CAAC;IACD,SAAS,CACP,OAAiB,EACjB,GAAe,EACf,CAAS,EACT,CAAS,EACT,WAAyB,EACzB,MAAiC,EACjC,MAIY,EACZ,QAIY;QAEZ,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE;YACjC,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;SACjG;IACH,CAAC;CACF,CAAA;AAxEY,uBAAuB;IADnC,IAAA,yBAAU,GAAE;IAOR,WAAA,IAAA,qBAAM,EAAC,wCAAyB,CAAC,CAAA;;GANzB,uBAAuB,CAwEnC;AAxEY,0DAAuB","file":"rough-circle.js","sourcesContent":["import type {\n  IGraphicRender,\n  IRenderService,\n  IGraphic,\n  ICircle,\n  IContext2d,\n  IMarkAttribute,\n  IThemeAttribute,\n  IGraphicAttribute,\n  IDrawContext,\n  IGraphicRenderDrawParams\n} from '@visactor/vrender-core';\nimport { CIRCLE_NUMBER_TYPE, DefaultCanvasCircleRender, getTheme, inject, injectable } from '@visactor/vrender-core';\nimport rough from 'roughjs';\n\n@injectable()\nexport class RoughCanvasCircleRender implements IGraphicRender {\n  declare type: 'circle';\n  declare numberType: number;\n  style: 'rough' = 'rough';\n\n  constructor(\n    @inject(DefaultCanvasCircleRender)\n    public readonly canvasRenderer: IGraphicRender\n  ) {\n    this.type = 'circle';\n    this.numberType = CIRCLE_NUMBER_TYPE;\n  }\n\n  draw(circle: ICircle, renderService: IRenderService, drawContext: IDrawContext, params?: IGraphicRenderDrawParams) {\n    const { context } = drawContext;\n    if (!context) {\n      return;\n    }\n\n    // 获取到原生canvas\n    const canvas = context.canvas.nativeCanvas;\n    const rc = rough.canvas(canvas, {});\n\n    // const circleAttribute = graphicService.themeService.getCurrentTheme().circleAttribute;\n    const circleAttribute = getTheme(circle).circle;\n    let { x = circleAttribute.x, y = circleAttribute.y } = circle.attribute;\n    if (!circle.transMatrix.onlyTranslate()) {\n      // 性能较差\n      x = 0;\n      y = 0;\n      context.transformFromMatrix(circle.transMatrix, true);\n    } else if (!context.onlyTranslate()) {\n      // 当前context有rotate/scale，重置matrix\n      context.clearMatrix();\n    }\n\n    const {\n      radius = circleAttribute.radius,\n      fill = circleAttribute.fill,\n      stroke = circleAttribute.stroke,\n      lineWidth = circleAttribute.lineWidth\n    } = circle.attribute;\n    rc.circle(x, y, radius, {\n      fill: fill ? (fill as string) : undefined,\n      stroke: stroke ? (stroke as string) : undefined,\n      strokeWidth: lineWidth,\n      fillStyle: 'zigzag',\n      roughness: 0.5\n    });\n  }\n  drawShape(\n    graphic: IGraphic,\n    ctx: IContext2d,\n    x: number,\n    y: number,\n    drawContext: IDrawContext,\n    params?: IGraphicRenderDrawParams,\n    fillCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean,\n    strokeCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean\n  ): void {\n    if (this.canvasRenderer.drawShape) {\n      return this.canvasRenderer.drawShape(graphic, ctx, x, y, drawContext, params, fillCb, strokeCb);\n    }\n  }\n}\n"]}