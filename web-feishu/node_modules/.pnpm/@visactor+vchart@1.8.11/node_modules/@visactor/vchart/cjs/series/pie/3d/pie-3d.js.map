{"version":3,"sources":["../src/series/pie/3d/pie-3d.ts"],"names":[],"mappings":";;;AAAA,gDAAqE;AAIrE,+CAA0E;AAG1E,iDAAyD;AACzD,gCAAuC;AACvC,0CAA8C;AAC9C,6CAAkD;AAClD,mDAAgD;AAChD,sDAAgE;AAChE,6DAAkE;AAGlE,MAAa,WAA2D,SAAQ,mBAAgB;IAAhG;;QAEE,SAAI,GAAG,qBAAc,CAAC,KAAK,CAAC;QAClB,iBAAY,WAAgD;QAC5D,iBAAY,WAAoC;QAIjD,2BAAsB,GAAG,+CAAiC,CAAC;IAmDtE,CAAC;IA/CC,eAAe;;QACb,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,OAAO,mCAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;IACtD,CAAC;IAED,aAAa;QACX,KAAK,CAAC,aAAa,EAAE,CAAC;QACtB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,YAAY,CACf,OAAO,EACP;gBACE,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ;aAC1B,EACD,QAAQ,EACR,yBAAc,CAAC,MAAM,CACtB,CAAC;SACH;IACH,CAAC;IAED,kBAAkB,CAAC,QAAmB;QACpC,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QACD,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAEnC,MAAM,QAAQ,GAIV,EAAE,CAAC;QACP,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC5B,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,QAAQ,CAAC,QAAQ,GAAG,CAAC,KAAY,EAAE,EAAE;;YACnC,MAAM,MAAM,GAAG;gBAEb,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,CAAC,mCAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,KAAK,GAAG,CAAC;gBACzD,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,CAAC,mCAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,MAAM,GAAG,CAAC;aAC3D,CAAC;YACF,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC;QACF,QAAQ,CAAC,KAAK,GAAG,CAAC,KAAY,EAAE,EAAE;;YAChC,MAAM,KAAK,GAAG,KAAK,CAAC,2BAAgB,CAAC,CAAC;YACtC,OAAO,CAAA,MAAA,IAAI,CAAC,KAAK,CAAC,KAAK,0CAAE,QAAQ,MAAK,QAAQ,CAAC,CAAC,CAAC,IAAA,uBAAc,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7E,CAAC,CAAC;QACF,IAAI,CAAC,YAAY,CAAC,QAAQ,kCAAO,QAAQ,KAAE,CAAC,EAAE,GAAG,KAAI,SAAS,EAAE,yBAAc,CAAC,IAAI,CAAC,CAAC;IACvF,CAAC;;AA1DH,kCA2DC;AA1DiB,gBAAI,GAAW,qBAAc,CAAC,KAAK,CAAC;AAKpC,gBAAI,GAAkB,0BAAe,CAAC;AACtC,kCAAsB,GAAG,+CAAiC,CAAC;AAsDtE,MAAM,mBAAmB,GAAG,GAAG,EAAE;IACtC,IAAA,kCAAsB,GAAE,CAAC;IACzB,IAAA,0BAAiB,GAAE,CAAC;IACpB,iBAAO,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AACxD,CAAC,CAAC;AAJW,QAAA,mBAAmB,uBAI9B","file":"pie-3d.js","sourcesContent":["import { AttributeLevel, ARC_MIDDLE_ANGLE } from '../../../constant';\nimport type { Datum } from '../../../typings';\nimport { MarkTypeEnum } from '../../../mark/interface/type';\nimport type { IArcSeries, SeriesMarkMap } from '../../interface';\nimport { SeriesMarkNameEnum, SeriesTypeEnum } from '../../interface/type';\n// eslint-disable-next-line no-duplicate-imports\nimport type { IPie3dSeriesSpec } from '../interface';\nimport { registerArc3dMark } from '../../../mark/arc-3d';\nimport { BasePieSeries } from '../pie';\nimport { pie3dSeriesMark } from '../constant';\nimport { radianToDegree } from '@visactor/vutils';\nimport { Factory } from '../../../core/factory';\nimport { registerPie3dAnimation } from '../animation/animation';\nimport { Pie3dSeriesSpecTransformer } from './pie-3d-transformer';\nimport type { ITextMark } from '../../../mark/text';\n\nexport class Pie3dSeries<T extends IPie3dSeriesSpec = IPie3dSeriesSpec> extends BasePieSeries<T> implements IArcSeries {\n  static readonly type: string = SeriesTypeEnum.pie3d;\n  type = SeriesTypeEnum.pie3d;\n  protected _pieMarkName: SeriesMarkNameEnum = SeriesMarkNameEnum.pie3d;\n  protected _pieMarkType: MarkTypeEnum = MarkTypeEnum.arc3d;\n\n  static readonly mark: SeriesMarkMap = pie3dSeriesMark;\n  static readonly transformerConstructor = Pie3dSeriesSpecTransformer as any;\n  readonly transformerConstructor = Pie3dSeriesSpecTransformer as any;\n\n  protected _angle3d: number;\n\n  setAttrFromSpec(): void {\n    super.setAttrFromSpec();\n    this._angle3d = this._spec?.angle3d ?? -Math.PI / 3;\n  }\n\n  initMarkStyle(): void {\n    super.initMarkStyle();\n    const pieMark = this._pieMark;\n    if (pieMark) {\n      this.setMarkStyle(\n        pieMark,\n        {\n          beta: () => this._angle3d\n        },\n        'normal',\n        AttributeLevel.Series\n      );\n    }\n  }\n\n  initLabelMarkStyle(textMark: ITextMark): void {\n    if (!textMark) {\n      return;\n    }\n    super.initLabelMarkStyle(textMark);\n\n    const params3d: {\n      beta?: number;\n      anchor3d?: (datum: Datum) => any;\n      angle?: (datum: Datum) => any;\n    } = {};\n    textMark.setSupport3d(true);\n    params3d.beta = this._angle3d;\n    params3d.anchor3d = (datum: Datum) => {\n      const anchor = [\n        // TODO: label 布局依赖自身图元属性，这里无法获取到\n        this._center?.x ?? this._region.getLayoutRect().width / 2,\n        this._center?.y ?? this._region.getLayoutRect().height / 2\n      ];\n      return anchor;\n    };\n    params3d.angle = (datum: Datum) => {\n      const angle = datum[ARC_MIDDLE_ANGLE];\n      return this._spec.label?.position === 'inside' ? radianToDegree(angle) : 0;\n    };\n    this.setMarkStyle(textMark, { ...params3d, z: 100 }, undefined, AttributeLevel.Mark);\n  }\n}\n\nexport const registerPie3dSeries = () => {\n  registerPie3dAnimation();\n  registerArc3dMark();\n  Factory.registerSeries(Pie3dSeries.type, Pie3dSeries);\n};\n"]}