{"version":3,"sources":["../src/component/axis/cartesian/symlog-axis.ts"],"names":[],"mappings":";;;AAAA,+CAAoD;AACpD,+CAAyD;AACzD,kEAA6D;AAC7D,6CAA+C;AAC/C,6CAAyC;AAEzC,mDAAgD;AAChD,4CAA4C;AAM5C,MAAa,mBAEX,SAAQ,iCAAsB;IAFhC;;QAIE,SAAI,GAAG,wBAAiB,CAAC,mBAAmB,CAAC;QAInC,UAAK,GAAY,KAAK,CAAC;QAEvB,WAAM,GAAgB,IAAI,oBAAW,EAAE,CAAC;IAcpD,CAAC;IARW,UAAU;;QAClB,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,mCAAI,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,oBAAoB;IAEpB,CAAC;;AAvBH,kDAwBC;AArBQ,wBAAI,GAAG,wBAAiB,CAAC,mBAAmB,CAAC;AAG7C,2BAAO,GAAG,MAAM,CAAC;AAoB1B,IAAA,cAAK,EAAC,mBAAmB,EAAE,mCAAe,CAAC,CAAC;AAErC,MAAM,2BAA2B,GAAG,GAAG,EAAE;IAC9C,IAAA,wBAAY,GAAE,CAAC;IACf,iBAAO,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;AAC3E,CAAC,CAAC;AAHW,QAAA,2BAA2B,+BAGtC","file":"symlog-axis.js","sourcesContent":["import { CartesianLinearAxis } from './linear-axis';\nimport { ComponentTypeEnum } from '../../interface/type';\nimport { LinearAxisMixin } from '../mixin/linear-axis-mixin';\nimport { SymlogScale } from '@visactor/vscale';\nimport { mixin } from '@visactor/vutils';\nimport type { ICartesianSymlogAxisSpec } from './interface';\nimport { Factory } from '../../../core/factory';\nimport { registerAxis } from '../base-axis';\n\nexport interface CartesianSymlogAxis<T extends ICartesianSymlogAxisSpec = ICartesianSymlogAxisSpec>\n  extends Pick<LinearAxisMixin, 'valueToPosition'>,\n    CartesianLinearAxis<T> {}\n\nexport class CartesianSymlogAxis<\n  T extends ICartesianSymlogAxisSpec = ICartesianSymlogAxisSpec\n> extends CartesianLinearAxis<T> {\n  static type = ComponentTypeEnum.cartesianSymlogAxis;\n  type = ComponentTypeEnum.cartesianSymlogAxis;\n\n  static specKey = 'axes';\n\n  protected _zero: boolean = false;\n\n  protected _scale: SymlogScale = new SymlogScale();\n  protected declare _scales: SymlogScale[];\n\n  /**\n   * @override\n   */\n  protected initScales() {\n    super.initScales();\n    this._scale.constant(this._spec.constant ?? 10);\n  }\n\n  transformScaleDomain() {\n    // do nothing\n  }\n}\n\nmixin(CartesianSymlogAxis, LinearAxisMixin);\n\nexport const registerCartesianSymlogAxis = () => {\n  registerAxis();\n  Factory.registerComponent(CartesianSymlogAxis.type, CartesianSymlogAxis);\n};\n"]}