{"version":3,"sources":["../src/series/sankey/tooltip-helper.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,uBAAuB,EAAE,MAAM,wBAAwB,CAAC;AAGjE,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAG5C,MAAM,OAAO,yBAA0B,SAAQ,uBAAuB;IAEpE,wBAAwB,CAAC,UAA6B,EAAE,aAAgC;QACtF,IAAI,UAAU,KAAK,MAAM,EAAE;YACzB,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,UAAU;gBACV,KAAK,EAAE;oBACL,GAAG,EAAE,SAAS;oBACd,KAAK,EAAE,CAAC,KAAY,EAAE,EAAE;wBACtB,IAAI,KAAK,CAAC,MAAM,EAAE;4BAChB,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gCAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;gCAC/C,OAAO,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;6BACrE;4BACD,OAAO,KAAK,CAAC,MAAM,GAAG,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;yBAC7C;wBACD,OAAO,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,aAAa,CAAC,CAAC;oBAC1D,CAAC;oBACD,QAAQ,EAAE,KAAK;iBAChB;gBACD,OAAO,EAAE;oBACP;wBACE,GAAG,EAAE,IAAI,CAAC,kBAAkB;wBAC5B,KAAK,EAAE,CAAC,KAAY,EAAE,EAAE;4BACtB,OAAO,KAAK,CAAC,KAAK,CAAC;wBACrB,CAAC;wBACD,QAAQ,EAAE,IAAI;wBACd,SAAS,EAAE,IAAI,CAAC,wBAAwB;wBACxC,UAAU,EAAE,IAAI,CAAC,yBAAyB;wBAC1C,WAAW,EAAE,IAAI,CAAC,yBAAyB;wBAC3C,WAAW,EAAE,KAAK;qBACnB;iBACF;aACF,CAAC;SACH;aAAM,IAAI,UAAU,KAAK,WAAW,IAAI,aAAa,EAAE;YACtD,MAAM,KAAK,GAAwB;gBACjC,GAAG,EAAE,SAAS;gBACd,KAAK,EAAE,IAAI,CAAC,iBAAiB;gBAC7B,QAAQ,EAAE,KAAK;aAChB,CAAC;YACF,MAAM,OAAO,GAA0B,EAAE,CAAC;YAC1C,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CACjC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,EAAO,EAAE,EAAE;gBAC/B,OAAO,CAAC,IAAI,CAAC;oBACX,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,GAAG,EAAE,IAAI,CAAC,kBAAkB;oBAC5B,KAAK,EAAE,IAAI,CAAC,oBAAoB;oBAChC,QAAQ,EAAE,IAAI;oBACd,SAAS,EAAE,IAAI,CAAC,wBAAwB;oBACxC,UAAU,EAAE,IAAI,CAAC,yBAAyB;oBAC1C,WAAW,EAAE,IAAI,CAAC,yBAAyB;oBAC3C,WAAW,EAAE,KAAK;iBACnB,CAAC,CAAC;YACL,CAAC,CAAC,CACH,CAAC;YACF,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,UAAU;gBACV,KAAK;gBACL,OAAO;aACR,CAAC;SACH;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF","file":"tooltip-helper.js","sourcesContent":["import type { ISeriesTooltipHelper } from '../interface';\nimport { BaseSeriesTooltipHelper } from '../base/tooltip-helper';\nimport type { Datum } from '@visactor/vgrammar-core';\nimport type { IToolTipLinePattern, ITooltipPattern, TooltipActiveType } from '../../typings';\nimport { isNumber } from '@visactor/vutils';\nimport type { IDimensionInfo } from '../../event/events/dimension/interface';\n\nexport class SankeySeriesTooltipHelper extends BaseSeriesTooltipHelper implements ISeriesTooltipHelper {\n  /** 获取默认的tooltip pattern */\n  getDefaultTooltipPattern(activeType: TooltipActiveType, dimensionInfo?: IDimensionInfo[]): ITooltipPattern | null {\n    if (activeType === 'mark') {\n      return {\n        visible: true,\n        activeType,\n        title: {\n          key: undefined,\n          value: (datum: Datum) => {\n            if (datum.source) {\n              if (isNumber(datum.source)) {\n                const seriesKeys = this.series.getSeriesKeys();\n                return seriesKeys[datum.source] + ' => ' + seriesKeys[datum.target];\n              }\n              return datum.source + ' => ' + datum.target;\n            }\n            return datum.datum[this.series.getSpec().categoryField];\n          },\n          hasShape: false\n        },\n        content: [\n          {\n            key: this.contentKeyCallback,\n            value: (datum: Datum) => {\n              return datum.value;\n            },\n            hasShape: true,\n            shapeType: this.contentShapeTypeCallback,\n            shapeColor: this.contentShapeColorCallback,\n            shapeStroke: this.contentShapeColorCallback,\n            shapeHollow: false\n          }\n        ]\n      };\n    } else if (activeType === 'dimension' && dimensionInfo) {\n      const title: IToolTipLinePattern = {\n        key: undefined,\n        value: this._getDimensionData,\n        hasShape: false\n      };\n      const content: IToolTipLinePattern[] = [];\n      dimensionInfo.forEach(({ data }) =>\n        data.forEach(({ series }: any) => {\n          content.push({\n            seriesId: series.id,\n            key: this.contentKeyCallback,\n            value: this.contentValueCallback,\n            hasShape: true,\n            shapeType: this.contentShapeTypeCallback,\n            shapeColor: this.contentShapeColorCallback,\n            shapeStroke: this.contentShapeColorCallback,\n            shapeHollow: false\n          });\n        })\n      );\n      return {\n        visible: true,\n        activeType,\n        title,\n        content\n      };\n    }\n\n    return null;\n  }\n}\n"]}