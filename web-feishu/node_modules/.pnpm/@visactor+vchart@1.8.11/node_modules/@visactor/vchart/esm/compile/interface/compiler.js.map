{"version":3,"sources":["../src/compile/interface/compiler.ts"],"names":[],"mappings":"","file":"compiler.js","sourcesContent":["import type { IColor, IStageParams, IStage, ILayer } from '@visactor/vrender-core';\nimport type { EventSourceType, EventType } from '../../event/interface';\nimport type { RenderMode } from '../../typings/spec/common';\nimport type { IBoundsLike } from '@visactor/vutils';\nimport type { GrammarType, IGrammarItem } from './compilable-item';\nimport type { StringOrNumber } from '../../typings';\n\nexport interface IRenderContainer {\n  dom?: HTMLElement | 'none';\n  canvas?: HTMLCanvasElement | string;\n}\n\n/**\n * @since 1.8.0\n */\nexport type IOptimizeType = {\n  // 视口不在可视区，跳过渲染，默认为true\n  skipRenderWithOutRange?: boolean;\n  // 跳过图元在区间外的判断\n  // 不存在dirtyBounds的时候，根据该配置判断是否关闭图元的超出边界判定\n  // 如果有dirtyBounds那么该配置不生效\n  disableCheckGraphicWidthOutRange?: boolean;\n};\n\nexport interface IRenderOption {\n  /**\n   * 配置渲染环境，默认为 'desktop-browser'，当需要在非浏览器环境渲染 VChart 时，需要配置该属性。\n   * - 'desktop-browser': 默认模式，适用于 PC 及 H5\n   * - 'mobile-browser': H5 模式\n   * - 'node': Node 渲染\n   * - 'worker': worker 模式\n   * - 'miniApp': 小程序模式\n   * - 'lynx': lynx 渲染\n   * @default 'desktop-browser'\n   */\n  mode?: RenderMode;\n  /**\n   * 渲染环境参数配置\n   */\n  modeParams?:\n    | {\n        tooltipCanvasId?: StringOrNumber;\n        [key: string]: any;\n      }\n    | unknown;\n  /**\n   * 设置屏幕分辨率\n   */\n  dpr?: number;\n  /**\n   * 图表交互全局开关，默认为 `true`，开启。\n   * @default true\n   */\n  interactive?: boolean;\n  /**\n   * 指定绘制的区域\n   */\n  viewBox?: IBoundsLike;\n  /**\n   * 用于告诉底层的渲染引擎 VRender，图表的 Canvas 是否是受控制的canvas，如果不是的话，不会进行resize等操作。\n   * @default true\n   */\n  canvasControled?: boolean;\n  /**\n   * 外部传入的 VRender stage\n   */\n  stage?: IStage;\n  /**\n   * 外部传入的 VRender layer\n   */\n  layer?: ILayer;\n\n  /**\n   * 绘制之前的钩子函数\n   */\n  beforeRender?: IStageParams['beforeRender'];\n  /**\n   * 绘制之后的钩子函数\n   */\n  afterRender?: IStageParams['afterRender'];\n  /**\n   * 绘图区域背景色设置\n   */\n  background?: IColor;\n  /**\n   * 日志类型，用于开发调试\n   */\n  logLevel?: number;\n  /**\n   * 错误消息回调函数\n   */\n  onError?: (...args: any[]) => void;\n  /**\n   * 是否关闭dirtyBounds\n   * @default false\n   */\n  disableDirtyBounds?: boolean;\n  /**\n   * 是否开启view3d的变换模式\n   */\n  enableView3dTransform?: boolean;\n  /**\n   * vrender 的插件列表\n   */\n  pluginList?: string[];\n  /**\n   * @since 1.8.0\n   */\n  optimize?: IOptimizeType;\n  /**\n   * @since 1.8.3\n   */\n  enableHtmlAttribute?: boolean;\n  /**\n   * @since 1.8.9\n   * 是否支持touch事件\n   */\n  supportsTouchEvents?: boolean;\n  /**\n   * @since 1.8.9\n   * 是否支持pointer事件\n   */\n  supportsPointerEvents?: boolean;\n}\n\nexport type CompilerListenerParameters = {\n  type: EventType;\n  event: Event;\n  source: EventSourceType;\n  // FIXME: 这里 item 应当为场景树的 Item 类型\n  item: any | null;\n  datum: any | null;\n  markId: number | null;\n  modelId: number | null;\n  markUserId: StringOrNumber | null;\n  modelUserId: StringOrNumber | null;\n};\n\nexport type CompilerModel = Record<GrammarType, IProductMap<IGrammarItem>>;\n\nexport interface IProductMap<T extends IGrammarItem> {\n  /** 编译产物 id 和对应的在 vchart 中的 GrammarItem */\n  [productId: string]: IGrammarItemMap<T>;\n}\n\nexport interface IGrammarItemMap<T extends IGrammarItem> {\n  /** GrammarItem id 和 对应的引用 */\n  [id: number]: T;\n}\n"]}