import { BaseChartSpecTransformer } from "../base";

export class SankeyChartSpecTransformer extends BaseChartSpecTransformer {
    _getDefaultSeriesSpec(spec) {
        const series = Object.assign(Object.assign({}, super._getDefaultSeriesSpec(spec)), {
            categoryField: spec.categoryField,
            valueField: spec.valueField,
            sourceField: spec.sourceField,
            targetField: spec.targetField,
            direction: spec.direction,
            nodeAlign: spec.nodeAlign,
            nodeGap: spec.nodeGap,
            nodeWidth: spec.nodeWidth,
            linkWidth: spec.linkWidth,
            minStepWidth: spec.minStepWidth,
            minNodeHeight: spec.minNodeHeight,
            minLinkHeight: spec.minLinkHeight,
            iterations: spec.iterations,
            nodeKey: spec.nodeKey,
            linkSortBy: spec.linkSortBy,
            nodeSortBy: spec.nodeSortBy,
            setNodeLayer: spec.setNodeLayer,
            node: spec.node,
            link: spec.link,
            label: spec.label,
            emphasis: spec.emphasis
        }), seriesType = this.seriesType;
        return seriesType && (series.type = seriesType, series[seriesType] = spec[seriesType]), 
        series;
    }
    transformSpec(spec) {
        super.transformSpec(spec);
        const defaultSeriesSpec = this._getDefaultSeriesSpec(spec);
        spec.series && 0 !== spec.series.length ? spec.series.forEach((s => {
            this._isValidSeries(s.type) && Object.keys(defaultSeriesSpec).forEach((k => {
                k in s || (s[k] = defaultSeriesSpec[k]);
            }));
        })) : spec.series = [ defaultSeriesSpec ];
    }
}
//# sourceMappingURL=sankey-transformer.js.map
