{"version":3,"sources":["../src/chart/common/common-transformer.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AAC5C,OAAO,EAAE,wBAAwB,EAAE,MAAM,SAAS,CAAC;AACnD,OAAO,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAC;AAG/C,MAAM,OAAO,0BAA0E,SAAQ,wBAE9F;IACW,qBAAqB,CAAC,IAA+B;QAC7D,MAAM,WAAW,GAAG,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QAEtD,OAAO,WAAW,CAAC,IAAI,CAAC;QACxB,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,aAAa,CAAC,IAA+B;QAC3C,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YACrC,MAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAc,EAAE,EAAE;gBACrC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;oBAChC,OAAO;iBACR;gBACD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBACzC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;wBACb,CAAC,CAAC,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;qBAC7B;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;QACD,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;gBAC9B,IAAI,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,EAAE;oBAC5B,SAAS,CAAC,IAAI,EAAE,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;iBACxD;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;CACF","file":"common-transformer.js","sourcesContent":["import type { AdaptiveSpec, ISeriesSpec } from '../../typings';\nimport { get, mergeSpec } from '../../util';\nimport { BaseChartSpecTransformer } from '../base';\nimport { getTrimPaddingConfig } from '../util';\nimport type { ICommonChartSpec } from './interface';\n\nexport class CommonChartSpecTransformer<T extends ICommonChartSpec = ICommonChartSpec> extends BaseChartSpecTransformer<\n  AdaptiveSpec<T, 'series'>\n> {\n  protected _getDefaultSeriesSpec(spec: AdaptiveSpec<T, 'series'>) {\n    const defaultSpec = super._getDefaultSeriesSpec(spec);\n    // 组合图系列的默认配置由系列自身配置 data/dataIndex/dataId 决定，无需默认配置\n    delete defaultSpec.data;\n    return defaultSpec;\n  }\n\n  transformSpec(spec: AdaptiveSpec<T, 'series'>): void {\n    super.transformSpec(spec);\n    if (spec.series && spec.series.length) {\n      const defaultSeriesSpec = this._getDefaultSeriesSpec(spec);\n      spec.series.forEach((s: ISeriesSpec) => {\n        if (!this._isValidSeries(s.type)) {\n          return;\n        }\n        Object.keys(defaultSeriesSpec).forEach(k => {\n          if (!(k in s)) {\n            s[k] = defaultSeriesSpec[k];\n          }\n        });\n      });\n    }\n    if (spec.axes && spec.axes.length) {\n      spec.axes.forEach((axis: any) => {\n        if (get(axis, 'trimPadding')) {\n          mergeSpec(axis, getTrimPaddingConfig(this.type, spec));\n        }\n      });\n    }\n  }\n}\n"]}