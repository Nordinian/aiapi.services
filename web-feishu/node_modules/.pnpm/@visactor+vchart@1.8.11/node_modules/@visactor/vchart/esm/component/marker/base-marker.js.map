{"version":3,"sources":["../src/component/marker/base-marker.ts"],"names":[],"mappings":"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","file":"base-marker.js","sourcesContent":["import type { DataView } from '@visactor/vdataset';\nimport { array, isValid, isNil, isString } from '@visactor/vutils';\nimport type { IModelRenderOption } from '../../model/interface';\nimport type { IRegion } from '../../region/interface';\nimport type { ICartesianSeries } from '../../series/interface';\nimport type { ILayoutRect, ILayoutType, IRect, StringOrNumber } from '../../typings';\nimport { BaseComponent } from '../base/base-component';\nimport type {\n  IAggrType,\n  ICoordinateOption,\n  IDataPointSpec,\n  IDataPos,\n  IDataPosCallback,\n  IMarkerSpec\n} from './interface';\nimport type { IGraphic, IGroup } from '@visactor/vrender-core';\nimport { calcLayoutNumber } from '../../util/space';\nimport { isAggrSpec } from './utils';\nimport { getFirstSeries } from '../../util';\n\nexport abstract class BaseMarker<T extends IMarkerSpec> extends BaseComponent<T> {\n  layoutType: ILayoutType | 'none' = 'none';\n\n  protected _startRelativeSeries!: ICartesianSeries;\n  protected _endRelativeSeries!: ICartesianSeries;\n  protected _relativeSeries!: ICartesianSeries;\n  getRelativeSeries() {\n    return this._relativeSeries;\n  }\n\n  // marker 组件数据\n  protected _markerData!: DataView;\n  // marker 组件\n  protected _markerComponent!: any;\n\n  protected _layoutOffsetX: number = 0;\n  protected _layoutOffsetY: number = 0;\n\n  private _firstSeries: ICartesianSeries;\n\n  created() {\n    super.created();\n    // event\n    this.initEvent();\n    this._bindSeries();\n    this._initDataView();\n  }\n\n  protected _getAllRelativeSeries() {\n    return {\n      getRelativeSeries: () => this._relativeSeries,\n      getStartRelativeSeries: () => this._startRelativeSeries,\n      getEndRelativeSeries: () => this._endRelativeSeries\n    };\n  }\n\n  private _getFieldInfoFromSpec(dim: 'x' | 'y', spec: IDataPos | IDataPosCallback, relativeSeries: ICartesianSeries) {\n    const field = dim === 'x' ? relativeSeries.getSpec().xField : relativeSeries.getSpec().yField;\n    if (isString(spec) && isAggrSpec(spec)) {\n      return {\n        field,\n        aggrType: spec as unknown as IAggrType\n      };\n    }\n    return spec;\n  }\n\n  protected _processSpecX(specX: IDataPos | IDataPosCallback) {\n    const relativeSeries = this._relativeSeries;\n    return {\n      x: this._getFieldInfoFromSpec('x', specX, relativeSeries),\n      ...this._getAllRelativeSeries()\n    };\n  }\n\n  protected _processSpecY(specY: IDataPos | IDataPosCallback) {\n    const relativeSeries = this._relativeSeries;\n    return {\n      y: this._getFieldInfoFromSpec('y', specY, relativeSeries),\n      ...this._getAllRelativeSeries()\n    };\n  }\n\n  protected _processSpecXY(specX: IDataPos | IDataPosCallback, specY: IDataPos | IDataPosCallback) {\n    const relativeSeries = this._relativeSeries;\n\n    return {\n      x: this._getFieldInfoFromSpec('x', specX, relativeSeries),\n      y: this._getFieldInfoFromSpec('y', specY, relativeSeries),\n      ...this._getAllRelativeSeries()\n    };\n  }\n\n  protected _processSpecCoo(spec: any) {\n    const coordinates = spec.coordinates ?? array(spec.coordinate);\n    return coordinates.map((coordinate: IDataPointSpec) => {\n      const refRelativeSeries = this._getSeriesByIdOrIndex(\n        coordinate.refRelativeSeriesId,\n        coordinate.refRelativeSeriesIndex\n      );\n\n      const { xField, yField } = refRelativeSeries.getSpec();\n      const { xFieldDim, xFieldIndex, yFieldDim, yFieldIndex } = coordinate;\n      let bindXField = xField;\n      if (isValid(xFieldIndex)) {\n        bindXField = array(xField)[xFieldIndex];\n      }\n      if (xFieldDim && array(xField).includes(xFieldDim)) {\n        bindXField = xFieldDim;\n      }\n\n      let bindYField = yField;\n      if (isValid(yFieldIndex)) {\n        bindYField = array(yField)[yFieldIndex];\n      }\n      if (yFieldDim && array(yField).includes(yFieldDim)) {\n        bindYField = yFieldDim;\n      }\n\n      const option: ICoordinateOption = {\n        x: undefined,\n        y: undefined,\n        ...this._getAllRelativeSeries()\n      };\n\n      if (isString(coordinate[bindXField]) && isAggrSpec(coordinate[bindXField] as IDataPos)) {\n        option.x = { field: bindXField, aggrType: coordinate[bindXField] as IAggrType };\n      } else {\n        option.x = array(bindXField).map(field => coordinate[field]);\n      }\n\n      if (isString(coordinate[bindYField]) && isAggrSpec(coordinate[bindYField] as IDataPos)) {\n        option.y = { field: bindYField, aggrType: coordinate[bindYField] as IAggrType };\n      } else {\n        option.y = array(bindYField).map(field => coordinate[field]);\n      }\n      option.getRefRelativeSeries = () => refRelativeSeries;\n      return option;\n    });\n  }\n\n  updateLayoutAttribute(): void {\n    const markerVisible = this._spec.visible ?? true;\n    if (markerVisible) {\n      // 创建marker组件\n      if (!this._markerComponent) {\n        const markerComponent = this._createMarkerComponent();\n        markerComponent.name = this._spec.name ?? this.type;\n        markerComponent.id = this._spec.id ?? `${this.type}-${this.id}`;\n        this._markerComponent = markerComponent;\n\n        this.getContainer().add(this._markerComponent);\n        // 代理 marker 组件上的事件\n        this._markerComponent.on('*', (event: any, type: string) =>\n          this._delegateEvent(this._markerComponent as unknown as IGraphic, event, type)\n        );\n      }\n      this._markerLayout();\n    }\n\n    super.updateLayoutAttribute();\n  }\n\n  private _getSeriesByIdOrIndex(seriesUserId: StringOrNumber, seriesIndex: number) {\n    let series: ICartesianSeries;\n    series = this._option.getSeriesInUserIdOrIndex(isValid(seriesUserId) ? [seriesUserId] : [], [\n      seriesIndex\n    ])?.[0] as ICartesianSeries;\n    if (!series) {\n      series = this._relativeSeries ?? this._getFirstSeries();\n    }\n    return series;\n  }\n\n  protected _bindSeries() {\n    const spec = this._spec;\n    this._relativeSeries = this._getSeriesByIdOrIndex(spec.relativeSeriesId, spec.relativeSeriesIndex);\n    this._startRelativeSeries = this._getSeriesByIdOrIndex(\n      (spec as any).startRelativeSeriesId,\n      (spec as any).startRelativeSeriesIndex\n    );\n    this._endRelativeSeries = this._getSeriesByIdOrIndex(\n      (spec as any).endRelativeSeriesId,\n      (spec as any).endRelativeSeriesIndex\n    );\n  }\n\n  protected abstract _initDataView(): void;\n  protected abstract _createMarkerComponent(): IGroup;\n  protected abstract _markerLayout(): void;\n\n  protected initEvent() {\n    // do nothing\n  }\n  onRender(ctx: IModelRenderOption): void {\n    // do nothing\n  }\n  changeRegions(regions: IRegion[]): void {\n    // do nothing\n  }\n\n  clear(): void {\n    super.clear();\n    this._firstSeries = null;\n  }\n\n  private _getFirstSeries(): ICartesianSeries {\n    if (this._firstSeries) {\n      return this._firstSeries;\n    }\n    const firstSeries = getFirstSeries(this._regions) as ICartesianSeries;\n    if (firstSeries) {\n      this._firstSeries = firstSeries;\n      return firstSeries;\n    }\n    this._option?.onError('need at least one series');\n    return null;\n  }\n\n  protected _getNeedClearVRenderComponents(): IGraphic[] {\n    return [this._markerComponent] as unknown as IGroup[];\n  }\n\n  onLayoutStart(layoutRect: IRect, chartViewRect: ILayoutRect, ctx: any): void {\n    // offset\n    if (!isNil(this._spec.offsetX)) {\n      this._layoutOffsetX = calcLayoutNumber(this._spec.offsetX, chartViewRect.width, chartViewRect);\n    }\n    if (!isNil(this._spec.offsetY)) {\n      this._layoutOffsetY = calcLayoutNumber(this._spec.offsetY, chartViewRect.height, chartViewRect);\n    }\n    super.onLayoutStart(layoutRect, chartViewRect, ctx);\n  }\n}\n"]}