import type { AABBBounds, OBBBounds } from '@visactor/vutils';
import type { IRichText, IRichTextCharacter, RichTextGlobalAlignType, RichTextGlobalBaselineType, RichTextVerticalDirection, RichTextWordBreak, IRichTextGraphicAttribute, IStage, ILayer, IRichTextIcon, EventPoint } from '../interface';
import { Graphic } from './graphic';
import Frame from './richtext/frame';
export declare class RichText extends Graphic<IRichTextGraphicAttribute> implements IRichText {
    type: 'richtext';
    _frameCache: Frame;
    _currentHoverIcon: IRichTextIcon | null;
    static NOWORK_ANIMATE_ATTR: {
        strokeSeg: number;
        boundsPadding: number;
        pickMode: number;
        boundsMode: number;
        customPickShape: number;
        pickable: number;
        childrenPickable: number;
        visible: number;
        zIndex: number;
        layout: number;
        keepDirIn3d: number;
        outerBorder: number;
        innerBorder: number;
        lineDash: number;
        lineCap: number;
        lineJoin: number;
        miterLimit: number;
        strokeBoundsBuffer: number;
        scaleCenter: number;
        anchor: number;
        anchor3d: number;
        postMatrix: number;
        backgroundMode: number;
        background: number;
        texture: number;
        cursor: number;
        html: number;
        ellipsis: number;
        wordBreak: number;
        verticalDirection: number;
        textAlign: number;
        textBaseline: number;
        textConfig: number;
        layoutDirection: number;
    };
    constructor(params?: IRichTextGraphicAttribute);
    get width(): number;
    set width(w: number);
    get height(): number;
    set height(h: number);
    get maxWidth(): number | undefined;
    set maxWidth(mw: number | undefined);
    get maxHeight(): number | undefined;
    set maxHeight(mh: number | undefined);
    get ellipsis(): boolean | string;
    set ellipsis(e: boolean | string);
    get wordBreak(): RichTextWordBreak;
    set wordBreak(wb: RichTextWordBreak);
    get verticalDirection(): RichTextVerticalDirection;
    set verticalDirection(vd: RichTextVerticalDirection);
    get textAlign(): RichTextGlobalAlignType;
    set textAlign(align: RichTextGlobalAlignType);
    get textBaseline(): RichTextGlobalBaselineType;
    set textBaseline(baseline: RichTextGlobalBaselineType);
    get textConfig(): IRichTextCharacter[];
    set textConfig(config: IRichTextCharacter[]);
    protected doUpdateAABBBounds(): AABBBounds;
    protected tryUpdateOBBBounds(): OBBBounds;
    getDefaultAttribute(name: string): any;
    protected needUpdateTags(keys: string[]): boolean;
    protected needUpdateTag(key: string): boolean;
    getFrameCache(): Frame;
    doUpdateFrameCache(): void;
    clone(): RichText;
    setStage(stage?: IStage, layer?: ILayer): void;
    bindIconEvent(): void;
    pickIcon(point: EventPoint): IRichTextIcon | undefined;
    getNoWorkAnimateAttr(): Record<string, number>;
}
export declare function createRichText(attributes: IRichTextGraphicAttribute): IRichText;
