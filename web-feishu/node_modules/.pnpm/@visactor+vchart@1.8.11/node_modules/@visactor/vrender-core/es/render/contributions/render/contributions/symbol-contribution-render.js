import { getScaledStroke } from "../../../../common/canvas-utils";

import { defaultBaseBackgroundRenderContribution } from "./base-contribution-render";

import { BaseRenderContributionTime } from "../../../../common/enums";

import { defaultBaseTextureRenderContribution } from "./base-texture-contribution-render";

export class DefaultSymbolRenderContribution {
    constructor() {
        this.time = BaseRenderContributionTime.afterFillStroke, this.useStyle = !0, this.order = 0;
    }
    drawShape(symbol, context, x, y, doFill, doStroke, fVisible, sVisible, symbolAttribute, drawContext, fillCb, strokeCb) {
        const parsedPath = symbol.getParsedPath();
        if (!parsedPath) return;
        const {outerBorder: outerBorder, innerBorder: innerBorder} = symbol.attribute, doOuterBorder = outerBorder && !1 !== outerBorder.visible, doInnerBorder = innerBorder && !1 !== innerBorder.visible;
        if (!doOuterBorder && !doInnerBorder) return;
        const {size: size = symbolAttribute.size, opacity: opacity = symbolAttribute.opacity, x: originX = symbolAttribute.x, y: originY = symbolAttribute.y, scaleX: scaleX = symbolAttribute.scaleX, scaleY: scaleY = symbolAttribute.scaleY} = symbol.attribute, doStrokeOuter = !(!outerBorder || !outerBorder.stroke), doStrokeInner = !(!innerBorder || !innerBorder.stroke);
        if (doOuterBorder) {
            const {distance: distance = symbolAttribute.outerBorder.distance} = outerBorder, d = getScaledStroke(context, distance, context.dpr);
            if (context.beginPath(), !1 === parsedPath.drawOffset(context, size, x, y, d) && context.closePath(), 
            context.setShadowBlendStyle && context.setShadowBlendStyle(symbol, symbol.attribute, symbolAttribute), 
            strokeCb) strokeCb(context, outerBorder, symbolAttribute.outerBorder); else if (doStrokeOuter) {
                const lastOpacity = symbolAttribute.outerBorder.opacity;
                symbolAttribute.outerBorder.opacity = opacity, context.setStrokeStyle(symbol, outerBorder, (originX - x) / scaleX, (originY - y) / scaleY, symbolAttribute.outerBorder), 
                symbolAttribute.outerBorder.opacity = lastOpacity, context.stroke();
            }
        }
        if (doInnerBorder) {
            const {distance: distance = symbolAttribute.innerBorder.distance} = innerBorder, d = getScaledStroke(context, distance, context.dpr);
            if (context.beginPath(), !1 === parsedPath.drawOffset(context, size, x, y, -d) && context.closePath(), 
            context.setShadowBlendStyle && context.setShadowBlendStyle(symbol, symbol.attribute, symbolAttribute), 
            strokeCb) strokeCb(context, innerBorder, symbolAttribute.innerBorder); else if (doStrokeInner) {
                const lastOpacity = symbolAttribute.innerBorder.opacity;
                symbolAttribute.innerBorder.opacity = opacity, context.setStrokeStyle(symbol, innerBorder, (originX - x) / scaleX, (originY - y) / scaleY, symbolAttribute.innerBorder), 
                symbolAttribute.innerBorder.opacity = lastOpacity, context.stroke();
            }
        }
    }
}

export const defaultSymbolRenderContribution = new DefaultSymbolRenderContribution;

export const defaultSymbolTextureRenderContribution = defaultBaseTextureRenderContribution;

export const defaultSymbolBackgroundRenderContribution = defaultBaseBackgroundRenderContribution;
//# sourceMappingURL=symbol-contribution-render.js.map
