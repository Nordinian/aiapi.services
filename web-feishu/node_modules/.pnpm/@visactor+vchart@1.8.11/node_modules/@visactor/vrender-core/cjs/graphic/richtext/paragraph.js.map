{"version":3,"sources":["../src/graphic/richtext/paragraph.ts"],"names":[],"mappings":"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","file":"paragraph.js","sourcesContent":["import { calculateLineHeight } from '../../common/utils';\nimport type { IContext2d, IRichTextParagraphCharacter } from '../../interface';\nimport { measureTextCanvas, applyFillStyle, applyStrokeStyle, getStrByWithCanvas } from './utils';\n\n/**\n * 部分代码参考 https://github.com/danielearwicker/carota/\n * The MIT License (MIT)\n\n  \"Carota\" - Copyright (c) 2013 Daniel Earwicker\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n */\n\n// 文字段\n// 参考carota\n// https://github.com/danielearwicker/carota/blob/master/src/text.js\nexport default class Paragraph {\n  text: string;\n  ascent: number;\n  descent: number;\n  width: number;\n  height: number;\n  lineHeight: number;\n  fontSize: number;\n  length: number;\n  newLine: boolean;\n  character: IRichTextParagraphCharacter;\n  left: number;\n  top: number;\n  // rotate?: number;\n  direction?: 'horizontal' | 'vertical';\n  // bounds?: Bounds;\n  widthOrigin?: number;\n  heightOrigin?: number;\n  textBaseline?: CanvasTextBaseline;\n\n  ellipsis: 'normal' | 'add' | 'replace' | 'hide';\n  ellipsisWidth: number;\n  ellipsisOtherParagraphWidth: number;\n  verticalEllipsis?: boolean;\n\n  constructor(text: string, newLine: boolean, character: IRichTextParagraphCharacter) {\n    // 测量文字\n    this.fontSize = character.fontSize || 16;\n    this.textBaseline = character.textBaseline || 'alphabetic';\n\n    // 处理行高：\n    // lineHeight为数字时，大于fontSize取lineHeight，小于fontSize时取fontSize\n    // lineHeight不为数字时，统一认为lineHeight为'normal'，值取1.2 * fontSize\n    const lineHeight = calculateLineHeight(character.lineHeight, this.fontSize);\n    if (typeof lineHeight === 'number') {\n      this.lineHeight = lineHeight > this.fontSize ? lineHeight : this.fontSize;\n    } else {\n      this.lineHeight = Math.floor(1.2 * this.fontSize);\n    }\n\n    this.height = this.lineHeight;\n\n    const { ascent, height, descent, width } = measureTextCanvas(text, character);\n\n    let halfDetaHeight = 0;\n    let deltaAscent = 0;\n    let deltaDescent = 0;\n    if (this.height > height) {\n      // measureTextCanvas测量出的是纯文字高度，this.height是考虑行高后的高度\n      // 如果this.height > height，将超过的高度平均分配到ascent和descent上\n      halfDetaHeight = (this.height - height) / 2;\n      deltaAscent = Math.ceil(halfDetaHeight);\n      deltaDescent = Math.floor(halfDetaHeight);\n    }\n\n    if (this.textBaseline === 'top') {\n      this.ascent = halfDetaHeight;\n      this.descent = height - halfDetaHeight;\n    } else if (this.textBaseline === 'bottom') {\n      this.ascent = height - halfDetaHeight;\n      this.descent = halfDetaHeight;\n    } else if (this.textBaseline === 'middle') {\n      this.ascent = this.height / 2;\n      this.descent = this.height / 2;\n    } else {\n      this.ascent = ascent + deltaAscent;\n      this.descent = descent + deltaDescent;\n    }\n\n    this.length = text.length;\n    this.width = width || 0;\n    this.text = text || '';\n    this.newLine = newLine || false;\n    this.character = character;\n\n    this.left = 0;\n    this.top = 0;\n\n    this.ellipsis = 'normal';\n    this.ellipsisWidth = 0;\n    this.ellipsisOtherParagraphWidth = 0;\n\n    // 处理旋转\n    if (character.direction === 'vertical') {\n      this.direction = character.direction;\n      this.widthOrigin = this.width;\n      this.heightOrigin = this.height;\n      // const bounds = new Bounds();\n      // bounds.set(0, 0, this.width, this.height);\n      // bounds.rotate(Math.PI / 2, this.width / 2, this.height / 2);\n      // this.bounds = bounds;\n      // this.width = bounds.width();\n      // this.height = bounds.height();\n      this.width = this.heightOrigin;\n      this.height = this.widthOrigin;\n      this.lineHeight = this.height;\n    }\n  }\n\n  updateWidth() {\n    const { width } = measureTextCanvas(this.text, this.character);\n    this.width = width;\n    if (this.direction === 'vertical') {\n      this.widthOrigin = this.width;\n      this.width = this.heightOrigin;\n      this.height = this.widthOrigin;\n    }\n  }\n\n  draw(ctx: IContext2d, baseline: number, deltaLeft: number, isLineFirst: boolean, textAlign: string) {\n    let text = this.text;\n    let left = this.left + deltaLeft;\n    baseline += this.top;\n    let direction = this.direction;\n\n    if (this.verticalEllipsis) {\n      text = '...';\n      direction = 'vertical';\n      baseline -= this.ellipsisWidth / 2;\n    } else if (this.ellipsis === 'hide') {\n      return;\n    } else if (this.ellipsis === 'add') {\n      text += '...';\n\n      if (textAlign === 'right') {\n        left -= this.ellipsisWidth;\n      }\n    } else if (this.ellipsis === 'replace') {\n      // 找到需要截断的字符长度\n      // const index = getStrByWith(text, this.width - this.ellipsisWidth + this.ellipsisOtherParagraphWidth, this.style, text.length - 1);\n      const index = getStrByWithCanvas(\n        text,\n        (direction === 'vertical' ? this.height : this.width) - this.ellipsisWidth + this.ellipsisOtherParagraphWidth,\n        this.character,\n        text.length - 1\n      );\n      text = text.slice(0, index);\n      text += '...';\n\n      if (textAlign === 'right') {\n        const { width } = measureTextCanvas(this.text.slice(index), this.character);\n        if (direction === 'vertical') {\n          // baseline -= this.ellipsisWidth - width;\n        } else {\n          left -= this.ellipsisWidth - width;\n        }\n      }\n    }\n\n    // prepareContext(ctx);\n    switch (this.character.script) {\n      case 'super':\n        baseline -= this.ascent * (1 / 3);\n        break;\n      case 'sub':\n        baseline += this.descent / 2;\n        break;\n    }\n\n    // if (isLineFirst) {\n    //   const result = regFirstSpace.exec(text);\n    //   if (result?.index !== 0) {\n    //     text = text.slice(result?.index);\n    //   }\n    // }\n\n    // 处理旋转\n    if (direction === 'vertical') {\n      ctx.save();\n      ctx.rotateAbout(Math.PI / 2, left, baseline);\n      ctx.translate(-(this.heightOrigin as number) || -this.lineHeight / 2, -this.descent / 2);\n      ctx.translate(left, baseline);\n      left = 0;\n      baseline = 0;\n    }\n\n    if (this.character.stroke) {\n      applyStrokeStyle(ctx, this.character);\n      ctx.strokeText(text, left, baseline);\n    }\n\n    // 下面绘制underline和line-through时需要设置FillStyle\n    applyFillStyle(ctx, this.character);\n\n    if (this.character.fill) {\n      ctx.fillText(text, left, baseline);\n    }\n\n    if (this.character.fill) {\n      if (typeof this.character.lineThrough === 'boolean' || typeof this.character.underline === 'boolean') {\n        if (this.character.underline) {\n          ctx.fillRect(\n            left,\n            1 + baseline,\n            this.widthOrigin || this.width,\n            this.character.fontSize ? Math.max(1, Math.floor(this.character.fontSize / 10)) : 1\n          );\n        }\n        if (this.character.lineThrough) {\n          ctx.fillRect(\n            left,\n            1 + baseline - this.ascent / 2,\n            this.widthOrigin || this.width,\n            this.character.fontSize ? Math.max(1, Math.floor(this.character.fontSize / 10)) : 1\n          );\n        }\n      } else if (this.character.textDecoration === 'underline') {\n        ctx.fillRect(\n          left,\n          1 + baseline,\n          this.widthOrigin || this.width,\n          this.character.fontSize ? Math.max(1, Math.floor(this.character.fontSize / 10)) : 1\n        );\n      } else if (this.character.textDecoration === 'line-through') {\n        ctx.fillRect(\n          left,\n          1 + baseline - this.ascent / 2,\n          this.widthOrigin || this.width,\n          this.character.fontSize ? Math.max(1, Math.floor(this.character.fontSize / 10)) : 1\n        );\n      }\n    }\n\n    if (direction === 'vertical') {\n      ctx.restore();\n    }\n  }\n\n  getWidthWithEllips(direction: string): number {\n    let text = this.text;\n    // const direction = this.direction;\n    const width = direction === 'vertical' ? this.height : this.width;\n    // const height = direction === 'vertical' ? this.width: this.height;\n\n    if (this.ellipsis === 'hide') {\n      return width;\n    } else if (this.ellipsis === 'add') {\n      return width + this.ellipsisWidth;\n    } else if (this.ellipsis === 'replace') {\n      // 找到需要截断的字符长度\n      // const index = getStrByWith(text, width - this.ellipsisWidth + this.ellipsisOtherParagraphWidth, this.style, text.length - 1);\n      const index = getStrByWithCanvas(\n        text,\n        width - this.ellipsisWidth + this.ellipsisOtherParagraphWidth,\n        this.character,\n        text.length - 1\n      );\n      text = text.slice(0, index);\n      text += '...';\n\n      const { width: measureWidth } = measureTextCanvas(this.text.slice(index), this.character);\n      return width + this.ellipsisWidth - measureWidth;\n    }\n    return width;\n  }\n}\n\nexport function seperateParagraph(paragraph: Paragraph, index: number) {\n  const text1 = paragraph.text.slice(0, index);\n  const text2 = paragraph.text.slice(index);\n  const p1 = new Paragraph(text1, paragraph.newLine, paragraph.character);\n  const p2 = new Paragraph(text2, true, paragraph.character);\n\n  return [p1, p2];\n}\n"]}