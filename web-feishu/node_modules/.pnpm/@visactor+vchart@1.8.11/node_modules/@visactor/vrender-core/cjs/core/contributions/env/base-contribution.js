"use strict";

var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.BaseEnvContribution = void 0;

const inversify_lite_1 = require("../../../common/inversify-lite"), vutils_1 = require("@visactor/vutils");

let BaseEnvContribution = class {
    configure(service, ...p) {
        service.env === this.type && service.setActiveEnvContribution(this);
    }
    getNativeAABBBounds(dom) {
        return new vutils_1.AABBBounds;
    }
    removeDom(dom) {
        return !1;
    }
    createDom(params) {
        return null;
    }
    getDynamicCanvasCount() {
        return 999;
    }
    getStaticCanvasCount() {
        return 999;
    }
    getElementById(str) {
        return document.getElementById(str);
    }
    getRootElement() {
        return document.body;
    }
    loadJson(url) {
        const jsonPromise = fetch(url).then((data => data.json()));
        return jsonPromise.then((json => ({
            data: json,
            state: "success"
        }))).catch((() => ({
            data: null,
            state: "fail"
        }))), jsonPromise;
    }
    loadArrayBuffer(url) {
        return fetch(url).then((data => data.arrayBuffer())).then((arrayBuffer => ({
            data: arrayBuffer,
            loadState: "success"
        }))).catch((() => ({
            data: null,
            loadState: "fail"
        })));
    }
    loadBlob(url) {
        return fetch(url).then((data => data.blob())).then((blob => ({
            data: blob,
            loadState: "success"
        }))).catch((() => ({
            data: null,
            loadState: "fail"
        })));
    }
    getElementTop(dom, baseWindow) {
        return 0;
    }
    getElementLeft(dom, baseWindow) {
        return 0;
    }
    getElementTopLeft(dom, baseWindow) {
        return {
            top: 0,
            left: 0
        };
    }
};

BaseEnvContribution = __decorate([ (0, inversify_lite_1.injectable)() ], BaseEnvContribution), 
exports.BaseEnvContribution = BaseEnvContribution;
//# sourceMappingURL=base-contribution.js.map
