{"version":3,"sources":["../src/picker/contributions/math-picker/circle-picker.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAajG,IAAM,uBAAuB,GAA7B,MAAM,uBAAuB;IAIlC,YAAkD,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAHhF,SAAI,GAAW,QAAQ,CAAC;QACxB,eAAU,GAAW,kBAAkB,CAAC;IAE2C,CAAC;IAEpF,QAAQ,CAAC,MAAe,EAAE,KAAa,EAAE,MAAoB;QAC3D,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YAC3C,OAAO,KAAK,CAAC;SACd;QACD,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,KAAK,WAAW,EAAE;YAC7C,OAAO,IAAI,CAAC;SACb;QAED,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,EAAE,CAAC;QACrC,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;QAGD,MAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;QAChD,IAAI,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC;QAExE,WAAW,CAAC,mBAAmB,EAAE,CAAC;QAClC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,EAAE;YAEvC,CAAC,GAAG,CAAC,CAAC;YACN,CAAC,GAAG,CAAC,CAAC;YACN,WAAW,CAAC,mBAAmB,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SAC3D;aAAM;YACL,MAAM,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;YAClD,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;YACb,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;YAEb,WAAW,CAAC,sBAAsB,EAAE,CAAC;SACtC;QAGD,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,CAAC,SAAS,CAC3B,MAAM,EACN,WAAW,EACX,CAAC,EACD,CAAC,EACD,EAAS,EACT,IAAI,EACJ,CACE,OAAmB,EACnB,eAA4D,EAC5D,cAA+B,EAC/B,EAAE;YAEF,IAAI,MAAM,EAAE;gBACV,OAAO,IAAI,CAAC;aACb;YACD,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YACjD,OAAO,MAAM,CAAC;QAChB,CAAC,EACD,CACE,OAAmB,EACnB,eAA4D,EAC5D,cAA+B,EAC/B,EAAE;YAEF,IAAI,MAAM,EAAE;gBACV,OAAO,IAAI,CAAC;aACb;YACD,MAAM,SAAS,GAAG,eAAe,CAAC,SAAS,IAAI,cAAc,CAAC,SAAS,CAAC;YACxE,MAAM,gBAAgB,GAAG,eAAe,CAAC,gBAAgB,IAAI,cAAc,CAAC,gBAAgB,CAAC;YAC7F,WAAW,CAAC,SAAS,GAAG,SAAS,GAAG,gBAAgB,CAAC;YACrD,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YACnD,OAAO,MAAM,CAAC;QAChB,CAAC,CACF,CAAC;QAEF,WAAW,CAAC,sBAAsB,EAAE,CAAC;QACrC,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAA;AA9EY,uBAAuB;IADnC,UAAU,EAAE;IAKE,WAAA,MAAM,CAAC,YAAY,CAAC,CAAA;;GAJtB,uBAAuB,CA8EnC;SA9EY,uBAAuB","file":"circle-picker.js","sourcesContent":["import type { IPoint } from '@visactor/vutils';\nimport { inject, injectable, CircleRender, getTheme, CIRCLE_NUMBER_TYPE } from '@visactor/vrender-core';\nimport type {\n  IGraphicAttribute,\n  ICircle,\n  IContext2d,\n  IMarkAttribute,\n  IThemeAttribute,\n  IGraphicPicker,\n  IGraphicRender,\n  IPickParams\n} from '@visactor/vrender-core';\n\n@injectable()\nexport class DefaultMathCirclePicker implements IGraphicPicker {\n  type: string = 'circle';\n  numberType: number = CIRCLE_NUMBER_TYPE;\n\n  constructor(@inject(CircleRender) public readonly canvasRenderer: IGraphicRender) {}\n\n  contains(circle: ICircle, point: IPoint, params?: IPickParams): boolean {\n    if (!circle.AABBBounds.containsPoint(point)) {\n      return false;\n    }\n    if (circle.attribute.pickMode === 'imprecise') {\n      return true;\n    }\n\n    const { pickContext } = params ?? {};\n    if (!pickContext) {\n      return false;\n    }\n\n    // const circleAttribute = graphicService.themeService.getCurrentTheme().circleAttribute;\n    const circleAttribute = getTheme(circle).circle;\n    let { x = circleAttribute.x, y = circleAttribute.y } = circle.attribute;\n\n    pickContext.highPerformanceSave();\n    if (!circle.transMatrix.onlyTranslate()) {\n      // 性能较差\n      x = 0;\n      y = 0;\n      pickContext.transformFromMatrix(circle.transMatrix, true);\n    } else {\n      const point = circle.getOffsetXY(circleAttribute);\n      x += point.x;\n      y += point.y;\n      // 当前context有rotate/scale，重置matrix\n      pickContext.setTransformForCurrent();\n    }\n\n    // 详细形状判断\n    let picked = false;\n    this.canvasRenderer.drawShape(\n      circle,\n      pickContext,\n      x,\n      y,\n      {} as any,\n      null,\n      (\n        context: IContext2d,\n        circleAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n        themeAttribute: IThemeAttribute\n      ) => {\n        // 选中后面就不需要再走逻辑了\n        if (picked) {\n          return true;\n        }\n        picked = context.isPointInPath(point.x, point.y);\n        return picked;\n      },\n      (\n        context: IContext2d,\n        circleAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n        themeAttribute: IThemeAttribute\n      ) => {\n        // 选中后面就不需要再走逻辑了\n        if (picked) {\n          return true;\n        }\n        const lineWidth = circleAttribute.lineWidth || themeAttribute.lineWidth;\n        const pickStrokeBuffer = circleAttribute.pickStrokeBuffer || themeAttribute.pickStrokeBuffer;\n        pickContext.lineWidth = lineWidth + pickStrokeBuffer;\n        picked = context.isPointInStroke(point.x, point.y);\n        return picked;\n      }\n    );\n\n    pickContext.highPerformanceRestore();\n    return picked;\n  }\n}\n"]}