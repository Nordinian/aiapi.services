import type { IMatrix, IPointLike } from '@visactor/vutils';
import { DefaultPickService } from '@visactor/vrender-core';
import type { ICanvas, IContext2d, IGraphic, EnvType, IGlobal, IGraphicPicker, IPickerService, IDrawContribution, IContributionProvider, IPickItemInterceptorContribution, IPickParams, PickResult } from '@visactor/vrender-core';
export declare class DefaultCanvasPickerService extends DefaultPickService implements IPickerService {
    protected readonly contributions: IContributionProvider<IGraphicPicker>;
    readonly drawContribution: IDrawContribution;
    protected readonly pickItemInterceptorContributions: IContributionProvider<IPickItemInterceptorContribution>;
    type: 'default';
    pickCanvas: ICanvas;
    pickContext: IContext2d;
    pickerMap: Map<number, IGraphicPicker>;
    constructor(contributions: IContributionProvider<IGraphicPicker>, drawContribution: IDrawContribution, pickItemInterceptorContributions: IContributionProvider<IPickItemInterceptorContribution>);
    init(): void;
    configure(global: IGlobal, env: EnvType): void;
    pickItem(graphic: IGraphic, point: IPointLike, parentMatrix: IMatrix | null, params: IPickParams): PickResult | null;
}
