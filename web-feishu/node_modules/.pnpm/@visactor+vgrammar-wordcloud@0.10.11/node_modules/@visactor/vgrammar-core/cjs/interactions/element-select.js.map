{"version":3,"sources":["../src/interactions/element-select.ts"],"names":[],"mappings":"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","file":"element-select.js","sourcesContent":["import { isNumber, isString } from '@visactor/vutils';\nimport { InteractionStateEnum } from '../graph/enums';\nimport type {\n  ElementSelectOptions,\n  EventType,\n  IElement,\n  IGlyphElement,\n  IMark,\n  IToggleStateMixin,\n  IView,\n  InteractionEvent\n} from '../types';\nimport { BaseInteraction } from './base';\nimport { groupMarksByState } from './utils';\n\nexport interface ElementSelect extends IToggleStateMixin, BaseInteraction<ElementSelectOptions> {}\n\nexport class ElementSelect extends BaseInteraction<ElementSelectOptions> {\n  static type: string = 'element-select';\n  type: string = ElementSelect.type;\n\n  static defaultOptions: ElementSelectOptions = {\n    state: InteractionStateEnum.selected,\n    trigger: 'click'\n  };\n  protected _resetType?: 'view' | 'self' | 'timeout';\n  protected _marks?: IMark[];\n  protected _stateMarks: Record<string, IMark[]>;\n  private _timer?: number;\n  protected _statedElements?: (IElement | IGlyphElement)[];\n\n  constructor(view: IView, options?: ElementSelectOptions) {\n    super(view, options);\n    this.options = Object.assign({}, ElementSelect.defaultOptions, options);\n\n    this._marks = view.getMarksBySelector(this.options.selector);\n    this._stateMarks = groupMarksByState(this._marks, [this.options.state, this.options.reverseState]);\n  }\n\n  protected getEvents() {\n    const resetTrigger = this.options.resetTrigger;\n    const trigger = this.options.trigger;\n\n    const events = [\n      {\n        type: trigger,\n        handler: this.handleStart\n      }\n    ];\n\n    let eventName = resetTrigger;\n\n    if (resetTrigger === 'empty') {\n      eventName = trigger as EventType;\n\n      this._resetType = 'view';\n    } else if (isString(resetTrigger)) {\n      if (resetTrigger.includes('view:')) {\n        eventName = resetTrigger.replace('view:', '') as EventType;\n\n        this._resetType = 'view';\n      } else {\n        eventName = resetTrigger;\n\n        this._resetType = 'self';\n      }\n    } else if (isNumber(resetTrigger)) {\n      eventName = null;\n      this._resetType = 'timeout';\n    } else {\n      this._resetType = null;\n    }\n\n    if (eventName && eventName !== trigger) {\n      events.push({ type: eventName as EventType, handler: this.handleReset });\n    }\n\n    return events;\n  }\n\n  clearPrevElements = () => {\n    const { state, reverseState } = this.options;\n\n    if (this._statedElements && this._statedElements.length) {\n      this.clearAllStates(state, reverseState);\n      this.dispatchEvent('reset', { elements: this._statedElements, options: this.options });\n\n      this._statedElements = [];\n    }\n  };\n\n  handleStart = (e: InteractionEvent) => {\n    const { state, reverseState, isMultiple } = this.options;\n\n    if (e.element && this._marks && this._marks.includes(e.element.mark)) {\n      if (e.element.hasState(state)) {\n        if (this._resetType === 'self') {\n          if (this._statedElements) {\n            this._statedElements = this._statedElements.filter(el => el !== e.element);\n          }\n\n          this.updateStates(state, reverseState);\n        }\n      } else {\n        if (this._timer) {\n          clearTimeout(this._timer);\n        }\n        e.element.addState(state);\n\n        if (!this._statedElements) {\n          this._statedElements = [];\n        }\n        if (isMultiple) {\n          this._statedElements.push(e.element);\n        } else {\n          this._statedElements[0] = e.element;\n        }\n        this.updateStates(state, reverseState);\n        this.dispatchEvent('start', { elements: this._statedElements, options: this.options });\n\n        if (this._resetType === 'timeout') {\n          this._timer = setTimeout(() => {\n            this.clearPrevElements();\n          }, this.options.resetTrigger as number) as unknown as number;\n        }\n      }\n    } else if (this._resetType === 'view' && this._statedElements && this._statedElements.length) {\n      this.clearPrevElements();\n    }\n  };\n\n  handleReset = (e: InteractionEvent) => {\n    const hasActiveElement = e.element && this._marks && this._marks.includes(e.element.mark);\n\n    if (!this._statedElements || !this._statedElements.length) {\n      return;\n    }\n\n    if (this._resetType === 'view' && !hasActiveElement) {\n      this.clearPrevElements();\n    } else if (this._resetType === 'self' && hasActiveElement) {\n      this.clearPrevElements();\n    }\n  };\n}\n"]}