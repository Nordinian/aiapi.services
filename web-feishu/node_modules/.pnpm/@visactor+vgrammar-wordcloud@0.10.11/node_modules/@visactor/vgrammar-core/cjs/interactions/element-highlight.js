"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.ElementHighlight = void 0;

const enums_1 = require("../graph/enums"), base_1 = require("./base"), utils_1 = require("./utils");

class ElementHighlight extends base_1.BaseInteraction {
    constructor(view, options) {
        super(view, options), this.type = ElementHighlight.type, this.handleStart = e => {
            if (e.element && this._marks && this._marks.includes(e.element.mark)) {
                const {highlightState: highlightState, blurState: blurState} = this.options;
                if (this._lastElement === e.element) return;
                this._statedElements = [ e.element ], this.updateStates(highlightState, blurState), 
                this._lastElement = e.element, this.dispatchEvent("start", {
                    elements: [ e.element ],
                    options: this.options
                });
            } else this._lastElement && this.clearPrevElements();
        }, this.handleReset = e => {
            e.element && this._marks && this._marks.includes(e.element.mark) && this.clearPrevElements();
        }, this.options = Object.assign({}, ElementHighlight.defaultOptions, options), this._marks = view.getMarksBySelector(this.options.selector), 
        this._stateMarks = (0, utils_1.groupMarksByState)(this._marks, [ this.options.highlightState, this.options.blurState ]);
    }
    getEvents() {
        return [ {
            type: this.options.trigger,
            handler: this.handleStart
        }, {
            type: this.options.resetTrigger,
            handler: this.handleReset
        } ];
    }
    clearPrevElements() {
        const {highlightState: highlightState, blurState: blurState} = this.options;
        this._lastElement && (this.clearAllStates(highlightState, blurState), this.dispatchEvent("reset", {
            elements: [ this._lastElement ],
            options: this.options
        }), this._lastElement = null);
    }
}

exports.ElementHighlight = ElementHighlight, ElementHighlight.type = "element-highlight", 
ElementHighlight.defaultOptions = {
    highlightState: enums_1.InteractionStateEnum.highlight,
    blurState: enums_1.InteractionStateEnum.blur,
    trigger: "pointerover",
    resetTrigger: "pointerout"
};
//# sourceMappingURL=element-highlight.js.map