{"version":3,"sources":["../src/graphic/richtext.ts"],"names":[],"mappings":"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","file":"richtext.js","sourcesContent":["import type { AABBBounds, OBBBounds } from '@visactor/vutils';\nimport type {\n  IRichText,\n  IRichTextCharacter,\n  RichTextGlobalAlignType,\n  RichTextGlobalBaselineType,\n  RichTextVerticalDirection,\n  RichTextWordBreak,\n  IRichTextGraphicAttribute,\n  IRichTextImageCharacter,\n  IRichTextParagraphCharacter,\n  IStage,\n  ILayer,\n  IRichTextIcon,\n  EventPoint\n} from '../interface';\nimport { Graphic, GRAPHIC_UPDATE_TAG_KEY, NOWORK_ANIMATE_ATTR } from './graphic';\nimport { DefaultRichTextAttribute } from './config';\nimport Frame from './richtext/frame';\nimport Paragraph from './richtext/paragraph';\nimport Wrapper from './richtext/wrapper';\nimport { getTheme } from './theme';\nimport { RichTextIcon } from './richtext/icon';\nimport type { FederatedMouseEvent } from '../event';\nimport { application } from '../application';\nimport { parsePadding } from '../common/utils';\nimport { RICHTEXT_NUMBER_TYPE } from './constants';\n\nconst RICHTEXT_UPDATE_TAG_KEY = [\n  'width',\n  'height',\n  'ellipsis',\n  'wordBreak',\n  'verticalDirection',\n  'maxHeight',\n  'maxWidth',\n  'textAlign',\n  'textBaseline',\n  'textConfig',\n  'layoutDirection',\n  ...GRAPHIC_UPDATE_TAG_KEY\n];\n\nexport class RichText extends Graphic<IRichTextGraphicAttribute> implements IRichText {\n  type: 'richtext' = 'richtext';\n\n  _frameCache: Frame; // 富文本布局画布\n  _currentHoverIcon: IRichTextIcon | null = null;\n\n  static NOWORK_ANIMATE_ATTR = {\n    ellipsis: 1,\n    wordBreak: 1,\n    verticalDirection: 1,\n    textAlign: 1,\n    textBaseline: 1,\n    textConfig: 1,\n    layoutDirection: 1,\n    ...NOWORK_ANIMATE_ATTR\n  };\n\n  constructor(params?: IRichTextGraphicAttribute) {\n    super(params);\n    this.numberType = RICHTEXT_NUMBER_TYPE;\n  }\n\n  get width(): number {\n    return this.attribute.width ?? DefaultRichTextAttribute.width;\n  }\n  set width(w: number) {\n    if (this.attribute.width === w) {\n      return;\n    }\n    this.attribute.width = w;\n    this.addUpdateShapeAndBoundsTag();\n  }\n  get height(): number {\n    return this.attribute.height ?? DefaultRichTextAttribute.height;\n  }\n  set height(h: number) {\n    if (this.attribute.height === h) {\n      return;\n    }\n    this.attribute.height = h;\n    this.addUpdateShapeAndBoundsTag();\n  }\n  get maxWidth(): number | undefined {\n    return this.attribute.maxWidth;\n  }\n  set maxWidth(mw: number | undefined) {\n    if (this.attribute.maxWidth === mw) {\n      return;\n    }\n    this.attribute.maxWidth = mw;\n    this.addUpdateShapeAndBoundsTag();\n  }\n  get maxHeight(): number | undefined {\n    return this.attribute.maxHeight;\n  }\n  set maxHeight(mh: number | undefined) {\n    if (this.attribute.maxHeight === mh) {\n      return;\n    }\n    this.attribute.maxHeight = mh;\n    this.addUpdateShapeAndBoundsTag();\n  }\n  get ellipsis(): boolean | string {\n    return this.attribute.ellipsis ?? DefaultRichTextAttribute.ellipsis;\n  }\n  set ellipsis(e: boolean | string) {\n    if (this.attribute.ellipsis === e) {\n      return;\n    }\n    this.attribute.ellipsis = e;\n    this.addUpdateShapeAndBoundsTag();\n  }\n  get wordBreak(): RichTextWordBreak {\n    return this.attribute.wordBreak ?? DefaultRichTextAttribute.wordBreak;\n  }\n  set wordBreak(wb: RichTextWordBreak) {\n    if (this.attribute.wordBreak === wb) {\n      return;\n    }\n    this.attribute.wordBreak = wb;\n    this.addUpdateShapeAndBoundsTag();\n  }\n  get verticalDirection(): RichTextVerticalDirection {\n    return this.attribute.verticalDirection ?? DefaultRichTextAttribute.verticalDirection;\n  }\n  set verticalDirection(vd: RichTextVerticalDirection) {\n    if (this.attribute.verticalDirection === vd) {\n      return;\n    }\n    this.attribute.verticalDirection = vd;\n    this.addUpdateShapeAndBoundsTag();\n  }\n  get textAlign(): RichTextGlobalAlignType {\n    return this.attribute.textAlign ?? DefaultRichTextAttribute.textAlign;\n  }\n  set textAlign(align: RichTextGlobalAlignType) {\n    if (this.attribute.textAlign === align) {\n      return;\n    }\n    this.attribute.textAlign = align;\n    this.addUpdateShapeAndBoundsTag();\n  }\n  get textBaseline(): RichTextGlobalBaselineType {\n    return this.attribute.textBaseline ?? DefaultRichTextAttribute.textBaseline;\n  }\n  set textBaseline(baseline: RichTextGlobalBaselineType) {\n    if (this.attribute.textBaseline === baseline) {\n      return;\n    }\n    this.attribute.textBaseline = baseline;\n    this.addUpdateShapeAndBoundsTag();\n  }\n  get textConfig(): IRichTextCharacter[] {\n    return this.attribute.textConfig ?? DefaultRichTextAttribute.textConfig;\n  }\n  set textConfig(config: IRichTextCharacter[]) {\n    this.attribute.textConfig = config;\n    this.addUpdateShapeAndBoundsTag();\n  }\n\n  protected doUpdateAABBBounds(): AABBBounds {\n    const richTextTheme = getTheme(this).richtext;\n    this._AABBBounds.setValue(Infinity, Infinity, -Infinity, -Infinity);\n    const attribute = this.attribute;\n    const bounds = application.graphicService.updateRichTextAABBBounds(\n      attribute,\n      getTheme(this).richtext,\n      this._AABBBounds,\n      this\n    ) as AABBBounds;\n\n    const { boundsPadding = richTextTheme.boundsPadding } = attribute;\n    const paddingArray = parsePadding(boundsPadding);\n    if (paddingArray) {\n      bounds.expand(paddingArray);\n    }\n\n    this.clearUpdateBoundTag();\n    return bounds;\n  }\n\n  protected tryUpdateOBBBounds(): OBBBounds {\n    throw new Error('暂不支持');\n  }\n\n  getDefaultAttribute(name: string) {\n    return DefaultRichTextAttribute[name];\n  }\n\n  protected needUpdateTags(keys: string[]): boolean {\n    return super.needUpdateTags(keys, RICHTEXT_UPDATE_TAG_KEY);\n  }\n  protected needUpdateTag(key: string): boolean {\n    return super.needUpdateTag(key, RICHTEXT_UPDATE_TAG_KEY);\n  }\n  getFrameCache(): Frame {\n    if (this.shouldUpdateShape()) {\n      this.doUpdateFrameCache();\n      this.clearUpdateShapeTag();\n    }\n    return this._frameCache;\n  }\n  doUpdateFrameCache() {\n    // 1. 测量，生成paragraph\n    const {\n      textConfig = [],\n      maxWidth,\n      maxHeight,\n      width,\n      height,\n      ellipsis,\n      wordBreak,\n      verticalDirection,\n      textAlign,\n      textBaseline,\n      layoutDirection,\n      singleLine\n    } = this.attribute;\n    const paragraphs: (Paragraph | RichTextIcon)[] = [];\n\n    for (let i = 0; i < textConfig.length; i++) {\n      if ('image' in textConfig[i]) {\n        const config = textConfig[i] as IRichTextImageCharacter;\n        // 直接创建icon Mark\n        const iconCache =\n          config.id && this._frameCache && this._frameCache.icons && this._frameCache.icons.get(config.id);\n        if (iconCache) {\n          paragraphs.push(iconCache as RichTextIcon);\n        } else {\n          const icon = new RichTextIcon(config);\n          icon.successCallback = () => {\n            this.addUpdateBoundTag();\n            this.stage?.renderNextFrame();\n          };\n          icon.richtextId = config.id;\n          paragraphs.push(icon);\n        }\n      } else if ((textConfig[i] as IRichTextParagraphCharacter).text.includes('\\n')) {\n        // 如果有文字内有换行符，将该段文字切为多段，并在后一段加入newLine标记\n        const textParts = (textConfig[i] as IRichTextParagraphCharacter).text.split('\\n');\n        for (let j = 0; j < textParts.length; j++) {\n          paragraphs.push(new Paragraph(textParts[j], j !== 0, textConfig[i] as IRichTextParagraphCharacter));\n        }\n      } else {\n        paragraphs.push(\n          new Paragraph(\n            (textConfig[i] as IRichTextParagraphCharacter).text,\n            false,\n            textConfig[i] as IRichTextParagraphCharacter\n          )\n        );\n      }\n    }\n\n    // 2. 布局，生成frame\n    // const frameHeight =\n    //   typeof maxHeight === 'number' && (!height || height > maxHeight) // height = 0或height>maxHeight，使用maxHeight布局\n    //     ? maxHeight\n    //     : height;\n    // const frameWidth =\n    //   typeof maxWidth === 'number' && (!width || width > maxWidth) // height = 0或height>maxWidth，使用maxWidth布局\n    //     ? maxWidth\n    //     : width;\n\n    const maxWidthFinite = typeof maxWidth === 'number' && Number.isFinite(maxWidth) && maxWidth > 0;\n    const maxHeightFinite = typeof maxHeight === 'number' && Number.isFinite(maxHeight) && maxHeight > 0;\n\n    const richTextWidthEnable =\n      typeof width === 'number' &&\n      Number.isFinite(width) &&\n      width > 0 &&\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      (!maxWidthFinite || width <= maxWidth);\n    const richTextHeightEnable =\n      typeof height === 'number' &&\n      Number.isFinite(height) &&\n      height > 0 &&\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      (!maxHeightFinite || height <= maxHeight);\n\n    const frameWidth = richTextWidthEnable ? width : maxWidthFinite ? maxWidth : 0;\n    const frameHeight = richTextHeightEnable ? height : maxHeightFinite ? maxHeight : 0;\n\n    const frame = new Frame(\n      0,\n      0,\n      frameWidth || 0,\n      frameHeight || 0,\n      ellipsis,\n      wordBreak,\n      verticalDirection,\n      textAlign,\n      textBaseline,\n      layoutDirection || 'horizontal',\n      // typeof maxWidth === 'number' && (!width || width > maxWidth),\n      // typeof maxHeight === 'number' && (!height || height > maxHeight),\n      !richTextWidthEnable && maxWidthFinite,\n      !richTextHeightEnable && maxHeightFinite,\n      singleLine || false,\n      this._frameCache?.icons\n    );\n    const wrapper = new Wrapper(frame);\n    for (let i = 0; i < paragraphs.length; i++) {\n      wrapper.deal(paragraphs[i]);\n    }\n\n    wrapper.send(); // 最后一行手动输出\n\n    // 如果对应的配置宽度不可用，那么需要额外进行一次对齐\n    const directionEnable = frame.layoutDirection === 'horizontal' ? richTextWidthEnable : richTextHeightEnable;\n    if (!directionEnable) {\n      // 使用实际宽度\n      const frameSize = frame.getActualSizeWidthEllipsis();\n      let offsetSize = frame.layoutDirection === 'horizontal' ? frameSize.width : frameSize.height;\n      // 如果最大值可用\n      if (frame.layoutDirection === 'horizontal' ? maxWidthFinite : maxHeightFinite) {\n        // 取2者中的较小值\n        offsetSize = Math.min(\n          offsetSize,\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          frame.layoutDirection === 'horizontal' ? maxWidth : maxHeight\n        );\n      }\n\n      frame.lines.forEach(function (l) {\n        l.calcOffset(offsetSize, false);\n      });\n    }\n\n    this._frameCache = frame;\n\n    // this.bindIconEvent();\n  }\n\n  clone() {\n    return new RichText({ ...this.attribute });\n  }\n\n  setStage(stage?: IStage, layer?: ILayer) {\n    super.setStage(stage, layer);\n    const frameCache = this.getFrameCache();\n    // for (let i = 0; i < frameCache.icons.length; i++) {\n    //   const icon = frameCache.icons[i];\n    //   icon.setStage(stage, layer);\n    // }\n    frameCache.icons.forEach(icon => {\n      icon.setStage(stage, layer);\n    });\n  }\n\n  // richtext绑定icon交互事件，供外部调用\n  bindIconEvent() {\n    this.addEventListener('pointermove', (e: FederatedMouseEvent) => {\n      const pickedIcon = this.pickIcon(e.global);\n      if (pickedIcon && pickedIcon === this._currentHoverIcon) {\n        // do nothing\n      } else if (pickedIcon) {\n        this._currentHoverIcon?.setHoverState(false);\n        this._currentHoverIcon = pickedIcon;\n        this._currentHoverIcon.setHoverState(true);\n        this.stage?.setCursor(pickedIcon.attribute.cursor);\n        this.stage?.renderNextFrame();\n      } else if (!pickedIcon && this._currentHoverIcon) {\n        this._currentHoverIcon.setHoverState(false);\n        this._currentHoverIcon = null;\n        this.stage?.setCursor();\n        // console.log('setCursor()');\n\n        this.stage?.renderNextFrame();\n      }\n    });\n\n    this.addEventListener('pointerleave', (e: FederatedMouseEvent) => {\n      if (this._currentHoverIcon) {\n        this._currentHoverIcon.setHoverState(false);\n        this._currentHoverIcon = null;\n        this.stage?.setCursor();\n        this.stage?.renderNextFrame();\n      }\n    });\n  }\n\n  pickIcon(point: EventPoint): IRichTextIcon | undefined {\n    const frameCache = this.getFrameCache();\n    const { e: x, f: y } = this.globalTransMatrix;\n    // for (let i = 0; i < frameCache.icons.length; i++) {\n    //   const icon = frameCache.icons[i];\n    //   if (icon.containsPoint(point.x - x, point.y - y)) {\n    //     return icon;\n    //   }\n    // }\n    let pickIcon: IRichTextIcon | undefined;\n    frameCache.icons.forEach(icon => {\n      if (icon.AABBBounds.containsPoint({ x: point.x - x, y: point.y - y })) {\n        pickIcon = icon;\n\n        pickIcon.globalX = (pickIcon.attribute.x ?? 0) + x;\n        pickIcon.globalY = (pickIcon.attribute.y ?? 0) + y;\n      }\n    });\n\n    return pickIcon;\n  }\n\n  getNoWorkAnimateAttr(): Record<string, number> {\n    return RichText.NOWORK_ANIMATE_ATTR;\n  }\n}\n\nexport function createRichText(attributes: IRichTextGraphicAttribute): IRichText {\n  return new RichText(attributes);\n}\n"]}