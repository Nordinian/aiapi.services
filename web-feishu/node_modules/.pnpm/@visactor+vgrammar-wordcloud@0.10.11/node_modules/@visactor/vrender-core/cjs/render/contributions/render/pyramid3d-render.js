"use strict";

var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.DefaultCanvasPyramid3dRender = void 0;

const inversify_lite_1 = require("../../../common/inversify-lite"), theme_1 = require("../../../graphic/theme"), constants_1 = require("../../../graphic/constants"), base_render_1 = require("./base-render"), color_string_1 = require("../../../color-string");

let DefaultCanvasPyramid3dRender = class extends base_render_1.BaseRender {
    constructor() {
        super(...arguments), this.type = "pyramid3d", this.numberType = constants_1.PYRAMID3D_NUMBER_TYPE;
    }
    drawShape(pyramid3d, context, x, y, drawContext, params, fillCb, strokeCb) {
        var _a;
        const pyramidAttribute = (0, theme_1.getTheme)(pyramid3d, null == params ? void 0 : params.theme).polygon, {fill: fill = pyramidAttribute.fill, stroke: stroke = pyramidAttribute.stroke, face: face = [ !0, !0, !0, !0, !0, !0 ]} = pyramid3d.attribute, z = null !== (_a = this.z) && void 0 !== _a ? _a : 0;
        if (!this.valid(pyramid3d, pyramidAttribute, fillCb, strokeCb)) return;
        const {light: light, camera: camera} = drawContext.stage || {}, face3d = pyramid3d.findFace();
        if (!1 !== fill) {
            context.setCommonStyle(pyramid3d, pyramid3d.attribute, x, y, pyramidAttribute);
            let fc = fill;
            "string" != typeof fc && (fc = "black"), this.fill(x, y, z, face3d, face, fc, context, light, camera, pyramid3d, pyramidAttribute, fillCb);
        }
        !1 !== stroke && (context.setStrokeStyle(pyramid3d, pyramid3d.attribute, x, y, pyramidAttribute), 
        this.stroke(x, y, z, face3d, context));
    }
    stroke(x, y, z, face3d, context) {
        const vertices = face3d.vertices;
        face3d.edges.forEach((p => {
            const p1 = vertices[p[0]], p2 = vertices[p[1]], v1 = {
                x: x + p1[0],
                y: y + p1[1],
                z: z + p1[2]
            }, v2 = {
                x: x + p2[0],
                y: y + p2[1],
                z: z + p2[2]
            };
            context.beginPath(), context.moveTo(v1.x, v1.y, v1.z), context.lineTo(v2.x, v2.y, v2.z), 
            context.stroke();
        }));
    }
    fill(x, y, z, face3d, faces, fillColor, context, light, camera, pyramid3d, pyramid3dAttribute, fillCb) {
        const rgbArray = color_string_1.ColorStore.Get(fillColor, color_string_1.ColorType.Color255), vertices = face3d.vertices, viewdVerticesZ = vertices.map((v => context.view(v[0], v[1], v[2])[2])), sortFace = [];
        face3d.polygons.forEach(((p, i) => {
            if (!faces[i]) return;
            sortFace.push({
                faceIdx: i,
                polygon: p
            });
            const {polygon: polygon, normal: normal} = p, z1 = viewdVerticesZ[polygon[0]], z2 = viewdVerticesZ[polygon[1]], z3 = viewdVerticesZ[polygon[2]], z4 = viewdVerticesZ[polygon[3]];
            p.ave_z = z1 + z2 + z3 + z4;
        })), sortFace.sort(((a, b) => b.polygon.ave_z - a.polygon.ave_z)), sortFace.forEach((item => {
            const {polygon: polygon, normal: normal} = item.polygon, p1 = vertices[polygon[0]], p2 = vertices[polygon[1]], p3 = vertices[polygon[2]], p4 = vertices[polygon[3]], v1 = {
                x: x + p1[0],
                y: y + p1[1],
                z: z + p1[2]
            }, v2 = {
                x: x + p2[0],
                y: y + p2[1],
                z: z + p2[2]
            }, v3 = {
                x: x + p3[0],
                y: y + p3[1],
                z: z + p3[2]
            }, v4 = {
                x: x + p4[0],
                y: y + p4[1],
                z: z + p4[2]
            };
            context.beginPath(), context.moveTo(v1.x, v1.y, v1.z), context.lineTo(v2.x, v2.y, v2.z), 
            context.lineTo(v3.x, v3.y, v3.z), context.lineTo(v4.x, v4.y, v4.z), context.closePath(), 
            fillCb ? fillCb(context, pyramid3d.attribute, pyramid3dAttribute) : (context.fillStyle = light ? light.computeColor(normal, rgbArray) : fillColor, 
            context.fill());
        }));
    }
    draw(pyramid3d, renderService, drawContext) {
        const pyramid3dAttribute = (0, theme_1.getTheme)(pyramid3d).polygon;
        this._draw(pyramid3d, pyramid3dAttribute, !1, drawContext);
    }
};

DefaultCanvasPyramid3dRender = __decorate([ (0, inversify_lite_1.injectable)() ], DefaultCanvasPyramid3dRender), 
exports.DefaultCanvasPyramid3dRender = DefaultCanvasPyramid3dRender;
//# sourceMappingURL=pyramid3d-render.js.map
