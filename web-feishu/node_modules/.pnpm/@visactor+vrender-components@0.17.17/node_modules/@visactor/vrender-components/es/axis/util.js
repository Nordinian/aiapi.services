import { getTextBounds } from "@visactor/vrender-core";

import { isGreater, isLess, tau } from "@visactor/vutils";

export const clampRadian = (angle = 0) => {
    if (angle < 0) for (;angle < 0; ) angle += tau; else if (angle > 0) for (;angle > tau; ) angle -= tau;
    return angle;
};

export function isInRange(a, min, max) {
    return !isLess(a, min, 0, 1e-6) && !isGreater(a, max, 0, 1e-6);
}

export function getLabelPosition(tickPosition, tickVector, text, style) {
    const labelBounds = getTextBounds(Object.assign({
        text: text
    }, style)), width = labelBounds.width(), height = labelBounds.height(), angle = clampRadian(Math.atan2(tickVector[1], tickVector[0])) - Math.PI, PI_3_4 = 3 * Math.PI / 4, PI_1_4 = Math.PI / 4, PI_1_2 = Math.PI / 2, baseX = tickPosition.x;
    let dx = 0;
    dx = isInRange(angle, -PI_3_4, -PI_1_4) ? ((angle + PI_3_4) / PI_1_2 - .5) * width : isInRange(angle, PI_1_4, PI_3_4) ? (.5 - (angle - PI_1_4) / PI_1_2) * width : Math.cos(angle) >= 0 ? .5 * width : .5 * -width;
    const x = baseX - dx, baseY = tickPosition.y;
    let dy = 0;
    dy = isInRange(angle, -PI_3_4, -PI_1_4) ? .5 * -height : isInRange(angle, PI_1_4, PI_3_4) ? .5 * height : Math.cos(angle) >= 0 ? (.5 - (PI_1_4 - angle) / PI_1_2) * height : (.5 - clampRadian(angle - PI_3_4) / PI_1_2) * height;
    return {
        x: x,
        y: baseY - dy
    };
}
//# sourceMappingURL=util.js.map