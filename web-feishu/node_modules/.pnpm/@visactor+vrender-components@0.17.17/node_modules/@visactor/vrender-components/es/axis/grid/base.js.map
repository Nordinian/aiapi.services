{"version":3,"sources":["../src/axis/grid/base.ts"],"names":[],"mappings":"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","file":"base.js","sourcesContent":["/**\n * @description 网格线\n */\nimport { isFunction, isArray, merge, PointService, abs, pi } from '@visactor/vutils';\nimport type { IGroup, Path } from '@visactor/vrender-core';\nimport { graphicCreator } from '@visactor/vrender-core';\nimport { AbstractComponent } from '../../core/base';\nimport type { Point } from '../../core/type';\nimport type { GridItem, CircleGridAttributes, GridBaseAttributes, GridAttributes, LineGridAttributes } from './type';\nimport type { AxisItem, TransformedAxisItem } from '../type';\nimport { AXIS_ELEMENT_NAME } from '../constant';\n\nfunction getLinePath(points: Point[], closed: boolean) {\n  let path = '';\n  if (points.length === 0) {\n    return path;\n  }\n  points.forEach((point, index) => {\n    if (index === 0) {\n      path = `M${point.x},${point.y}`;\n    } else {\n      path += `L${point.x},${point.y}`;\n    }\n  });\n  if (closed) {\n    path += 'Z';\n  }\n\n  return path;\n}\n\nfunction getArcPath(center: Point, points: Point[], reverse: boolean, closed: boolean) {\n  let path = '';\n  if (!center || points.length === 0) {\n    return path;\n  }\n  const firstPoint = points[0];\n  const radius = PointService.distancePP(center, firstPoint);\n  const sweepFlag = reverse ? 0 : 1; // 顺时针还是逆时针\n  if (closed) {\n    // 封闭时，绘制整个圆\n    path += `M${center.x},${center.y - radius}A${radius},${radius},0,0,${sweepFlag},${center.x},${\n      center.y + radius\n    }A${radius},${radius},0,0,${sweepFlag},${center.x},${center.y - radius}Z`;\n  } else {\n    points.forEach((point, index) => {\n      if (index === 0) {\n        path = `M${point.x},${point.y}`;\n      } else {\n        path += `A${radius},${radius},0,0,${sweepFlag},${point.x},${point.y}`;\n      }\n    });\n  }\n\n  return path;\n}\n\nfunction getRegionPath(from: Point[], to: Point[], attribute: GridAttributes) {\n  const { type, closed } = attribute;\n  const reversePoints = to.slice(0).reverse();\n\n  let regionPath = '';\n  let nextPath = '';\n\n  if (type === 'line' && (attribute as LineGridAttributes).smoothLink && (attribute as LineGridAttributes).center) {\n    const fromStart = from[0];\n    const toEnd = reversePoints[0];\n    const center = (attribute as LineGridAttributes).center as Point;\n\n    regionPath = getLinePath(from, !!closed);\n    nextPath = getLinePath(reversePoints, !!closed);\n    const toEndRadius = PointService.distancePP(toEnd, center);\n    const fromStartRadius = PointService.distancePP(fromStart, center);\n    regionPath += `A${toEndRadius},${toEndRadius},0,0,1,${toEnd.x},${toEnd.y}L${toEnd.x},${toEnd.y}`;\n    nextPath += `A${fromStartRadius},${fromStartRadius},0,0,0,${fromStart.x},${fromStart.y}`;\n  } else if (type === 'circle') {\n    const { center } = attribute as CircleGridAttributes;\n    regionPath = getArcPath(center, from, false, !!closed);\n    nextPath = getArcPath(center, reversePoints, true, !!closed);\n  } else if (type === 'line' || type === 'polygon') {\n    regionPath = getLinePath(from, !!closed);\n    nextPath = getLinePath(reversePoints, !!closed);\n  }\n\n  if (closed) {\n    regionPath += nextPath;\n  } else {\n    nextPath = 'L' + nextPath.substring(1); // 更新第一个节点\n    regionPath += nextPath;\n    regionPath += 'Z';\n  }\n  return regionPath;\n}\n\nexport abstract class BaseGrid<T extends GridBaseAttributes> extends AbstractComponent<Required<T>> {\n  name = 'axis-grid';\n\n  static defaultAttributes: Partial<GridBaseAttributes> = {\n    style: {\n      lineWidth: 1,\n      stroke: '#999',\n      strokeOpacity: 1,\n      lineDash: [4, 4]\n    },\n    subGrid: {\n      visible: false,\n      style: {\n        lineWidth: 1,\n        stroke: '#999',\n        strokeOpacity: 1,\n        lineDash: [4, 4]\n      }\n    }\n  };\n\n  protected _innerView: IGroup;\n  getInnerView() {\n    return this._innerView;\n  }\n\n  protected _prevInnerView: IGroup; // 缓存旧场景树，用于自定义动画\n  /**\n   * 获取更新前的旧场景树\n   * @returns 返回更新前的旧场景树\n   */\n  getPrevInnerView() {\n    return this._prevInnerView;\n  }\n\n  // 经过处理后的坐标轴点数据\n  protected data: TransformedAxisItem[] = [];\n  abstract getTickCoord(value: number): Point;\n  abstract isInValidValue(value: number): boolean;\n  abstract getVerticalVector(offset: number, inside: boolean, point: Point): [number, number];\n  protected abstract getGridAttribute(isSubGrid: boolean): T;\n\n  protected render(): void {\n    this.removeAllChild();\n    this._prevInnerView = this._innerView;\n    this._innerView = graphicCreator.group({ x: 0, y: 0, pickable: false });\n    this.add(this._innerView);\n\n    const { items, visible } = this.attribute;\n    if (items && items.length && visible !== false) {\n      this.data = this._transformItems(items);\n      this._renderGrid(this._innerView);\n    }\n  }\n\n  protected getVerticalCoord(point: Point, offset: number, inside: boolean): Point {\n    const vector = this.getVerticalVector(offset, inside, point);\n    return {\n      x: point.x + vector[0],\n      y: point.y + vector[1]\n    };\n  }\n\n  private _transformItems(items: AxisItem[]) {\n    const data: TransformedAxisItem[] = [];\n    items.forEach((item: AxisItem) => {\n      data.push({\n        ...item,\n        point: this.getTickCoord(item.value),\n        id: item.id ?? item.label\n      });\n    });\n    return data;\n  }\n  private _renderGrid(container: any) {\n    // 渲染 subGrid\n    const { visible } = this.attribute.subGrid || {};\n    if (visible) {\n      this._renderGridByType(true, container);\n    }\n\n    // 渲染 Grid，Grid 需要在 subGrid 上层渲染\n    this._renderGridByType(false, container);\n  }\n\n  private _renderGridByType(isSubGrid: boolean, container: IGroup) {\n    const gridAttrs = merge({}, this.attribute, this.getGridAttribute(isSubGrid));\n\n    const { type, items, style, closed, alternateColor, depth = 0 } = gridAttrs;\n    const name = isSubGrid ? `${AXIS_ELEMENT_NAME.grid}-sub` : `${AXIS_ELEMENT_NAME.grid}`;\n\n    // 绘制网格线\n    items.forEach((item: GridItem, index: number) => {\n      const { id, points } = item;\n      let path = '';\n      if (type === 'line' || type === 'polygon') {\n        path = getLinePath(points, !!closed);\n      } else if (type === 'circle') {\n        const { center } = this.attribute as unknown as CircleGridAttributes;\n        path = getArcPath(center, points, false, !!closed);\n      }\n      const shape = graphicCreator.path({\n        path,\n        z: depth,\n        ...(isFunction(style)\n          ? merge({}, this.skipDefault ? null : BaseGrid.defaultAttributes.style, style(item, index))\n          : style)\n      }) as Path;\n      shape.name = `${name}-line`;\n      shape.id = this._getNodeId(`${name}-path-${id}`);\n      container.add(shape);\n    });\n\n    // 添加额外的3d线段\n    if (depth && type === 'line') {\n      items.forEach((item: GridItem, index: number) => {\n        const { id, points } = item;\n        // 重新计算points，使其长度为depth\n        const nextPoints = [];\n        nextPoints.push(points[0]);\n        const dir = { x: points[1].x - points[0].x, y: points[1].y - points[0].y };\n        const dirLen = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n        const ratio = depth / dirLen;\n        nextPoints.push({ x: points[0].x + dir.x * ratio, y: points[0].y + dir.y * ratio });\n        const path = getLinePath(nextPoints, !!closed);\n        const deltaX = abs(nextPoints[0].x - nextPoints[1].x);\n        const deltaY = abs(nextPoints[0].y - nextPoints[1].y);\n        const shape = graphicCreator.path({\n          path,\n          z: 0,\n          alpha: deltaX > deltaY ? ((points[1].x - points[0].x > 0 ? -1 : 1) * pi) / 2 : 0,\n          beta: deltaX < deltaY ? -pi / 2 : 0,\n          anchor3d: deltaX > deltaY ? [nextPoints[0].x, 0] : [0, nextPoints[0].y],\n          ...(isFunction(style)\n            ? merge({}, this.skipDefault ? null : BaseGrid.defaultAttributes.style, style(item, index))\n            : style)\n        }) as Path;\n        shape.name = `${name}-line`;\n        shape.id = this._getNodeId(`${name}-path-${id}`);\n        container.add(shape);\n      });\n    }\n\n    // 绘制填充区域\n    if (items.length > 1 && alternateColor) {\n      const colors: string[] = isArray(alternateColor)\n        ? (alternateColor as string[])\n        : [alternateColor as string, 'transparent'];\n      const getColor = (index: number) => colors[index % colors.length];\n\n      // const regions: any[] = [];\n      for (let index = 0; index < items.length - 1; index++) {\n        const [prev, curr] = [items[index].points, items[index + 1].points];\n        const path = getRegionPath(prev, curr, gridAttrs);\n        const shape = graphicCreator.path({\n          path,\n          fill: getColor(index)\n        }) as Path;\n        shape.name = `${name}-region`;\n        shape.id = this._getNodeId(`${name}-region-${index}`);\n        container.add(shape);\n      }\n    }\n  }\n\n  /**\n   * @override 覆写\n   * @param id\n   * @returns\n   */\n  protected _getNodeId(id: string) {\n    return `${this.id}-${id}`;\n  }\n}\n"]}