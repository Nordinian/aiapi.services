{"version":3,"sources":["../src/allocator/allocator-modules.ts"],"names":[],"mappings":"","file":"allocator-modules.js","sourcesContent":["// import { DefaultCanvasAllocate } from './canvas-allocate';\n// import {\n//   DefaultRectAllocate,\n//   DefaultArcAllocate,\n//   DefaultAreaAllocate,\n//   DefaultLineAllocate,\n//   DefaultPathAllocate,\n//   DefaultSymbolAllocate,\n//   DefaultTextAllocate,\n//   DefaultCircleAllocate\n// } from './graphic-allocate';\n// import {\n//   CanvasAllocate,\n//   RectAllocate,\n//   ArcAllocate,\n//   AreaAllocate,\n//   LineAllocate,\n//   PathAllocate,\n//   SymbolAllocate,\n//   TextAllocate,\n//   CircleAllocate\n// } from './constants';\n// import { DefaultMat4Allocate, DefaultMatrixAllocate, Mat4Allocate, MatrixAllocate } from './matrix-allocate';\n\n// export default new ContainerModule(bind => {\n//   bind(DefaultMatrixAllocate).toSelf().inSingletonScope();\n//   bind(MatrixAllocate).toService(DefaultMatrixAllocate);\n\n//   bind(DefaultMat4Allocate).toSelf().inSingletonScope();\n//   bind(Mat4Allocate).toService(DefaultMat4Allocate);\n\n//   bind(DefaultCanvasAllocate).toSelf().inSingletonScope();\n//   bind(CanvasAllocate).toService(DefaultCanvasAllocate);\n\n//   bind(DefaultRectAllocate).toSelf().inSingletonScope();\n//   bind(RectAllocate).toService(DefaultRectAllocate);\n\n//   bind(DefaultCircleAllocate).toSelf().inSingletonScope();\n//   bind(CircleAllocate).toService(DefaultCircleAllocate);\n\n//   bind(DefaultArcAllocate).toSelf().inSingletonScope();\n//   bind(ArcAllocate).toService(DefaultArcAllocate);\n\n//   bind(DefaultAreaAllocate).toSelf().inSingletonScope();\n//   bind(AreaAllocate).toService(DefaultAreaAllocate);\n\n//   bind(DefaultLineAllocate).toSelf().inSingletonScope();\n//   bind(LineAllocate).toService(DefaultLineAllocate);\n\n//   bind(DefaultPathAllocate).toSelf().inSingletonScope();\n//   bind(PathAllocate).toService(DefaultPathAllocate);\n\n//   bind(DefaultSymbolAllocate).toSelf().inSingletonScope();\n//   bind(SymbolAllocate).toService(DefaultSymbolAllocate);\n\n//   bind(DefaultTextAllocate).toSelf().inSingletonScope();\n//   bind(TextAllocate).toService(DefaultTextAllocate);\n// });\n"]}