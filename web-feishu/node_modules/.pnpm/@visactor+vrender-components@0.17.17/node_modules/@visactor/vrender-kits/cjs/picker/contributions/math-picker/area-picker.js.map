{"version":3,"sources":["../src/picker/contributions/math-picker/area-picker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,yDAAoG;AAK7F,IAAM,qBAAqB,GAA3B,MAAM,qBAAqB;IAIhC,YAAgD,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAH9E,SAAI,GAAW,MAAM,CAAC;QACtB,eAAU,GAAW,+BAAgB,CAAC;IAE2C,CAAC;IAElF,QAAQ,CAAC,IAAW,EAAE,KAAa,EAAE,MAAoB;QACvD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YACzC,OAAO,KAAK,CAAC;SACd;QACD,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,KAAK,WAAW,EAAE;YAC3C,OAAO,IAAI,CAAC;SACb;QAED,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,EAAE,CAAC;QACrC,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;QAGD,MAAM,aAAa,GAAG,IAAA,uBAAQ,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC;QAC1C,IAAI,EAAE,CAAC,GAAG,aAAa,CAAC,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAElE,WAAW,CAAC,mBAAmB,EAAE,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,EAAE;YAErC,CAAC,GAAG,CAAC,CAAC;YACN,CAAC,GAAG,CAAC,CAAC;YACN,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SACzD;aAAM;YACL,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;YAC9C,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;YACb,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;YAEb,WAAW,CAAC,sBAAsB,EAAE,CAAC;SACtC;QAGD,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,EAAS,EAAE,IAAI,EAAE,OAAO,CAAC,EAAE;YAEhF,IAAI,MAAM,EAAE;gBACV,OAAO,IAAI,CAAC;aACb;YACD,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YACjD,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,WAAW,CAAC,sBAAsB,EAAE,CAAC;QAErC,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAA;AApDY,qBAAqB;IADjC,IAAA,yBAAU,GAAE;IAKE,WAAA,IAAA,qBAAM,EAAC,yBAAU,CAAC,CAAA;;GAJpB,qBAAqB,CAoDjC;AApDY,sDAAqB","file":"area-picker.js","sourcesContent":["import { inject, injectable, getTheme, AreaRender, AREA_NUMBER_TYPE } from '@visactor/vrender-core';\nimport type { IPoint } from '@visactor/vutils';\nimport type { IArea, IGraphicPicker, IGraphicRender, IPickParams } from '@visactor/vrender-core';\n\n@injectable()\nexport class DefaultMathAreaPicker implements IGraphicPicker {\n  type: string = 'area';\n  numberType: number = AREA_NUMBER_TYPE;\n\n  constructor(@inject(AreaRender) public readonly canvasRenderer: IGraphicRender) {}\n\n  contains(area: IArea, point: IPoint, params?: IPickParams): boolean {\n    if (!area.AABBBounds.containsPoint(point)) {\n      return false;\n    }\n    if (area.attribute.pickMode === 'imprecise') {\n      return true;\n    }\n\n    const { pickContext } = params ?? {};\n    if (!pickContext) {\n      return false;\n    }\n\n    // const areaAttribute = graphicService.themeService.getCurrentTheme().areaAttribute;\n    const areaAttribute = getTheme(area).area;\n    let { x = areaAttribute.x, y = areaAttribute.y } = area.attribute;\n\n    pickContext.highPerformanceSave();\n    if (!area.transMatrix.onlyTranslate()) {\n      // 性能较差\n      x = 0;\n      y = 0;\n      pickContext.transformFromMatrix(area.transMatrix, true);\n    } else {\n      const point = area.getOffsetXY(areaAttribute);\n      x += point.x;\n      y += point.y;\n      // 当前context有rotate/scale，重置matrix\n      pickContext.setTransformForCurrent();\n    }\n\n    // 详细形状判断\n    let picked = false;\n    this.canvasRenderer.drawShape(area, pickContext, x, y, {} as any, null, context => {\n      // 选中后面就不需要再走逻辑了\n      if (picked) {\n        return true;\n      }\n      picked = context.isPointInPath(point.x, point.y);\n      return picked;\n    });\n\n    pickContext.highPerformanceRestore();\n    // area没有stroke pick\n    return picked;\n  }\n}\n"]}