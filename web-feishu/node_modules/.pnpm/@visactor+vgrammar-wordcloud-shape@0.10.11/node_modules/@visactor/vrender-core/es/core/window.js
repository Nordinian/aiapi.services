var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}, __metadata = this && this.__metadata || function(k, v) {
    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v);
};

import { injectable } from "../common/inversify-lite";

import { Generator } from "../common/generator";

import { container } from "../container";

import { SyncHook } from "../tapable";

import { application } from "../application";

export const VWindow = Symbol.for("VWindow");

export const WindowHandlerContribution = Symbol.for("WindowHandlerContribution");

let DefaultWindow = class {
    get width() {
        if (this._handler) {
            const wh = this._handler.getWH();
            return this._width = wh.width;
        }
        return this._width;
    }
    get height() {
        if (this._handler) {
            const wh = this._handler.getWH();
            return this._height = wh.height;
        }
        return this._height;
    }
    get dpr() {
        return this._handler.getDpr();
    }
    constructor() {
        this.hooks = {
            onChange: new SyncHook([ "x", "y", "width", "height" ])
        }, this._uid = Generator.GenAutoIncrementId(), this.global = application.global, 
        this.postInit();
    }
    postInit() {
        this.global.hooks.onSetEnv.tap("window", (() => {
            this.active();
        })), this.active();
    }
    active() {
        const global = this.global;
        if (!global.env || this.actived) return;
        container.getNamed(WindowHandlerContribution, global.env).configure(this, global), 
        this.actived = !0;
    }
    get style() {
        return this._handler.getStyle();
    }
    set style(style) {
        this._handler.setStyle(style);
    }
    create(params) {
        this._handler.createWindow(params);
        const windowWH = this._handler.getWH();
        this._width = windowWH.width, this._height = windowWH.height, this.title = this._handler.getTitle(), 
        this.resizable = !0;
    }
    setWindowHandler(handler) {
        this._handler = handler;
    }
    setDpr(dpr) {
        return this._handler.setDpr(dpr);
    }
    resize(w, h) {
        return this._handler.resizeWindow(w, h);
    }
    configure() {
        throw new Error("暂不支持");
    }
    release() {
        return this._handler.releaseWindow();
    }
    getContext() {
        return this._handler.getContext();
    }
    getNativeHandler() {
        return this._handler.getNativeHandler();
    }
    getImageBuffer(type) {
        return this._handler.getImageBuffer ? this._handler.getImageBuffer(type) : null;
    }
    addEventListener(type, listener, options) {
        return this._handler.addEventListener(type, listener, options);
    }
    removeEventListener(type, listener, options) {
        return this._handler.removeEventListener(type, listener, options);
    }
    dispatchEvent(event) {
        return this._handler.dispatchEvent(event);
    }
    getBoundingClientRect() {
        return this._handler.getBoundingClientRect();
    }
    getContainer() {
        return this._handler.container;
    }
    clearViewBox(viewBox, color) {
        this._handler.clearViewBox(viewBox, color);
    }
    isVisible(bbox) {
        return this._handler.isVisible(bbox);
    }
    onVisibleChange(cb) {
        return this._handler.onVisibleChange(cb);
    }
    getTopLeft(baseWindow) {
        return this._handler.getTopLeft(baseWindow);
    }
};

DefaultWindow = __decorate([ injectable(), __metadata("design:paramtypes", []) ], DefaultWindow);

export { DefaultWindow };
//# sourceMappingURL=window.js.map
