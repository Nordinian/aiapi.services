{"version":3,"sources":["../src/interface/graphic/text.ts"],"names":[],"mappings":"","file":"text.js","sourcesContent":["import type { IAABBBounds } from '@visactor/vutils';\nimport type { IGraphicAttribute, IGraphic } from '../graphic';\n\nexport interface TextLayoutBBox {\n  width: number; // 包围盒的宽度\n  height: number; // 包围盒的高度\n  xOffset: number;\n  yOffset: number;\n}\n\nexport interface LayoutItemType {\n  str: string; // 这行的字符串\n  leftOffset?: number; // 该行距离左侧的偏移\n  topOffset?: number; // 该行距离右侧的偏移\n  width: number;\n}\n\nexport interface SimplifyLayoutType {\n  lines: LayoutItemType[];\n}\n\nexport interface LayoutType {\n  bbox: TextLayoutBBox;\n  lines: LayoutItemType[];\n  fontFamily: string;\n  fontSize: number;\n  fontWeight?: string | number;\n  lineHeight: number;\n  textAlign: TextAlignType;\n  textBaseline: TextBaselineType;\n}\n\nexport type ITextAttribute = {\n  text: string | number | string[] | number[];\n  maxLineWidth: number;\n  textAlign: TextAlignType;\n  textBaseline: TextBaselineType;\n  fontSize: number;\n  fontFamily: string;\n  fontWeight: string | number;\n  ellipsis: boolean | string;\n  fontVariant: string;\n  fontStyle: string;\n  lineHeight: number | string;\n  underline: number;\n  lineThrough: number;\n  scaleIn3d: boolean;\n  direction: 'horizontal' | 'vertical';\n  verticalMode: number; // 垂直布局的模式，0代表默认（横向textAlign，纵向textBaseline），1代表特殊（横向textBaseline，纵向textAlign）\n  wordBreak: 'break-word' | 'break-all';\n  ignoreBuf: boolean;\n  heightLimit: number;\n  lineClamp: number;\n  wrap: boolean;\n  whiteSpace: 'normal' | 'no-wrap';\n  suffixPosition: 'start' | 'end' | 'middle';\n  // textDecoration: number;\n  // textDecorationWidth: number;\n  // padding?: number | number[];\n  disableAutoClipedPoptip?: boolean;\n};\nexport type ITextCache = {\n  // 单行文本的时候缓存用\n  clipedText?: string;\n  clipedWidth?: number;\n  // 多行文本的布局缓存\n  layoutData?: LayoutType;\n  verticalList?: { text: string; width?: number; direction: number }[][];\n};\n\nexport type ITextGraphicAttribute = Partial<IGraphicAttribute> & Partial<ITextAttribute>;\n\nexport type IWrapTextGraphicAttribute = ITextGraphicAttribute & {\n  heightLimit?: number;\n  lineClamp?: number;\n};\n\nexport interface IText extends IGraphic<ITextGraphicAttribute> {\n  // 判断是否被ellipisised\n  clipedText?: string;\n  clipedWidth?: number;\n  cliped?: boolean;\n  multilineLayout?: LayoutType;\n  font?: string;\n  isMultiLine: boolean;\n  cache?: ITextCache;\n\n  getBaselineMapAlign: () => Record<string, string>;\n  getAlignMapBaseline: () => Record<string, string>;\n\n  updateMultilineAABBBounds: (text: (number | string)[]) => IAABBBounds;\n  updateSingallineAABBBounds: (text: number | string) => IAABBBounds;\n}\n\nexport type TextAlignType = 'left' | 'right' | 'center' | 'start' | 'end';\nexport type TextBaselineType = 'top' | 'middle' | 'bottom' | 'alphabetic';\n"]}