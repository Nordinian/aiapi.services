{"version":3,"sources":["../src/common/text.ts"],"names":[],"mappings":";;;AAKA,SAAgB,cAAc,CAC5B,IAA8B,EAC9B,cAAwC,EAAE,EAC1C,aAAsB;IAEtB,IAAI,CAAC,aAAa,EAAE;QAClB,aAAa,GAAG,CAAC,CAAC;KACnB;IACD,MAAM,EACJ,SAAS,GAAG,WAAW,CAAC,SAAS,EACjC,WAAW,GAAG,WAAW,CAAC,WAAW,EACrC,UAAU,GAAG,WAAW,CAAC,UAAU,EACnC,QAAQ,GAAG,WAAW,CAAC,QAAQ,EAC/B,UAAU,GAAG,WAAW,CAAC,UAAU,EACpC,GAAG,IAAI,CAAC;IACT,OAAO,CACL,EAAE;QACF,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QAClC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QACtC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QACpC,QAAQ,GAAG,aAAa;QACxB,KAAK;QACL,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,YAAY,CAAC,CACzC,CAAC;AACJ,CAAC;AAxBD,wCAwBC;AASD,SAAgB,eAAe,CAAC,QAA0B,EAAE,CAAS;IACnE,MAAM,MAAM,GACV,QAAQ,KAAK,KAAK;QAChB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACrB,CAAC,CAAC,QAAQ,KAAK,QAAQ;YACvB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;YACrB,CAAC,CAAC,QAAQ,KAAK,QAAQ;gBACvB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;gBACvB,CAAC,CAAC,CAAC,CAAC;IACR,OAAO,MAAM,CAAC;AAChB,CAAC;AAVD,0CAUC;AAQD,SAAgB,eAAe,CAAC,SAAwB,EAAE,KAAa;IACrE,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,OAAO,EAAE;QAChD,OAAO,CAAC,KAAK,CAAC;KACf;SAAM,IAAI,SAAS,KAAK,QAAQ,EAAE;QACjC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;KACnB;IACD,OAAO,CAAC,CAAC;AACX,CAAC;AAPD,0CAOC;AASD,SAAgB,iBAAiB,CAC/B,QAA0B,EAC1B,UAAkB,EAClB,QAAgB,EAChB,MAAc,CAAC;IAEf,IAAI,QAAQ,KAAK,QAAQ,EAAE;QACzB,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC;KACxB;IACD,IAAI,QAAQ,KAAK,KAAK,EAAE;QACtB,OAAO,CAAC,CAAC;KACV;IACD,IAAI,QAAQ,KAAK,QAAQ,EAAE;QACzB,OAAO,GAAG,GAAG,UAAU,CAAC;KACzB;IACD,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,YAAY,EAAE;QAC1C,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,UAAU,CAAC;SACvB;QACD,OAAO,CAAC,CAAC,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,QAAQ,CAAC;KACvD;IACD,OAAO,CAAC,CAAC;AACX,CAAC;AAtBD,8CAsBC","file":"text.js","sourcesContent":["// 存放一些公共方法，公共配置\n\nimport type { ITextFontParams } from '@visactor/vutils';\nimport type { TextAlignType, TextBaselineType } from '../interface';\n\nexport function getContextFont(\n  text: Partial<ITextFontParams>,\n  defaultAttr: Partial<ITextFontParams> = {},\n  fontSizeScale?: number\n): string {\n  if (!fontSizeScale) {\n    fontSizeScale = 1;\n  }\n  const {\n    fontStyle = defaultAttr.fontStyle,\n    fontVariant = defaultAttr.fontVariant,\n    fontWeight = defaultAttr.fontWeight,\n    fontSize = defaultAttr.fontSize,\n    fontFamily = defaultAttr.fontFamily\n  } = text;\n  return (\n    '' +\n    (fontStyle ? fontStyle + ' ' : '') +\n    (fontVariant ? fontVariant + ' ' : '') +\n    (fontWeight ? fontWeight + ' ' : '') +\n    fontSize * fontSizeScale +\n    'px ' +\n    (fontFamily ? fontFamily : 'sans-serif')\n  );\n}\n// TODO: 更好的方案\n/**\n * 用于绘制的时候偏移\n * 经验值，来源于 https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-scenegraph/src/util/text.js\n * @param baseline\n * @param h\n * @returns\n */\nexport function textDrawOffsetY(baseline: TextBaselineType, h: number): number {\n  const offset =\n    baseline === 'top'\n      ? Math.ceil(0.79 * h)\n      : baseline === 'middle'\n      ? Math.round(0.3 * h)\n      : baseline === 'bottom'\n      ? Math.round(-0.21 * h)\n      : 0;\n  return offset;\n}\n\n/**\n * 用于绘制的时候偏移\n * @param textAlign\n * @param width\n * @returns\n */\nexport function textDrawOffsetX(textAlign: TextAlignType, width: number): number {\n  if (textAlign === 'end' || textAlign === 'right') {\n    return -width;\n  } else if (textAlign === 'center') {\n    return -width / 2;\n  }\n  return 0;\n}\n\n/**\n * 用于计算布局的偏移\n * 经验值，来源于 https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-scenegraph/src/util/text.js\n * @param baseline\n * @param lineHeight\n * @returns\n */\nexport function textLayoutOffsetY(\n  baseline: TextBaselineType,\n  lineHeight: number,\n  fontSize: number,\n  buf: number = 0\n): number {\n  if (baseline === 'middle') {\n    return -lineHeight / 2;\n  }\n  if (baseline === 'top') {\n    return 0;\n  }\n  if (baseline === 'bottom') {\n    return buf - lineHeight;\n  }\n  if (!baseline || baseline === 'alphabetic') {\n    if (!fontSize) {\n      fontSize = lineHeight;\n    }\n    return -(lineHeight - fontSize) / 2 - 0.79 * fontSize;\n  }\n  return 0;\n}\n"]}