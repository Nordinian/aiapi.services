import { isValidNumber, isNil } from "@visactor/vutils";

export function point(event) {
    [ "touches", "changedTouches", "targetTouches" ].forEach((touchKey => {
        event[touchKey] && event[touchKey].length && Array.from(event[touchKey]).forEach((touch => {
            defineSrPosition(touch, clientToLocal(touch), !1);
        }));
    }));
    const pos = clientToLocal(event);
    return defineSrPosition(event, pos);
}

function clientToLocal(e) {
    return isNil(e.offsetX) ? isNil(e.x) ? e.changedTouches && e.changedTouches.length ? getChangedTouchesPos(e) : {
        canvasX: 0,
        canvasY: 0
    } : getXYPos(e) : getOffsetPos(e);
}

function getOffsetPos(e) {
    return {
        canvasX: e.offsetX,
        canvasY: e.offsetY
    };
}

function getBoundingClientRectPos(e, el) {
    const result = {
        canvasX: 0,
        canvasY: 0
    }, rect = el.getBoundingClientRect(), currentWidth = rect.width, widthRatio = currentWidth / (el.offsetWidth || currentWidth), currentHeight = rect.height, heightRatio = currentHeight / (el.offsetHeight || currentHeight);
    return [ "touchstart", "touchmove", "touchend" ].includes(e.type) && e.changedTouches && e.changedTouches.length ? (result.canvasX = (e.changedTouches[0].clientX - rect.left - (el.clientLeft || 0)) / widthRatio, 
    result.canvasY = (e.changedTouches[0].clientY - rect.top - (el.clientTop || 0)) / heightRatio, 
    result.clientX = e.changedTouches[0].clientX, result.clientY = e.changedTouches[0].clientY) : (result.canvasX = (e.clientX - rect.left - (el.clientLeft || 0)) / widthRatio, 
    result.canvasY = (e.clientY - rect.top - (el.clientTop || 0)) / heightRatio), result;
}

function getXYPos(e) {
    return {
        canvasX: e.x,
        canvasY: e.y
    };
}

function getChangedTouchesPos(e) {
    return {
        canvasX: e.changedTouches[0].x,
        canvasY: e.changedTouches[0].y
    };
}

function defineSrPosition(event, pos, client = !0) {
    return isValidNumber(pos.canvasX) && Object.defineProperty(event, "canvasX", {
        value: pos.canvasX,
        writable: !0
    }), isValidNumber(pos.canvasY) && Object.defineProperty(event, "canvasY", {
        value: pos.canvasY,
        writable: !0
    }), client && isValidNumber(pos.clientX) && Object.defineProperty(event, "clientX", {
        value: pos.clientX,
        writable: !0
    }), client && isValidNumber(pos.clientY) && Object.defineProperty(event, "clientY", {
        value: pos.clientY,
        writable: !0
    }), [ pos.canvasX, pos.canvasY ];
}
//# sourceMappingURL=point.js.map
