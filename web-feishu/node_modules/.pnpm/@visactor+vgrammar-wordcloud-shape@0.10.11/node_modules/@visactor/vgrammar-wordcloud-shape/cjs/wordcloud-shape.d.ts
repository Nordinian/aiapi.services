import type { TagItemAttribute, FieldOption, AsType } from './interface';
import type { IView } from '@visactor/vgrammar-core';
export declare const transform: (options: {
    dataIndexKey?: string;
    text: FieldOption | TagItemAttribute<string> | string;
    size?: [
        number,
        number
    ];
    fontFamily?: FieldOption | TagItemAttribute<string> | string;
    fontStyle?: FieldOption | TagItemAttribute<string> | string;
    fontOpacity?: FieldOption | TagItemAttribute<number> | number;
    fontWeight?: FieldOption | TagItemAttribute<string> | string;
    fontSize?: FieldOption | TagItemAttribute<number> | number;
    fontSizeRange?: [
        number,
        number
    ];
    padding?: FieldOption | TagItemAttribute<number> | number;
    colorMode?: 'linear' | 'ordinal';
    colorField?: FieldOption;
    colorHexField?: FieldOption;
    colorList?: string[];
    rotate?: FieldOption | TagItemAttribute<number> | number;
    rotateList?: number[];
    shape: string;
    random?: boolean;
    textLayoutTimes?: number;
    layoutMode?: 'default' | 'ensureMapping' | 'ensureMappingEnlarge';
    ratio?: number;
    removeWhiteBorder?: boolean;
    fontSizeShrinkFactor?: number;
    stepFactor?: number;
    importantWordCount?: number;
    globalShinkLimit?: number;
    fontSizeEnlargeFactor?: number;
    fillingRatio?: number;
    fillingTimes?: number;
    fillingXRatioStep?: number;
    fillingYRatioStep?: number;
    fillingXStep?: number;
    fillingYStep?: number;
    fillingInitialFontSize?: number;
    fillingDeltaFontSize?: number;
    fillingInitialOpacity?: number;
    fillingDeltaOpacity?: number;
    fillingFontFamily?: FieldOption | TagItemAttribute<string> | string;
    fillingFontStyle?: FieldOption | TagItemAttribute<string> | string;
    fillingFontWeight?: FieldOption | TagItemAttribute<string> | string;
    fillingPadding?: FieldOption | TagItemAttribute<number> | number;
    fillingDeltaFontSizeFactor?: number;
    fillingColorList?: string[];
    fillingColorField?: FieldOption;
    fillingRotateList?: number[];
    as?: AsType;
    minInitFontSize?: number;
    minFontSize?: number;
    minFillFoontSize?: number;
}, upstreamData: any[], parameters?: any, view?: IView) => Promise<any[]>;
