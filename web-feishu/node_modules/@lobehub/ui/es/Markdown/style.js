var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { createStyles, keyframes } from 'antd-style';
export var useStyles = createStyles(function (_ref) {
  var css = _ref.css,
    token = _ref.token,
    isDarkMode = _ref.isDarkMode;
  var cyanColor = isDarkMode ? token.cyan9A : token.cyan11A;
  var fadeIn = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    0% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 1;\n    }\n  "])));
  return {
    animated: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      .animate-fade-in,\n      .katex-html span,\n      span.line > span,\n      code:not(:has(span.line)),\n      > * {\n        animation: ", " 1s ease-in-out;\n      }\n    "])), fadeIn),
    chat: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      --lobe-markdown-border-radius: ", ";\n\n      ol,\n      ul {\n        > li {\n          &::marker {\n            color: ", " !important;\n          }\n\n          > li {\n            &::marker {\n              color: ", " !important;\n            }\n          }\n        }\n      }\n\n      ul {\n        list-style: unset;\n\n        > li {\n          &::before {\n            content: unset;\n            display: unset;\n          }\n        }\n      }\n    "])), token.borderRadius, cyanColor, token.colorTextSecondary),
    latex: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      .katex-error {\n        color: ", " !important;\n      }\n\n      .katex-html {\n        overflow: auto hidden;\n        padding: 3px;\n\n        .base {\n          margin-block: 0;\n          margin-inline: auto;\n        }\n\n        .tag {\n          position: relative !important;\n          display: inline-block;\n          padding-inline-start: 0.5rem;\n        }\n      }\n    "])), token.colorTextDescription),
    root: css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n      position: relative;\n      overflow: hidden;\n      max-width: 100%;\n    "])))
  };
});