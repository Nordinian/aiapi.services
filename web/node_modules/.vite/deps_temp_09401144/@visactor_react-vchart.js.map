{
  "version": 3,
  "sources": ["../../@visactor/react-vchart/esm/src/charts/BaseChart.tsx", "../../@visactor/react-vchart/esm/src/containers/withContainer.tsx", "../../@visactor/react-vchart/esm/src/context/chart.tsx", "../../@visactor/react-vchart/esm/src/context/view.tsx", "../../@visactor/react-vchart/src/util.ts", "../../@visactor/react-vchart/src/constants.ts", "../../@visactor/react-vchart/src/eventsUtils.ts", "../../@visactor/react-vchart/esm/src/charts/AreaChart.tsx", "../../@visactor/react-vchart/esm/src/charts/BarChart.tsx", "../../@visactor/react-vchart/esm/src/charts/LineChart.tsx", "../../@visactor/react-vchart/esm/src/charts/ScatterChart.tsx", "../../@visactor/react-vchart/esm/src/charts/PieChart.tsx", "../../@visactor/react-vchart/esm/charts/RoseChart.js", "../../@visactor/react-vchart/esm/src/charts/RadarChart.tsx", "../../@visactor/react-vchart/esm/src/charts/MapChart.tsx", "../../@visactor/react-vchart/esm/src/charts/HistogramChart.tsx", "../../@visactor/react-vchart/esm/src/charts/WordCloudChart.tsx", "../../@visactor/react-vchart/esm/src/charts/FunnelChart.tsx", "../../@visactor/react-vchart/esm/src/charts/BoxPlotChart.tsx", "../../@visactor/react-vchart/esm/src/charts/CircularProgressChart.tsx", "../../@visactor/react-vchart/esm/src/charts/LinearProgressChart.tsx", "../../@visactor/react-vchart/esm/src/charts/RangeColumnChart.tsx", "../../@visactor/react-vchart/esm/src/charts/CommonChart.tsx", "../../@visactor/react-vchart/esm/src/series/BaseSeries.tsx", "../../@visactor/react-vchart/esm/series/LinearProgress.js", "../../@visactor/react-vchart/esm/src/components/BaseComponent.tsx", "../../@visactor/react-vchart/esm/src/components/Mark.tsx", "../../@visactor/react-vchart/esm/components/Region.js", "../../@visactor/react-vchart/esm/VChart.js"],
  "sourcesContent": ["import type { IVChart, IData, IInitOption, ISpec, IVChartConstructor } from '@visactor/vchart';\nimport React, { useState, useEffect, useRef, useImperativeHandle } from 'react';\nimport withContainer, { ContainerProps } from '../containers/withContainer';\nimport RootChartContext, { ChartContextType } from '../context/chart';\nimport type { IView } from '@visactor/vgrammar-core';\nimport { isEqual, pickWithout } from '@visactor/vutils';\nimport ViewContext from '../context/view';\nimport { toArray } from '../util';\nimport { REACT_PRIVATE_PROPS } from '../constants';\nimport { IMarkElement } from '../components';\nimport {\n  bindEventsToChart,\n  EventsProps,\n  CHART_EVENTS_KEYS,\n  CHART_EVENTS,\n  LegendEventProps,\n  ScrollBarEventProps,\n  BrushEventProps,\n  DataZoomEventProps,\n  PlayerEventProps,\n  DimensionEventProps,\n  HierarchyEventProps,\n  ChartLifeCycleEventProps\n} from '../eventsUtils';\n\nexport type ChartOptions = Omit<IInitOption, 'dom'>;\n\nexport interface BaseChartProps\n  extends EventsProps,\n    LegendEventProps,\n    ScrollBarEventProps,\n    BrushEventProps,\n    DataZoomEventProps,\n    PlayerEventProps,\n    DimensionEventProps,\n    HierarchyEventProps,\n    ChartLifeCycleEventProps {\n  vchartConstrouctor?: IVChartConstructor;\n  type?: string;\n  /** 上层container */\n  container?: HTMLDivElement;\n  /**\n   * used only by <VChart />\n   */\n  spec?: ISpec;\n  /** 数据 */\n  data?: IData;\n  /** 画布宽度 */\n  width?: number;\n  /** 画布高度 */\n  height?: number;\n  /** 图表配置 */\n  options?: ChartOptions;\n  /** skip function diff when component update */\n  skipFunctionDiff?: boolean;\n  /** 图表渲染完成事件 */\n  onReady?: (instance: IVChart, isInitial: boolean) => void;\n  /** throw error when chart run into an error */\n  onError?: (err: Error) => void;\n  /**\n   * use sync render\n   *\n   * @since 1.8.3\n   **/\n  useSyncRender?: boolean;\n}\n\ntype Props = React.PropsWithChildren<BaseChartProps>;\n\nconst notSpecKeys = [\n  ...REACT_PRIVATE_PROPS,\n  ...CHART_EVENTS_KEYS,\n  'skipFunctionDiff',\n  'onError',\n  'onReady',\n  'spec',\n  'container',\n  'options'\n];\n\nconst BaseChart: React.FC<Props> = React.forwardRef((props, ref) => {\n  const [updateId, setUpdateId] = useState<number>(0);\n  const chartContext = useRef<ChartContextType>({\n    specFromChildren: {}\n  });\n  useImperativeHandle(ref, () => chartContext.current?.chart);\n  const hasSpec = !!props.spec;\n  const [view, setView] = useState<IView>(null);\n  const isUnmount = useRef<boolean>(false);\n  const prevSpec = useRef(pickWithout(props, notSpecKeys));\n  const eventsBinded = React.useRef<BaseChartProps>(null);\n  const skipFunctionDiff = !!props.skipFunctionDiff;\n  const useSyncRender = !!props.useSyncRender;\n\n  const parseSpec = (props: Props) => {\n    if (hasSpec && props.spec) {\n      return props.spec;\n    }\n\n    return {\n      ...prevSpec.current,\n      ...chartContext.current?.specFromChildren\n    };\n  };\n\n  const createChart = (props: Props) => {\n    const cs = new props.vchartConstrouctor(parseSpec(props), {\n      ...props.options,\n      onError: props.onError,\n      autoFit: true,\n      dom: props.container\n    });\n    chartContext.current = { ...chartContext.current, chart: cs };\n  };\n\n  const handleChartRender = () => {\n    // rebind events after render\n    if (!isUnmount.current) {\n      if (!chartContext.current || !chartContext.current.chart) {\n        return;\n      }\n\n      bindEventsToChart(chartContext.current.chart, props, eventsBinded.current, CHART_EVENTS);\n\n      const newView = chartContext.current.chart.getCompiler().getVGrammarView();\n\n      setUpdateId(updateId + 1);\n      if (props.onReady) {\n        props.onReady(chartContext.current.chart, updateId === 0);\n      }\n      setView(newView);\n    }\n  };\n\n  const renderChart = () => {\n    if (chartContext.current.chart) {\n      if (useSyncRender) {\n        chartContext.current.chart.renderSync();\n        handleChartRender();\n      } else {\n        // eslint-disable-next-line promise/catch-or-return\n        chartContext.current.chart.renderAsync().then(handleChartRender);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!chartContext.current?.chart) {\n      createChart(props);\n      renderChart();\n      bindEventsToChart(chartContext.current.chart, props, null, CHART_EVENTS);\n      chartContext.current = {\n        ...chartContext.current,\n        isChildrenUpdated: false\n      };\n      eventsBinded.current = props;\n      return;\n    }\n\n    if (hasSpec) {\n      if (!isEqual(eventsBinded.current.spec, props.spec, { skipFunction: skipFunctionDiff })) {\n        eventsBinded.current = props;\n        if (useSyncRender) {\n          chartContext.current.chart.updateSpecSync(parseSpec(props), undefined, {\n            morph: false,\n            enableExitAnimation: false\n          });\n          handleChartRender();\n        } else {\n          // eslint-disable-next-line promise/catch-or-return\n          chartContext.current.chart\n            .updateSpec(parseSpec(props), undefined, { morph: false, enableExitAnimation: false }) // morph临时关掉\n            .then(handleChartRender);\n        }\n      }\n      return;\n    }\n\n    const newSpec = pickWithout(props, notSpecKeys);\n\n    if (\n      !isEqual(newSpec, prevSpec.current, { skipFunction: skipFunctionDiff }) ||\n      chartContext.current.isChildrenUpdated\n    ) {\n      prevSpec.current = newSpec;\n\n      if (useSyncRender) {\n        chartContext.current.chart.updateSpecSync(parseSpec(props), undefined, {\n          morph: false,\n          enableExitAnimation: false\n        });\n        handleChartRender();\n      } else {\n        // eslint-disable-next-line promise/catch-or-return\n        chartContext.current.chart\n          .updateSpec(parseSpec(props), undefined, { morph: false, enableExitAnimation: false }) // morph临时关掉\n          .then(handleChartRender);\n      }\n    }\n    chartContext.current = {\n      ...chartContext.current,\n      isChildrenUpdated: false\n    };\n  }, [props]);\n\n  useEffect(() => {\n    return () => {\n      if (chartContext) {\n        if (chartContext.current.chart) {\n          chartContext.current.chart.release();\n        }\n        chartContext.current = null;\n      }\n      isUnmount.current = true;\n    };\n  }, []);\n\n  return (\n    <RootChartContext.Provider value={chartContext.current}>\n      <ViewContext.Provider value={view}>\n        {toArray(props.children).map((child, index) => {\n          return (\n            <React.Fragment key={(child as any)?.props?.id ?? (child as any)?.id ?? `child-${index}`}>\n              {React.cloneElement(child as IMarkElement, {\n                updateId: updateId\n              })}\n            </React.Fragment>\n          );\n        })}\n      </ViewContext.Provider>\n    </RootChartContext.Provider>\n  );\n});\n\nexport const createChart = <T extends Props>(\n  componentName: string,\n  defaultProps?: Partial<T>,\n  callback?: (props: T, defaultProps?: Partial<T>) => T\n) => {\n  const Com = withContainer<ContainerProps, T>(BaseChart as any, componentName, (props: T) => {\n    if (callback) {\n      return callback(props, defaultProps);\n    }\n\n    if (defaultProps) {\n      return Object.assign(props, defaultProps);\n    }\n    return props;\n  });\n  Com.displayName = componentName;\n  return Com;\n};\n", "import React, { useRef, useState, useLayoutEffect } from 'react';\n\nexport interface ContainerProps {\n  style?: React.CSSProperties;\n  className?: string;\n  width?: number | string;\n  height?: number | string;\n}\n\nexport default function withContainer<Props extends ContainerProps, CompProps>(\n  Comp: typeof React.Component<any, CompProps>,\n  name = 'ChartContainer',\n  getProps?: (props: any) => CompProps\n) {\n  const Cls = React.forwardRef<any, CompProps & Props>((props: CompProps & Props, ref) => {\n    const container = useRef();\n    const [inited, setInited] = useState(false);\n    const { className, style, width, ...options } = props;\n\n    useLayoutEffect(() => {\n      setInited(true);\n    }, []);\n\n    return (\n      <div\n        ref={container}\n        className={className}\n        style={{\n          position: 'relative',\n          height: props.height || '100%',\n          width: props.width || '100%',\n          ...style\n        }}\n      >\n        {inited ? (\n          <Comp ref={ref} container={container.current} {...(getProps ? getProps(options) : (options as CompProps))} />\n        ) : (\n          <></>\n        )}\n      </div>\n    );\n  });\n  Cls.displayName = name || Comp.name;\n  return Cls;\n}\n", "import React from 'react';\nimport type { IVChart } from '@visactor/vchart';\n\nexport interface ChartContextType {\n  chart?: IVChart;\n  specFromChildren: any;\n  isChildrenUpdated?: boolean;\n}\n\nconst ChartContext = React.createContext<ChartContextType>(null);\nChartContext.displayName = 'ChartContext';\n\nexport function withChartInstance<T>(Component: typeof React.Component) {\n  const Com = React.forwardRef<any, T>((props: T, ref) => {\n    return (\n      <ChartContext.Consumer>\n        {(ctx: ChartContextType) => <Component ref={ref} chart={ctx.chart} {...props} />}\n      </ChartContext.Consumer>\n    );\n  });\n  Com.displayName = Component.name;\n  return Com;\n}\n\nexport default ChartContext;\n", "import React from 'react';\nimport type { IView } from '@visactor/vgrammar-core';\n\nconst ViewContext = React.createContext<IView>(null);\nViewContext.displayName = 'ViewContext';\n\nexport function withView<T>(Component: typeof React.Component) {\n  const Com = React.forwardRef<any, T>((props: T, ref) => {\n    return <ViewContext.Consumer>{ctx => <Component ref={ref} view={ctx} {...props} />}</ViewContext.Consumer>;\n  });\n  Com.displayName = Component.name;\n  return Com;\n}\n\nexport default ViewContext;\n", "import { isNil, isArray, isString, isFunction, isPlainObject } from '@visactor/vutils';\nimport React, { ReactNode } from 'react';\nimport { isFragment } from 'react-is';\n\nlet id = 0;\n\nexport const uid = (prefix?: string) => {\n  if (prefix) {\n    return `${prefix}-${id++}`;\n  }\n\n  return `${id++}`;\n};\n\n/**\n * Get the display name of a component\n * @param  {Object} Comp Specified Component\n * @return {String}      Display name of Component\n */\nexport const getDisplayName = (Comp: any) => {\n  if (typeof Comp === 'string') {\n    return Comp;\n  }\n  if (!Comp) {\n    return '';\n  }\n  return Comp.displayName || Comp.name;\n};\n\nexport const typeOfComponent = (component: any, customTypeKey = '__TYPE'): string => {\n  return (\n    (component?.props && component.props[customTypeKey]) ||\n    (typeof component?.type === 'string' && component.type) ||\n    (component?.type &&\n      typeof component.type === 'symbol' &&\n      component.type.toString() === 'Symbol(react.fragment)' &&\n      'react.fragment') ||\n    (typeof component?.type === 'function' && component.type) ||\n    (typeof component?.type === 'object' &&\n      component.type.$$typeof.toString() === 'Symbol(react.forward_ref)' &&\n      'react.forward_ref') ||\n    (typeof component === 'string' && 'string') ||\n    (typeof component === 'function' && 'function') ||\n    undefined\n  );\n};\n\nexport const toArray = <T = ReactNode, TC = ReactNode>(children: T): TC[] => {\n  let result: TC[] = [];\n\n  React.Children.forEach(children, child => {\n    if (isNil(child)) return;\n\n    if (isFragment(child)) {\n      result = result.concat(toArray(child.props.children));\n    } else {\n      result.push(child as unknown as TC);\n    }\n  });\n\n  return result;\n};\n\n/*\n * Find and return all matched children by type. `type` can be a React element class or\n * string\n */\nexport const findAllByType = <T extends React.ReactNode, TC = unknown>(\n  children: React.ReactNode,\n  type: TC | TC[]\n): T[] => {\n  const result: T[] = [];\n  let types: string[] = [];\n\n  if (isArray(type)) {\n    types = type.map(t => getDisplayName(t));\n  } else {\n    types = [getDisplayName(type)];\n  }\n\n  toArray(children).forEach(child => {\n    const childType = getDisplayName(typeOfComponent(child));\n\n    if (types.indexOf(childType) !== -1) {\n      result.push(child as T);\n    }\n  });\n\n  return result;\n};\n/*\n * Return the first matched child by type, return null otherwise.\n * `type` can be a React element class or string.\n */\nexport const findChildByType = <T extends React.ReactNode, TC = unknown>(children: React.ReactNode, type: TC): T => {\n  const result = findAllByType<T, TC>(children, type);\n\n  return result?.[0];\n};\n", "export const REACT_PRIVATE_PROPS = [\"children\", \"hooks\", \"ref\"];\n\n", "import type { IVChart, EventCallback, EventParamsDefinition } from '@visactor/vchart';\n\nexport interface LegendEventProps {\n  onLegendItemHover?: (e: any) => void;\n  onLegendItemUnHover?: (e: any) => void;\n  onLegendItemClick?: (e: any) => void;\n  onLegendFilter?: (e: any) => void;\n  onLegendSelectedDataChange?: (e: any) => void;\n}\n\nexport interface BrushEventProps {\n  onBrushStart?: (e: any) => void;\n  onBrushChange?: (e: any) => void;\n  onBrushEnd?: (e: any) => void;\n}\n\nexport interface DataZoomEventProps {\n  onDataZoomChange?: (e: any) => void;\n}\n\nexport interface PlayerEventProps {\n  onPlayerPlay?: (e: any) => void;\n  onPlayerPause?: (e: any) => void;\n  onPlayerEnd?: (e: any) => void;\n  onPlayerChange?: (e: any) => void;\n  onPlayerForward?: (e: any) => void;\n  onPlayerBackward?: (e: any) => void;\n}\n\nexport interface ScrollBarEventProps {\n  onScrollBarChange?: (e: any) => void;\n}\n\nexport interface DimensionEventProps {\n  onDimensionHover?: (e: any) => void;\n  onDimensionClick?: (e: any) => void;\n}\n\nexport interface HierarchyEventProps {\n  onDrill?: (e: any) => void;\n}\n\nexport interface ChartLifeCycleEventProps {\n  onInitialized?: (e: any) => void;\n  onRendered?: (e: any) => void;\n  onRenderFinished?: (e: any) => void;\n  onAnimationFinished?: (e: any) => void;\n  onLayoutStart?: (e: any) => void;\n  onLayoutEnd?: (e: any) => void;\n}\n\nexport interface EventsProps {\n  onPointerDown?: EventCallback<EventParamsDefinition['pointerdown']>;\n  onPointerUp?: EventCallback<EventParamsDefinition['pointerup']>;\n  onPointerUpOutside?: EventCallback<EventParamsDefinition['pointerupoutside']>;\n  onPointerTap?: EventCallback<EventParamsDefinition['pointertap']>;\n  onPointerOver?: EventCallback<EventParamsDefinition['pointerover']>;\n  onPointerMove?: EventCallback<EventParamsDefinition['pointermove']>;\n  onPointerEnter?: EventCallback<EventParamsDefinition['pointerenter']>;\n  onPointerLeave?: EventCallback<EventParamsDefinition['pointerleave']>;\n  onPointerOut?: EventCallback<EventParamsDefinition['pointerout']>;\n  onMouseDown?: EventCallback<EventParamsDefinition['mousedown']>;\n  onMouseUp?: EventCallback<EventParamsDefinition['mouseup']>;\n  onMouseUpOutside?: EventCallback<EventParamsDefinition['mouseupoutside']>;\n  onMouseMove?: EventCallback<EventParamsDefinition['mousemove']>;\n  onMouseOver?: EventCallback<EventParamsDefinition['mouseover']>;\n  onMouseOut?: EventCallback<EventParamsDefinition['mouseout']>;\n  onMouseEnter?: EventCallback<EventParamsDefinition['mouseenter']>;\n  onMouseLeave?: EventCallback<EventParamsDefinition['mouseleave']>;\n  onPinch?: EventCallback<EventParamsDefinition['pinch']>;\n  onPinchStart?: EventCallback<EventParamsDefinition['pinchstart']>;\n  onPinchEnd?: EventCallback<EventParamsDefinition['pinchend']>;\n  onPan?: EventCallback<EventParamsDefinition['pan']>;\n  onPanStart?: EventCallback<EventParamsDefinition['panstart']>;\n  onPanEnd?: EventCallback<EventParamsDefinition['panend']>;\n  onDrag?: EventCallback<EventParamsDefinition['drag']>;\n  onDragStart?: EventCallback<EventParamsDefinition['dragstart']>;\n  onDragEnter?: EventCallback<EventParamsDefinition['dragenter']>;\n  onDragLeave?: EventCallback<EventParamsDefinition['dragleave']>;\n  onDragOver?: EventCallback<EventParamsDefinition['dragover']>;\n  onDragEnd?: EventCallback<EventParamsDefinition['dragend']>;\n  onRightDown?: EventCallback<EventParamsDefinition['rightdown']>;\n  onRightUp?: EventCallback<EventParamsDefinition['rightup']>;\n  onRightUpOutside?: EventCallback<EventParamsDefinition['rightupoutside']>;\n  onTouchStart?: EventCallback<EventParamsDefinition['touchstart']>;\n  onTouchEnd?: EventCallback<EventParamsDefinition['touchend']>;\n  onTouchEndOutside?: EventCallback<EventParamsDefinition['touchendoutside']>;\n  onTouchMove?: EventCallback<EventParamsDefinition['touchmove']>;\n  onTouchCancel?: EventCallback<EventParamsDefinition['touchcancel']>;\n  onPress?: EventCallback<EventParamsDefinition['press']>;\n  onPressUp?: EventCallback<EventParamsDefinition['pressup']>;\n  onPressEnd?: EventCallback<EventParamsDefinition['pressend']>;\n  onSwipe?: EventCallback<EventParamsDefinition['swipe']>;\n  onDrop?: EventCallback<EventParamsDefinition['drop']>;\n  onWeel?: EventCallback<EventParamsDefinition['weel']>;\n  onClick?: EventCallback<EventParamsDefinition['click']>;\n  onDblClick?: EventCallback<EventParamsDefinition['dblclick']>;\n}\n\nexport const REACT_TO_VCHART_EVENTS = {\n  onPointerDown: 'pointerdown',\n  onPointerUp: 'pointerup',\n  onPointerUpOutside: 'pointerupoutside',\n  onPointerTap: 'pointertap',\n  onPointerOver: 'pointerover',\n  onPointerMove: 'pointermove',\n  onPointerEnter: 'pointerenter',\n  onPointerLeave: 'pointerleave',\n  onPointerOut: 'pointerout',\n  onMouseDown: 'mousedown',\n  onMouseUp: 'mouseup',\n  onMouseUpOutside: 'mouseupoutside',\n  onMouseMove: 'mousemove',\n  onMouseOver: 'mouseover',\n  onMouseOut: 'mouseout',\n  onMouseEnter: 'mouseenter',\n  onMouseLeave: 'mouseleave',\n  onPinch: 'pinch',\n  onPinchStart: 'pinchstart',\n  onPinchEnd: 'pinchend',\n  onPan: 'pan',\n  onPanStart: 'panstart',\n  onPanEnd: 'panend',\n  onDrag: 'drag',\n  onDragStart: 'dragstart',\n  onDragEnter: 'dragenter',\n  onDragLeave: 'dragleave',\n  onDragOver: 'dragover',\n  onDragEnd: 'dragend',\n  onRightDown: 'rightdown',\n  onRightUp: 'rightup',\n  onRightUpOutside: 'rightupoutside',\n  onTouchStart: 'touchstart',\n  onTouchEnd: 'touchend',\n  onTouchEndOutside: 'touchendoutside',\n  onTouchMove: 'touchmove',\n  onTouchCancel: 'touchcancel',\n  onPress: 'press',\n  onPressUp: 'pressup',\n  onPressEnd: 'pressend',\n  onSwipe: 'swipe',\n  onDrop: 'drop',\n  onWeel: 'wheel',\n  onClick: 'click',\n  onDblClick: 'dblclick'\n};\n\nexport const LEGEND_CUSTOMIZED_EVENTS = {\n  onLegendItemHover: 'legendItemHover',\n  onLegendItemUnHover: 'legendItemUnHover',\n  onLegendItemClick: 'legendItemClick',\n  onLegendFilter: 'legendFilter',\n  onLegendSelectedDataChange: 'legendSelectedDataChange'\n};\nexport const BRUSH_CUSTOMIZED_EVENTS = {\n  onBrushStart: 'brushStart',\n  onBrushChange: 'brushChange',\n  onBrushEnd: 'brushEnd',\n  onBrushClear: 'brushClear'\n};\n\nexport const DATAZOOM_CUSTOMIZED_EVENTS = {\n  onDataZoomChange: 'dataZoomChange'\n};\n\nexport const PLAYER_CUSTOMIZED_EVENTS = {\n  onPlayerPlay: 'playerPlay',\n  onPlayerPause: 'playerPause',\n  onPlayerEnd: 'playerEnd',\n  onPlayerChange: 'playerChange',\n  onPlayerForward: 'playerForward',\n  onPlayerBackward: 'playerBackward'\n};\n\nexport const SCROLLBAR_CUSTOMIZED_EVENTS = {\n  onScrollBarChange: 'scrollBarChange'\n};\n\nexport const DIMENSION_EVENTS = {\n  onDimensionHover: 'dimensionHover',\n  onDimensionClick: 'dimensionClick'\n};\n\nexport const HIERARCHY_EVENTS = {\n  onDrill: 'drill'\n};\n\nexport const CHART_LIFECYCLE_EVENTS = {\n  onInitialized: 'initialized',\n  onRendered: 'rendered',\n  onRenderFinished: 'renderFinished',\n  onAnimationFinished: 'animationFinished',\n  onLayoutStart: 'layoutStart',\n  onLayoutEnd: 'layoutEnd'\n};\n\nexport const CHART_EVENTS = {\n  ...LEGEND_CUSTOMIZED_EVENTS,\n  ...BRUSH_CUSTOMIZED_EVENTS,\n  ...PLAYER_CUSTOMIZED_EVENTS,\n  ...DATAZOOM_CUSTOMIZED_EVENTS,\n  ...SCROLLBAR_CUSTOMIZED_EVENTS,\n  ...DIMENSION_EVENTS,\n  ...CHART_LIFECYCLE_EVENTS,\n  ...HIERARCHY_EVENTS,\n  ...REACT_TO_VCHART_EVENTS\n};\n\nexport const CHART_EVENTS_KEYS = Object.keys(CHART_EVENTS);\n\nexport const COMMON_EVENTK_KEYS = Object.keys(REACT_TO_VCHART_EVENTS);\n\nexport const VCHART_TO_REACT_EVENTS = Object.keys(REACT_TO_VCHART_EVENTS).reduce((res, key) => {\n  res[REACT_TO_VCHART_EVENTS[key]] = key;\n\n  return res;\n}, {});\n\nexport const findEventProps = <T extends EventsProps>(\n  props: T,\n  supportedEvents: Record<string, string> = REACT_TO_VCHART_EVENTS\n): EventsProps => {\n  const result: EventsProps = {};\n\n  Object.keys(props).forEach(key => {\n    if (supportedEvents[key]) {\n      result[key] = props[key];\n    }\n  });\n\n  return result;\n};\n\nexport const bindEventsToChart = <T>(\n  chart: IVChart,\n  newProps?: T | null,\n  prevProps?: T | null,\n  supportedEvents: Record<string, string> = REACT_TO_VCHART_EVENTS\n) => {\n  if ((!newProps && !prevProps) || !chart) {\n    return false;\n  }\n\n  const prevEventProps = prevProps ? findEventProps(prevProps, supportedEvents) : null;\n  const newEventProps = newProps ? findEventProps(newProps, supportedEvents) : null;\n\n  if (prevEventProps) {\n    Object.keys(prevEventProps).forEach(eventKey => {\n      if (!newEventProps || !newEventProps[eventKey] || newEventProps[eventKey] !== prevEventProps[eventKey]) {\n        const res = chart.off(supportedEvents[eventKey], prevProps[eventKey]);\n      }\n    });\n  }\n\n  if (newEventProps) {\n    Object.keys(newEventProps).forEach(eventKey => {\n      if (!prevEventProps || !prevEventProps[eventKey] || prevEventProps[eventKey] !== newEventProps[eventKey]) {\n        chart.on(supportedEvents[eventKey], newEventProps[eventKey]);\n      }\n    });\n  }\n\n  return true;\n};\n", "import React from 'react';\nimport type { IAreaChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface AreaChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<IAreaChartSpec, 'type'> {}\n\nexport const AreaChart = createChart<React.PropsWithChildren<AreaChartProps> & { type: 'area' }>('AreaChart', {\n  type: 'area',\n  vchartConstrouctor: VChart\n});\n", "import React from 'react';\nimport type { IBarChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface BarChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<IBarChartSpec, 'type'> {\n  //\n}\n\nexport const BarChart = createChart<React.PropsWithChildren<BarChartProps> & { type: 'bar' }>('BarChart', {\n  type: 'bar',\n  vchartConstrouctor: VChart\n});\n", "import React from 'react';\nimport type { ILineChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface LineChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<ILineChartSpec, 'type'> {}\n\nexport const LineChart = createChart<React.PropsWithChildren<LineChartProps> & { type: 'line' }>('LineChart', {\n  type: 'line',\n  vchartConstrouctor: VChart\n});\n", "import React from 'react';\nimport type { IScatterChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface ScatterChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<IScatterChartSpec, 'type'> {}\n\nexport const ScatterChart = createChart<React.PropsWithChildren<ScatterChartProps> & { type: 'scatter' }>(\n  'ScatterChart',\n  {\n    type: 'scatter',\n    vchartConstrouctor: VChart\n  }\n);\n", "import React from 'react';\nimport type { IPieChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface PieChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<IPieChartSpec, 'type'> {}\n\nexport const PieChart = createChart<React.PropsWithChildren<PieChartProps> & { type: 'pie' }>('PieChart', {\n  type: 'pie',\n  vchartConstrouctor: VChart\n});\n", "import { default as VChart } from \"@visactor/vchart\";\n\nimport { createChart } from \"./BaseChart\";\n\nexport const RoseChart = createChart(\"RoseChart\", {\n    type: \"rose\",\n    vchartConstrouctor: VChart\n});", "import React from 'react';\nimport type { IRadarChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface RadarChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<IRadarChartSpec, 'type'> {}\n\nexport const RadarChart = createChart<React.PropsWithChildren<RadarChartProps> & { type: 'radar' }>('RadarChart', {\n  type: 'radar',\n  vchartConstrouctor: VChart\n});\n", "import React from 'react';\nimport type { IMapChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface MapChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<IMapChartSpec, 'type'> {}\n\nexport const MapChart = createChart<React.PropsWithChildren<MapChartProps> & { type: 'map' }>('MapChart', {\n  type: 'map',\n  vchartConstrouctor: VChart\n});\n", "import React from 'react';\nimport { IHistogramChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface HistogramChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<IHistogramChartSpec, 'type'> {}\n\nexport const HistogramChart = createChart<React.PropsWithChildren<HistogramChartProps> & { type: 'histogram' }>(\n  'HistogramChart',\n  {\n    type: 'histogram',\n    vchartConstrouctor: VChart\n  }\n);\n", "import React from 'react';\nimport type { IWordCloudChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface WordCloudChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<IWordCloudChartSpec, 'type'> {}\n\nexport const WordCloudChart = createChart<React.PropsWithChildren<WordCloudChartProps> & { type: 'wordCloud' }>(\n  'WordCloudChart',\n  {\n    type: 'wordCloud',\n    vchartConstrouctor: VChart\n  }\n);\n", "import React from 'react';\nimport { IFunnelChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface FunnelChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<IFunnelChartSpec, 'type'> {}\n\nexport const FunnelChart = createChart<React.PropsWithChildren<FunnelChartProps> & { type: 'funnel' }>('FunnelChart', {\n  type: 'funnel',\n  vchartConstrouctor: VChart\n});\n", "import React from 'react';\nimport { IBoxPlotChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface BoxPlotChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<IBoxPlotChartSpec, 'type'> {}\n\nexport const BoxPlotChart = createChart<React.PropsWithChildren<BoxPlotChartProps> & { type: 'boxPlot' }>(\n  'BoxPlotChart',\n  {\n    type: 'boxPlot',\n    vchartConstrouctor: VChart\n  }\n);\n", "import React from 'react';\nimport { ICircularProgressChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface CircularProgressChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<ICircularProgressChartSpec, 'type'> {}\n\nexport const CircularProgressChart = createChart<\n  React.PropsWithChildren<CircularProgressChartProps> & { type: 'circularProgress' }\n>('CircularProgressChart', {\n  type: 'circularProgress',\n  vchartConstrouctor: VChart\n});\n", "import React from 'react';\nimport { ILinearProgressChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface LinearProgressChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<ILinearProgressChartSpec, 'type'> {}\n\nexport const LinearProgressChart = createChart<\n  React.PropsWithChildren<LinearProgressChartProps> & { type: 'linearProgress' }\n>('LinearProgressChart', {\n  type: 'linearProgress',\n  vchartConstrouctor: VChart\n});\n", "import React from 'react';\nimport type { IRangeColumnChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface RangeColumnChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<IRangeColumnChartSpec, 'type'> {}\n\nexport const RangeColumnChart = createChart<React.PropsWithChildren<RangeColumnChartProps> & { type: 'rangeColumn' }>(\n  'RangeColumnChart',\n  {\n    type: 'rangeColumn',\n    vchartConstrouctor: VChart\n  }\n);\n", "import React from 'react';\nimport { ICommonChartSpec } from '@visactor/vchart';\nimport { default as VChart } from '@visactor/vchart';\nimport { BaseChartProps, createChart } from './BaseChart';\n\nexport interface CommonChartProps\n  extends Omit<BaseChartProps, 'spec' | 'container' | 'type'>,\n    Omit<ICommonChartSpec, 'type'> {}\n\nexport const CommonChart = createChart<React.PropsWithChildren<CommonChartProps> & { type: 'common' }>('CommonChart', {\n  type: 'common',\n  vchartConstrouctor: VChart\n});\n", "import React from 'react';\nimport { isNil, isEqual, pickWithout } from '@visactor/vutils';\nimport RootChartContext from '../context/chart';\nimport {\n  REACT_TO_VCHART_EVENTS,\n  EventsProps,\n  findEventProps,\n  COMMON_EVENTK_KEYS,\n  VCHART_TO_REACT_EVENTS\n} from '../eventsUtils';\nimport { uid } from '../util';\n\nexport interface BaseSeriesProps extends EventsProps {\n  id?: string | number;\n}\n\nexport const createSeries = <T extends BaseSeriesProps>(componentName: string, markNames: string[], type?: string) => {\n  const ignoreKeys = ['id', 'updateId'];\n  const notSpecKeys = COMMON_EVENTK_KEYS.concat(ignoreKeys);\n\n  const Comp: React.FC<T & { updateId?: number }> = props => {\n    const context = React.useContext(RootChartContext);\n\n    const id = React.useRef<string | number>(isNil(props.id) ? uid(type ?? 'series') : props.id);\n\n    const seriesSpec = React.useRef<Partial<T>>();\n    const bindedEvents = React.useRef<Record<string, boolean>>({});\n    const updateId = React.useRef<number>(props.updateId);\n\n    const handleEvent = (e: any) => {\n      const markIds = markNames.map(markName => `${id.current}-${markName}`);\n      if (e?.mark && markIds.includes(e.mark.getUserId())) {\n        props[VCHART_TO_REACT_EVENTS[e.event.type]](e);\n      }\n    };\n\n    const addMarkEvent = (events: EventsProps) => {\n      if (!events || !context.chart) {\n        return;\n      }\n\n      if (bindedEvents) {\n        Object.keys(bindedEvents).forEach(eventKey => {\n          if (!events[eventKey]) {\n            context.chart.off(REACT_TO_VCHART_EVENTS[eventKey], handleEvent);\n          }\n          bindedEvents.current[eventKey] = false;\n        });\n      }\n\n      Object.keys(events).forEach(eventKey => {\n        if (!bindedEvents?.[eventKey]) {\n          context.chart.on(REACT_TO_VCHART_EVENTS[eventKey], handleEvent);\n\n          if (!bindedEvents) {\n            bindedEvents.current = {};\n          }\n          bindedEvents.current[eventKey] = true;\n        }\n      });\n    };\n\n    const removeMarkEvent = () => {\n      addMarkEvent({});\n    };\n\n    const addMarkId = (spec: any) => {\n      markNames.forEach(markName => {\n        const defaultMarkId = `${id.current}-${markName}`;\n\n        if (isNil(spec[markName])) {\n          spec[markName] = { id: defaultMarkId };\n        } else if (isNil(spec[markName].id)) {\n          spec[markName].id = defaultMarkId;\n        }\n      });\n    };\n\n    const insertToContext = (props: Partial<T>) => {\n      if (context.specFromChildren) {\n        if (!context.specFromChildren.series) {\n          context.specFromChildren.series = [];\n        }\n\n        const spec = isNil(type) ? { ...props, id: id.current } : { ...props, id: id.current, type };\n\n        addMarkId(spec);\n        context.specFromChildren.series.push(spec);\n        context.isChildrenUpdated = true;\n      }\n    };\n\n    const updateToContext = (props: Partial<T>) => {\n      if (!context.specFromChildren) {\n        return;\n      }\n\n      if (!context.specFromChildren.series) {\n        insertToContext(props);\n        return;\n      }\n\n      const series = context.specFromChildren.series;\n      const index = series.findIndex((entry: any) => entry.id === id.current);\n\n      if (index >= 0) {\n        series[index] = isNil(type) ? { ...props, id: id.current } : { ...props, id: id.current, type };\n        addMarkId(series[index]);\n      } else {\n        insertToContext(props);\n      }\n      context.isChildrenUpdated = true;\n    };\n\n    const deleteToContext = () => {\n      if (!context.specFromChildren) {\n        return;\n      }\n      const series = context.specFromChildren.series ?? [];\n      const index = series.findIndex((entry: any) => entry.id === id.current);\n\n      if (index >= 0) {\n        const newSeries = series.slice(0, index - 1).concat(series.slice(index + 1));\n        context.specFromChildren.series = newSeries;\n        context.isChildrenUpdated = true;\n      }\n    };\n\n    addMarkEvent(findEventProps(props));\n    if (props.updateId !== updateId.current) {\n      // chart render\n      updateId.current = props.updateId;\n    } else {\n      const newSeriesSpec = pickWithout<T>(props, notSpecKeys);\n\n      addMarkId(newSeriesSpec);\n      if (!isEqual(newSeriesSpec, seriesSpec.current)) {\n        seriesSpec.current = newSeriesSpec;\n        updateToContext(newSeriesSpec);\n      }\n    }\n\n    React.useEffect(() => {\n      return () => {\n        deleteToContext();\n        removeMarkEvent();\n      };\n    }, []);\n\n    return null;\n  };\n\n  Comp.displayName = componentName;\n  return Comp;\n};\n", "import { createSeries } from \"./BaseSeries\";\n\nexport const LinearProgress = createSeries(\"LinearProgress\", [ \"linearProgress\" ], \"linearProgress\");", "import React, { useContext, useEffect } from 'react';\nimport { isEqual, isNil, pickWithout } from '@visactor/vutils';\n\nimport RootChartContext, { ChartContextType } from '../context/chart';\nimport { bindEventsToChart } from '../eventsUtils';\nimport { uid } from '../util';\n\nexport interface BaseComponentProps {\n  id?: string | number;\n}\n\ntype ComponentProps = BaseComponentProps & { updateId?: number };\n\nexport const createComponent = <T extends ComponentProps>(\n  componentName: string,\n  specName: string,\n  supportedEvents?: Record<string, string> | null,\n  isSingle?: boolean\n) => {\n  const ignoreKeys = ['id', 'updateId'];\n  const notSpecKeys = supportedEvents ? Object.keys(supportedEvents).concat(ignoreKeys) : ignoreKeys;\n\n  const Comp: React.FC<T> = (props: T) => {\n    const context = useContext(RootChartContext);\n    const id = React.useRef<string | number>(isNil(props.id) ? uid(specName) : props.id);\n\n    const eventsBinded = React.useRef<T>(null);\n    const updateId = React.useRef<number>(props.updateId);\n    const componentSpec = React.useRef<Partial<T>>();\n\n    if (props.updateId !== updateId.current) {\n      // update triggered by chart when chart is rendered\n      updateId.current = props.updateId;\n\n      // rebind events after chart render\n      const hasPrevEventsBinded = supportedEvents\n        ? bindEventsToChart(context.chart, props, eventsBinded.current, supportedEvents)\n        : false;\n      if (hasPrevEventsBinded) {\n        eventsBinded.current = props;\n      }\n    } else {\n      const newComponentSpec: Partial<T> = pickWithout<T>(props, notSpecKeys);\n\n      if (!isEqual(newComponentSpec, componentSpec.current)) {\n        componentSpec.current = newComponentSpec;\n        updateToContext(context, id.current, specName, isSingle, newComponentSpec);\n      }\n    }\n\n    useEffect(() => {\n      return () => {\n        if (supportedEvents) {\n          bindEventsToChart(context.chart, null, eventsBinded.current, supportedEvents);\n        }\n        deleteToContext(context, id.current, specName, isSingle);\n      };\n    }, []);\n\n    return null;\n  };\n\n  Comp.displayName = componentName;\n  return Comp;\n};\n\nconst updateToContext = (\n  context: ChartContextType,\n  id: string | number,\n  specName: string,\n  isSingle: boolean,\n  props: Partial<ComponentProps>\n) => {\n  if (!context.specFromChildren) {\n    return;\n  }\n\n  if (isSingle) {\n    context.specFromChildren[specName] = { ...props };\n  } else {\n    if (!context.specFromChildren[specName]) {\n      context.specFromChildren[specName] = [];\n    }\n\n    const comps = context.specFromChildren[specName];\n    const index = comps.findIndex((entry: any) => entry.id === id);\n\n    if (index >= 0) {\n      comps[index] = {\n        id,\n        ...props\n      };\n    } else {\n      context.specFromChildren[specName].push({\n        id,\n        ...props\n      });\n    }\n  }\n  context.isChildrenUpdated = true;\n};\n\nconst deleteToContext = (context: ChartContextType, id: string | number, specName: string, isSingle: boolean) => {\n  if (!context.specFromChildren) {\n    return;\n  }\n\n  if (isSingle) {\n    context.specFromChildren[specName] = null;\n  } else {\n    const comps = context.specFromChildren[specName] ?? [];\n    const index = comps.findIndex((entry: any) => entry.id === id);\n\n    if (index >= 0) {\n      const newComps = comps.slice(0, index - 1).concat(comps.slice(index + 1));\n\n      context.specFromChildren[specName] = newComps;\n      context.isChildrenUpdated = true;\n    }\n  }\n};\n", "import React, { useContext, useEffect } from 'react';\nimport { isNil } from '@visactor/vutils';\nimport type { IView, MarkSpec } from '@visactor/vgrammar-core';\n\nimport ViewContext from '../context/view';\nimport { uid } from '../util';\n\nexport interface MarkProps extends Omit<MarkSpec, 'name' | 'id'> {\n  id?: string | number;\n  glyphType?: string;\n}\n\nexport interface IMarkElement extends React.ReactElement<Props, React.JSXElementConstructor<Props>> {\n  id: string | number;\n}\n\ntype Props = MarkProps & { updateId?: number };\n\nexport const Mark: React.FC<Props> = (props: Props) => {\n  const context = useContext(ViewContext);\n  const id = React.useRef<string | number>(isNil(props.id) ? uid('mark') : props.id);\n  const updateId = React.useRef<number>(props.updateId);\n\n  if (props.updateId !== updateId.current) {\n    // only update mark when chart finished render\n    updateId.current = props.updateId;\n    if (context) {\n      addOrUpdateMark(context, id.current as string, props);\n    }\n  }\n\n  useEffect(() => {\n    return () => {\n      if (context) {\n        removeMark(context, id.current as string);\n      }\n    };\n  }, []);\n\n  return null;\n};\n\nconst addOrUpdateMark = (view: IView, id: string, props: Props) => {\n  if (!view.renderer) {\n    // view has been released\n    return;\n  }\n\n  let mark = view.getMarkById(id);\n  const { group, glyphType, updateId, ...others } = props;\n  if (!mark) {\n    mark = (view as any)\n      .mark(props.type, props.group ?? view.rootMark, props.glyphType ? { glyphType: props.glyphType } : null)\n      .name(id);\n  }\n\n  mark.parse(others);\n  view.runAsync();\n};\n\nconst removeMark = (view: IView, id: string) => {\n  if (view.renderer) {\n    const mark = view.getMarkById(id);\n    (view as any).removeGrammar(id);\n  }\n};\n", "import { createComponent } from \"./BaseComponent\";\n\nexport const Region = createComponent(\"Region\", \"region\");", "import { createChart } from \"./charts/BaseChart\";\n\nimport VChartCore from \"@visactor/vchart\";\n\nexport { VChartCore };\n\nexport const VChart = createChart(\"VChart\", {\n    vchartConstrouctor: VChartCore\n});"],
  "mappings": "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",
  "names": ["import_react", "React", "import_react", "React", "import_react", "React", "import_react", "React", "React", "props", "import_react", "notSpecKeys", "React", "id", "props", "import_react", "notSpecKeys", "id", "React", "id", "React", "__rest"]
}
