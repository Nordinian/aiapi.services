import {
  esm_default,
  lightTheme
} from "./chunk-2QAZGZQ3.js";
import "./chunk-7EWILLDK.js";
import "./chunk-XUX2WAK7.js";
import "./chunk-75NXEXD4.js";

// node_modules/@visactor/vchart-semi-theme/esm/common/constants.js
var SEMI_FONT_FAMILY = "Inter,-apple-system,BlinkMacSystemFont,Segoe UI,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Helvetica Neue,Helvetica,Arial,sans-serif";
var THEME_MODE_ATTRIBUTE = "theme-mode";

// node_modules/@visactor/vchart-theme-utils/esm/utils/get-token-value.js
var getTokenValue = (token, defaultValue, chartContainer) => {
  const value = token && getComputedStyle(null != chartContainer ? chartContainer : document.body).getPropertyValue(token) || defaultValue;
  return value && !isNaN(value[0]) ? `rgba(${value})` : value;
};

// node_modules/@visactor/vchart-theme-utils/esm/utils/observe-attribute.js
var observeAttribute = (element, attribute, callback) => {
  new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      mutation.attributeName === attribute && callback(mutation);
    });
  }).observe(element, {
    attributes: true
  });
};

// node_modules/@visactor/vchart-theme-utils/esm/generator.js
var generateDataScheme = (mode, tokenMap, baseDataScheme, chartContainer) => tokenMap.map((item, i) => {
  const { scheme } = baseDataScheme[i];
  return Object.assign(Object.assign({}, item), {
    scheme: item.scheme.map((token, j) => getTokenValue("object" == typeof token ? token[mode] : token, null == scheme ? void 0 : scheme[j], chartContainer))
  });
});
var generatePalette = (mode, tokenMap, basePalette, chartContainer) => {
  const newPalette = {};
  return Object.keys(tokenMap).forEach((key) => {
    const token = "object" == typeof tokenMap[key] ? tokenMap[key][mode] : tokenMap[key];
    newPalette[key] = getTokenValue(token, basePalette[key], chartContainer);
  }), newPalette;
};

// node_modules/@visactor/vchart-semi-theme/esm/util.js
var getCurrentMode = () => document.body.hasAttribute(THEME_MODE_ATTRIBUTE) && "dark" === document.body.getAttribute(THEME_MODE_ATTRIBUTE) ? "dark" : "light";
var generateThemeName = (mode) => `semiDesign${mode[0].toUpperCase()}${mode.slice(1)}`;
var observeThemeSwitch = (callback) => {
  new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      var _a;
      if (1 === mutation.addedNodes.length) {
        const node = mutation.addedNodes[0];
        "LINK" === node.tagName && "true" === (null === (_a = node.getAttribute) || void 0 === _a ? void 0 : _a.call(node, "semi-theme-switcher")) && callback(mutation, node);
      }
    });
  }).observe(document.body, {
    childList: true
  });
};

// node_modules/@visactor/vchart-semi-theme/esm/dark/color-scheme.js
var colorScheme = {
  default: {
    dataScheme: lightTheme.colorScheme.default.dataScheme,
    palette: {
      backgroundColor: "#16161a",
      borderColor: "rgba(255,255,255,0.08)",
      shadowColor: "rgba(0,0,0,0.25)",
      hoverBackgroundColor: "rgba(255,255,255,0.12)",
      sliderRailColor: "rgba(255,255,255,0.12)",
      sliderHandleColor: "#e4e7f5",
      sliderTrackColor: "rgba(84,169,255,1)",
      popupBackgroundColor: "#43444a",
      primaryFontColor: "rgba(249,249,249,1)",
      secondaryFontColor: "rgba(249,249,249,0.8)",
      tertiaryFontColor: "rgba(249,249,249,0.6)",
      axisLabelFontColor: "rgba(249,249,249,0.6)",
      disableFontColor: "rgba(249,249,249,0.35)",
      axisMarkerFontColor: "#16161a",
      axisGridColor: "rgba(255,255,255,0.08)",
      axisDomainColor: "rgba(255,255,255,0.08)",
      dataZoomHandleStrokeColor: "rgba(46,50,56,0.13)",
      dataZoomChartColor: "rgba(255,255,255,0.16)",
      playerControllerColor: "rgba(84,169,255,1)",
      axisMarkerBackgroundColor: "rgba(249,249,249,1)",
      markLabelBackgroundColor: "rgba(255,255,255,0.08)",
      markLineStrokeColor: "rgba(249,249,249,0.8)",
      dangerColor: "rgba(252,114,90,1)",
      warningColor: "rgba(255,174,67,1)",
      successColor: "rgba(93,194,100,1)",
      infoColor: "rgba(84,169,255,1)"
    }
  }
};

// node_modules/@visactor/vchart-semi-theme/esm/dark/index.js
var semiDesignDark = {
  name: "semiDesignDark",
  description: "Semi Design - dark",
  type: "dark",
  fontFamily: SEMI_FONT_FAMILY,
  colorScheme
};

// node_modules/@visactor/vchart-semi-theme/esm/light/color-scheme.js
var colorScheme2 = {
  default: {
    dataScheme: lightTheme.colorScheme.default.dataScheme,
    palette: {
      backgroundColor: "rgba(255,255,255,1)",
      borderColor: "rgba(28,31,35,0.08)",
      shadowColor: "rgba(0,0,0,0.1)",
      hoverBackgroundColor: "rgba(46,50,56,0.05)",
      sliderRailColor: "rgba(46,50,56,0.05)",
      sliderHandleColor: "rgba(255,255,255,1)",
      sliderTrackColor: "rgba(0,100,250,1)",
      popupBackgroundColor: "rgba(255,255,255,1)",
      primaryFontColor: "rgba(28,31,35,1)",
      secondaryFontColor: "rgba(28,31,35,0.8)",
      tertiaryFontColor: "rgba(28,31,35,0.62)",
      axisLabelFontColor: "rgba(28,31,35,0.62)",
      disableFontColor: "rgba(28,31,35,0.35)",
      axisMarkerFontColor: "rgba(255,255,255,1)",
      axisGridColor: "rgba(28,31,35,0.08)",
      axisDomainColor: "rgba(28,31,35,0.15)",
      dataZoomHandleStrokeColor: "rgba(46,50,56,0.13)",
      dataZoomChartColor: "rgba(46,50,56,0.09)",
      playerControllerColor: "rgba(0,100,250,1)",
      axisMarkerBackgroundColor: "rgba(28,31,35,1)",
      markLabelBackgroundColor: "rgba(28,31,35,0.08)",
      markLineStrokeColor: "rgba(28,31,35,0.8)",
      dangerColor: "rgba(249,57,32,1)",
      warningColor: "rgba(252,136,0,1)",
      successColor: "rgba(59,179,70,1)",
      infoColor: "rgba(0,100,250,1)"
    }
  }
};

// node_modules/@visactor/vchart-semi-theme/esm/light/index.js
var semiDesignLight = {
  name: "semiDesignLight",
  description: "Semi Design - light",
  type: "light",
  fontFamily: SEMI_FONT_FAMILY,
  colorScheme: colorScheme2
};

// node_modules/@visactor/vchart-semi-theme/esm/common/token-map.js
var paletteTokenMap = {
  backgroundColor: "--semi-color-bg-0",
  borderColor: "--semi-color-border",
  hoverBackgroundColor: "--semi-color-fill-0",
  sliderRailColor: "--semi-color-fill-0",
  sliderHandleColor: "--semi-white",
  sliderTrackColor: "--semi-color-primary",
  popupBackgroundColor: "--semi-color-bg-3",
  primaryFontColor: "--semi-color-text-0",
  secondaryFontColor: "--semi-color-text-1",
  tertiaryFontColor: "--semi-color-text-2",
  axisLabelFontColor: "--semi-color-text-0",
  disableFontColor: "--semi-color-disabled-text",
  axisMarkerFontColor: "--semi-color-bg-0",
  axisGridColor: "--semi-color-border",
  axisDomainColor: {
    light: "--semi-grey-9",
    dark: "--semi-color-border"
  },
  dataZoomHandleStrokeColor: {
    light: "--semi-color-fill-2"
  },
  dataZoomChartColor: "--semi-color-fill-1",
  playerControllerColor: "--semi-color-primary",
  axisMarkerBackgroundColor: "--semi-color-text-0",
  markLabelBackgroundColor: "--semi-color-border",
  markLineStrokeColor: "--semi-color-text-1",
  dangerColor: "--semi-color-danger",
  warningColor: "--semi-color-warning",
  successColor: "--semi-color-success",
  infoColor: "--semi-color-info"
};
var dataSchemeTokenMap = [{
  maxDomainLength: 10,
  scheme: ["--semi-color-data-0", "--semi-color-data-2", "--semi-color-data-4", "--semi-color-data-6", "--semi-color-data-8", "--semi-color-data-10", "--semi-color-data-12", "--semi-color-data-14", "--semi-color-data-16", "--semi-color-data-18"]
}, {
  scheme: ["--semi-color-data-0", "--semi-color-data-1", "--semi-color-data-2", "--semi-color-data-3", "--semi-color-data-4", "--semi-color-data-5", "--semi-color-data-6", "--semi-color-data-7", "--semi-color-data-8", "--semi-color-data-9", "--semi-color-data-10", "--semi-color-data-11", "--semi-color-data-12", "--semi-color-data-13", "--semi-color-data-14", "--semi-color-data-15", "--semi-color-data-16", "--semi-color-data-17", "--semi-color-data-18", "--semi-color-data-19"]
}];

// node_modules/@visactor/vchart-semi-theme/esm/generator.js
var baseThemeMap = {
  light: semiDesignLight,
  dark: semiDesignDark
};
var generateVChartSemiTheme = (mode, chartContainer) => {
  const baseTheme = baseThemeMap[mode], { dataScheme, palette } = baseTheme.colorScheme.default, colorScheme3 = {
    default: {
      dataScheme: generateDataScheme(mode, dataSchemeTokenMap, dataScheme, chartContainer),
      palette: generatePalette(mode, paletteTokenMap, palette, chartContainer)
    }
  };
  return Object.assign(Object.assign({}, baseTheme), {
    colorScheme: colorScheme3
  });
};

// node_modules/@visactor/vchart-semi-theme/esm/theme-map.js
var allThemeMap = /* @__PURE__ */ new Map([[semiDesignLight.name, semiDesignLight], [semiDesignDark.name, semiDesignDark]]);

// node_modules/@visactor/vchart-semi-theme/esm/index.js
var initVChartSemiTheme = (options) => {
  const { defaultMode, isWatchingMode = true, isWatchingThemeSwitch = false } = null != options ? options : {};
  switchVChartSemiTheme(false, defaultMode), isWatchingMode && observeAttribute(document.body, THEME_MODE_ATTRIBUTE, () => switchVChartSemiTheme()), isWatchingThemeSwitch && observeThemeSwitch(() => {
    const mode = getCurrentMode(), cacheColorScheme = JSON.stringify(generateVChartSemiTheme(mode).colorScheme);
    let times = 0;
    const timer = setInterval(() => {
      const theme = generateVChartSemiTheme(mode);
      (times > 50 || cacheColorScheme !== JSON.stringify(theme.colorScheme)) && (switchVChartSemiTheme(true, mode, theme), clearInterval(timer)), times++;
    }, 100);
  });
};
var switchVChartSemiTheme = (force, mode, theme) => {
  mode || (mode = getCurrentMode());
  const themeName = generateThemeName(mode);
  (force || esm_default.ThemeManager.getCurrentTheme() !== themeName) && (force && esm_default.ThemeManager.removeTheme(themeName), esm_default.ThemeManager.themeExist(themeName) || esm_default.ThemeManager.registerTheme(themeName, null != theme ? theme : generateVChartSemiTheme(mode)), esm_default.ThemeManager.setCurrentTheme(themeName));
};
export {
  allThemeMap,
  generateVChartSemiTheme,
  initVChartSemiTheme,
  semiDesignDark,
  semiDesignLight,
  switchVChartSemiTheme
};
//# sourceMappingURL=@visactor_vchart-semi-theme.js.map
