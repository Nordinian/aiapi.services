import type { IGroup } from '@visactor/vrender-core';
import { AbstractComponent } from '../../core/base';
import type { Point } from '../../core/type';
import type { GridBaseAttributes } from './type';
import type { TransformedAxisItem } from '../type';
export declare abstract class BaseGrid<T extends GridBaseAttributes> extends AbstractComponent<Required<T>> {
    name: string;
    static defaultAttributes: Partial<GridBaseAttributes>;
    protected _innerView: IGroup;
    getInnerView(): IGroup;
    protected _prevInnerView: IGroup;
    getPrevInnerView(): IGroup;
    protected data: TransformedAxisItem[];
    abstract getTickCoord(value: number): Point;
    abstract isInValidValue(value: number): boolean;
    abstract getVerticalVector(offset: number, inside: boolean, point: Point): [number, number];
    protected abstract getGridAttribute(isSubGrid: boolean): T;
    protected render(): void;
    protected getVerticalCoord(point: Point, offset: number, inside: boolean): Point;
    private _transformItems;
    private _renderGrid;
    private _renderGridByType;
    protected _getNodeId(id: string): string;
}
