import { isValidNumber, merge } from "@visactor/vutils";

import { AbstractComponent } from "../core/base";

import { bitmapTool } from "./overlap";

import { RectLabel } from "./rect";

import { SymbolLabel } from "./symbol";

import { ArcLabel } from "./arc";

import { LabelBase as PointLabel } from "./base";

import { LineDataLabel } from "./line-data";

import { LineLabel } from "./line";

import { AreaLabel } from "./area";

const labelComponentMap = {
    rect: RectLabel,
    symbol: SymbolLabel,
    arc: ArcLabel,
    line: LineLabel,
    area: AreaLabel,
    "line-data": LineDataLabel
};

export class DataLabel extends AbstractComponent {
    constructor(attributes, options) {
        super((null == options ? void 0 : options.skipDefault) ? attributes : merge({}, DataLabel.defaultAttributes, attributes)), 
        this.name = "data-label";
    }
    render() {
        var _a;
        const {dataLabels: dataLabels, size: size} = this.attribute;
        if (!dataLabels || 0 === dataLabels.length) return;
        const {width: width = 0, height: height = 0} = size || {};
        if (!width || !height || !isValidNumber(height * width)) return;
        this._componentMap || (this._componentMap = new Map);
        const tool = bitmapTool(width, height), bitmap = tool.bitmap(), currentComponentMap = new Map, prevComponentMap = this._componentMap;
        for (let i = 0; i < dataLabels.length; i++) {
            const dataLabel = dataLabels[i], labelComponent = labelComponentMap[dataLabel.type] || PointLabel;
            if (labelComponent) {
                const {baseMarkGroupName: baseMarkGroupName, type: type} = dataLabel, id = null !== (_a = dataLabel.id) && void 0 !== _a ? _a : `${baseMarkGroupName}-${type}-${i}`;
                let component = this._componentMap.get(id);
                component ? (component.setBitmapTool(tool), component.setBitmap(bitmap), component.setAttributes(dataLabel), 
                currentComponentMap.set(id, component)) : (component = new labelComponent(dataLabel), 
                component.setBitmap(bitmap), component.setBitmapTool(tool), this.add(component), 
                currentComponentMap.set(id, component));
            }
        }
        prevComponentMap.forEach(((cp, key) => {
            currentComponentMap.get(key) || this.removeChild(cp);
        })), this._componentMap = currentComponentMap;
    }
    setLocation(point) {
        this.translateTo(point.x, point.y);
    }
    disableAnimation() {
        this._componentMap.forEach((component => {
            component.disableAnimation();
        }));
    }
    enableAnimation() {
        this._componentMap.forEach((component => {
            component.enableAnimation();
        }));
    }
}

DataLabel.defaultAttributes = {
    pickable: !1
};
//# sourceMappingURL=dataLabel.js.map