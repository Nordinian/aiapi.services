import type { IBaseScale } from '@visactor/vscale';
import type { IBoundsLike } from '@visactor/vutils';
import { AABBBounds } from '@visactor/vutils';
import type { IGraphic } from '@visactor/vrender-core';
import type { ICartesianTickDataOpt, IOrientType, IPolarTickDataOpt, ITickData } from './interface';
export declare const convertDomainToTickData: (domain: any[]) => ITickData[];
export declare const labelOverlap: (prevLabel: AABBBounds, nextLabel: AABBBounds, gap?: number) => boolean;
export declare const labelDistance: (prevLabel: AABBBounds, nextLabel: AABBBounds) => [number, number];
export declare function intersect(a: IBoundsLike, b: IBoundsLike, sep: number): boolean;
export interface ILabelItem<T> extends Pick<IGraphic, 'AABBBounds'> {
    value?: T;
}
export declare function hasOverlap<T>(items: ILabelItem<T>[], pad: number): boolean;
export declare const MIN_TICK_GAP = 12;
export declare const getCartesianLabelBounds: (scale: IBaseScale, domain: any[], op: ICartesianTickDataOpt) => AABBBounds[];
export declare const getPolarAngleLabelBounds: (scale: IBaseScale, domain: any[], op: IPolarTickDataOpt) => AABBBounds[];
export declare const isAxisHorizontal: (axisOrientType: IOrientType) => boolean;
