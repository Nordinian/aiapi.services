import type { IGraphicUtil } from '../../../interface/core';
import type { ICanvas, IContext2d, EnvType } from '../../../interface';
import type { TextOptionsType, ITextMeasure } from '../../../interface/text';
export declare class ATextMeasure implements ITextMeasure {
    release: (...params: any) => void;
    protected canvas?: ICanvas;
    protected context?: IContext2d | null;
    configure(service: IGraphicUtil, env: EnvType): void;
    measureTextWidth(text: string, options: TextOptionsType): number;
    estimate(text: string, { fontSize }: TextOptionsType): {
        width: number;
        height: number;
    };
    measureTextPixelHeight(text: string, options: TextOptionsType): number;
    measureTextBoundHieght(text: string, options: TextOptionsType): number;
    measureText(text: string, options: TextOptionsType): TextMetrics | {
        width: number;
    };
    clipTextVertical(verticalList: {
        text: string;
        width?: number;
        direction: number;
    }[], options: TextOptionsType, width: number, wordBreak: boolean): {
        verticalList: {
            text: string;
            width?: number;
            direction: number;
        }[];
        width: number;
    };
    clipText(text: string, options: TextOptionsType, width: number, wordBreak: boolean): {
        str: string;
        width: number;
    };
    private _clipText;
    private _clipTextEnd;
    private _clipTextStart;
    private _clipTextMiddle;
    clipTextWithSuffixVertical(verticalList: {
        text: string;
        width?: number;
        direction: number;
    }[], options: TextOptionsType, width: number, suffix: string, wordBreak: boolean, suffixPosition: 'start' | 'end' | 'middle'): {
        verticalList: {
            text: string;
            width?: number;
            direction: number;
        }[];
        width: number;
    };
    revertVerticalList(verticalList: {
        text: string;
        width?: number;
        direction: number;
    }[]): {
        text: string;
        width?: number;
        direction: number;
    }[];
    clipTextWithSuffix(text: string, options: TextOptionsType, width: number, suffix: string, wordBreak: boolean, position: 'start' | 'end' | 'middle'): {
        str: string;
        width: number;
    };
}
