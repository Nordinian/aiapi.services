import { AABBBounds } from "@visactor/vutils";

import { isArray, max } from "@visactor/vutils";

import { builtinSymbolsMap, builtInSymbolStrMap, CustomSymbolClass } from "./builtin-symbol";

import { Graphic, GRAPHIC_UPDATE_TAG_KEY, NOWORK_ANIMATE_ATTR } from "./graphic";

import { parsePadding } from "../common/utils";

import { getTheme } from "./theme";

import { application } from "../application";

import { CustomPath2D } from "../common/custom-path2d";

import { SVG_PARSE_ATTRIBUTE_MAP, SVG_PARSE_ATTRIBUTE_MAP_KEYS, SYMBOL_NUMBER_TYPE } from "./constants";

import { XMLParser } from "../common/xml";

import { isSvg } from "../common/xml/parser";

const _tempBounds = new AABBBounds, SYMBOL_UPDATE_TAG_KEY = [ "symbolType", "size", ...GRAPHIC_UPDATE_TAG_KEY ];

export class Symbol extends Graphic {
    constructor(params = {
        symbolType: "circle"
    }) {
        super(params), this.type = "symbol", this.numberType = SYMBOL_NUMBER_TYPE;
    }
    getParsedPath() {
        return this.shouldUpdateShape() && (this.doUpdateParsedPath(), this.clearUpdateShapeTag()), 
        this._parsedPath;
    }
    isValid() {
        return super.isValid() && this._isValid();
    }
    _isValid() {
        const {size: size} = this.attribute;
        return isArray(size) ? 2 === size.length && size.every(this._validNumber) : this._validNumber(size);
    }
    doUpdateParsedPath() {
        const symbolTheme = getTheme(this).symbol;
        let {symbolType: symbolType = symbolTheme.symbolType} = this.attribute, path = builtinSymbolsMap[symbolType];
        if (path) return this._parsedPath = path, path;
        if (path = Symbol.userSymbolMap[symbolType], path) return this._parsedPath = path, 
        path;
        symbolType = builtInSymbolStrMap[symbolType] || symbolType;
        if (!0 === isSvg(symbolType)) {
            const parser = new XMLParser, {svg: svg} = parser.parse(symbolType);
            if (!svg) return null;
            const path = isArray(svg.path) ? svg.path : [ svg.path ];
            _tempBounds.clear();
            const cacheList = [];
            path.forEach((item => {
                const cache = (new CustomPath2D).fromString(item.d), attribute = {};
                SVG_PARSE_ATTRIBUTE_MAP_KEYS.forEach((k => {
                    item[k] && (attribute[SVG_PARSE_ATTRIBUTE_MAP[k]] = item[k]);
                })), cacheList.push({
                    path: cache,
                    attribute: attribute
                }), _tempBounds.union(cache.bounds);
            }));
            const width = _tempBounds.width(), height = _tempBounds.height(), scale = 1 / max(width, height);
            return cacheList.forEach((cache => cache.path.transform(0, 0, scale, scale))), this._parsedPath = new CustomSymbolClass(symbolType, cacheList, !0), 
            Symbol.userSymbolMap[symbolType] = this._parsedPath, this._parsedPath;
        }
        const cache = (new CustomPath2D).fromString(symbolType), width = cache.bounds.width(), height = cache.bounds.height(), scale = 1 / max(width, height);
        return cache.transform(0, 0, scale, scale), this._parsedPath = new CustomSymbolClass(symbolType, cache), 
        Symbol.userSymbolMap[symbolType] = this._parsedPath, this._parsedPath;
    }
    doUpdateAABBBounds(full) {
        const symbolTheme = getTheme(this).symbol;
        this._AABBBounds.setValue(1 / 0, 1 / 0, -1 / 0, -1 / 0);
        const attribute = this.attribute, bounds = application.graphicService.updateSymbolAABBBounds(attribute, getTheme(this).symbol, this._AABBBounds, full, this), {boundsPadding: boundsPadding = symbolTheme.boundsPadding} = attribute, paddingArray = parsePadding(boundsPadding);
        return paddingArray && bounds.expand(paddingArray), this.clearUpdateBoundTag(), 
        bounds;
    }
    tryUpdateOBBBounds() {
        throw new Error("暂不支持");
    }
    getDefaultAttribute(name) {
        return getTheme(this).symbol[name];
    }
    needUpdateTags(keys) {
        return super.needUpdateTags(keys, SYMBOL_UPDATE_TAG_KEY);
    }
    needUpdateTag(key) {
        return super.needUpdateTag(key, SYMBOL_UPDATE_TAG_KEY);
    }
    toCustomPath() {
        const symbolInstance = this.getParsedPath(), size = this.attribute.size, formattedSize = isArray(size) ? size : [ size, size ];
        return symbolInstance.path ? (new CustomPath2D).fromCustomPath2D(symbolInstance.path, 0, 0, formattedSize[0], formattedSize[1]) : (new CustomPath2D).fromString(symbolInstance.pathStr, 0, 0, formattedSize[0], formattedSize[1]);
    }
    clone() {
        return new Symbol(Object.assign({}, this.attribute));
    }
    getNoWorkAnimateAttr() {
        return Symbol.NOWORK_ANIMATE_ATTR;
    }
}

Symbol.userSymbolMap = {}, Symbol.NOWORK_ANIMATE_ATTR = Object.assign({
    symbolType: 1
}, NOWORK_ANIMATE_ATTR);

export function createSymbol(attributes) {
    return new Symbol(attributes);
}
//# sourceMappingURL=symbol.js.map
