{"version":3,"sources":["../src/interface/util.ts"],"names":[],"mappings":"","file":"util.js","sourcesContent":["// import { IMatrix } from './matrix';\n\n// export type IBoundsLike = Pick<IBounds, 'x1' | 'y1' | 'x2' | 'y2'>;\n// export type IOBBBoundsLike = Pick<IOBBBounds, 'x1' | 'y1' | 'x2' | 'y2' | 'angle'>;\n\n// export interface IBounds {\n//   x1: number;\n//   y1: number;\n//   x2: number;\n//   y2: number;\n//   clone: () => IBounds;\n//   clear: () => IBounds;\n//   empty: () => boolean;\n//   emptyMin: () => boolean;\n//   equals: (b: IBounds) => boolean;\n//   set: (x1: number, y1: number, x2: number, y2: number) => IBounds;\n//   add: (x: number, y: number) => IBounds;\n//   expand: (d: number) => IBounds;\n//   round: () => IBounds;\n//   translate: (dx: number, dy: number) => IBounds;\n//   rotate: (angle: number, x: number, y: number) => IBounds;\n//   scale: (sx: number, sy: number, x: number, y: number) => IBounds;\n//   /**\n//    * 并集\n//    * @param b\n//    * @returns\n//    */\n//   union: (b: IBounds) => IBounds;\n//   /**\n//    * 交集\n//    * @param b\n//    * @returns\n//    */\n//   intersect: (b: IBounds) => IBounds;\n//   /**\n//    * 是否包含b\n//    * @param b\n//    * @returns\n//    */\n//   encloses: (b: IBounds) => boolean;\n//   /**\n//    * 是否共边\n//    * @param b\n//    * @returns\n//    */\n//   alignsWith: (b: IBounds) => boolean;\n//   /**\n//    * 是否相交\n//    * @param b\n//    * @returns\n//    */\n//   intersects: (b: IBounds) => boolean;\n//   /**\n//    * 是否包含\n//    * @param x\n//    * @param y\n//    * @returns\n//    */\n//   contains: (x: number, y: number) => boolean;\n//   width: () => number;\n//   height: () => number;\n//   scaleX: (s: number) => IBounds;\n//   scaleY: (s: number) => IBounds;\n\n//   transformWithMatrix: (matrix: IMatrix) => IBounds;\n// }\n\n// export type IAABBBounds = IBounds;\n\n// export interface IOBBBounds extends IBounds {\n//   angle: number;\n// }\n\n// export type IPointLike = Pick<IPoint, 'x' | 'y' | 'x1' | 'y1'>;\n\n// export interface IPoint {\n//   x: number;\n//   y: number;\n//   x1?: number;\n//   y1?: number;\n//   // defined?: boolean;\n//   add?: (point: IPoint | number) => IPoint;\n//   sub?: (point: IPoint | number) => IPoint;\n//   multi?: (point: IPoint | number) => IPoint;\n//   div?: (point: IPoint | number) => IPoint;\n//   length?: () => number;\n// }\n\n// export type vec2 = [number, number] | Float32Array;\n// export type vec3 = [number, number, number] | Float32Array;\n// export type vec4 = [number, number, number, number] | Float32Array;\n// export type vec8 = [number, number, number, number, number, number, number, number] | Float32Array;\n\n// export type RepeatType = 'no-repeat' | 'repeat' | 'stretch';\n"]}