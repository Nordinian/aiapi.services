{"version":3,"sources":["../src/chart/treemap/treemap-transformer.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,wBAAwB,EAAE,MAAM,SAAS,CAAC;AAGnD,MAAM,OAAO,2BAEX,SAAQ,wBAA4D;IAC1D,qBAAqB,CAAC,IAAO;QACrC,MAAM,MAAM,mCACP,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,KACpC,aAAa,EAAE,IAAI,CAAC,aAAa,EACjC,UAAU,EAAE,IAAI,CAAC,UAAU,EAE3B,WAAW,EAAE,IAAI,CAAC,WAAW,EAE7B,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,sBAAsB,EAAE,IAAI,CAAC,sBAAsB,EACnD,sBAAsB,EAAE,IAAI,CAAC,sBAAsB,EAEnD,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,UAAU,EAAE,IAAI,CAAC,UAAU,EAE3B,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,YAAY,EAAE,IAAI,CAAC,YAAY,GAChC,CAAC;QACF,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,IAAI,UAAU,EAAE;YACd,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC;YACzB,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;SACvC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAS;QACrB,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAG1B,MAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QAC3D,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5C,IAAI,CAAC,MAAM,GAAG,CAAC,iBAAiB,CAAC,CAAC;SACnC;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAU,EAAE,EAAE;gBACjC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;oBAChC,OAAO;iBACR;gBACD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBACzC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;wBACb,CAAC,CAAC,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;qBAC7B;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;CACF","file":"treemap-transformer.js","sourcesContent":["import type { ISeries } from '../../series';\nimport type { AdaptiveSpec } from '../../typings';\nimport { BaseChartSpecTransformer } from '../base';\nimport type { ITreemapChartSpec } from './interface';\n\nexport class TreemapChartSpecTransformer<\n  T extends ITreemapChartSpec = ITreemapChartSpec\n> extends BaseChartSpecTransformer<AdaptiveSpec<T, 'data' | 'series'>> {\n  protected _getDefaultSeriesSpec(spec: T): any {\n    const series: any = {\n      ...super._getDefaultSeriesSpec(spec),\n      categoryField: spec.categoryField,\n      valueField: spec.valueField,\n\n      seriesField: spec.seriesField,\n\n      aspectRatio: spec.aspectRatio,\n      splitType: spec.splitType,\n      maxDepth: spec.maxDepth,\n      gapWidth: spec.gapWidth,\n      nodePadding: spec.nodePadding,\n      minVisibleArea: spec.minVisibleArea,\n      minChildrenVisibleArea: spec.minChildrenVisibleArea,\n      minChildrenVisibleSize: spec.minChildrenVisibleSize,\n\n      roam: spec.roam,\n      drill: spec.drill,\n      drillField: spec.drillField,\n\n      leaf: spec.leaf,\n      nonLeaf: spec.nonLeaf,\n      nonLeafLabel: spec.nonLeafLabel\n    };\n    const seriesType = this.seriesType;\n    if (seriesType) {\n      series.type = seriesType;\n      series[seriesType] = spec[seriesType];\n    }\n\n    return series;\n  }\n\n  transformSpec(spec: any): void {\n    super.transformSpec(spec);\n\n    /* 处理 series 配置 */\n    const defaultSeriesSpec = this._getDefaultSeriesSpec(spec);\n    if (!spec.series || spec.series.length === 0) {\n      spec.series = [defaultSeriesSpec];\n    } else {\n      spec.series.forEach((s: ISeries) => {\n        if (!this._isValidSeries(s.type)) {\n          return;\n        }\n        Object.keys(defaultSeriesSpec).forEach(k => {\n          if (!(k in s)) {\n            s[k] = defaultSeriesSpec[k];\n          }\n        });\n      });\n    }\n  }\n}\n"]}