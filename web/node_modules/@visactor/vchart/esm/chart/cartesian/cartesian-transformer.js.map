{"version":3,"sources":["../src/chart/cartesian/cartesian-transformer.ts"],"names":[],"mappings":"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","file":"cartesian-transformer.js","sourcesContent":["import type { ICartesianAxisSpec } from '../../component';\nimport type { ISeriesSpec } from '../../typings';\nimport { get, mergeSpec } from '../../util';\nimport { BaseChartSpecTransformer } from '../base';\nimport { getTrimPaddingConfig } from '../util';\nimport type { ICartesianChartSpec } from './interface';\n\nexport class CartesianChartSpecTransformer<T extends ICartesianChartSpec> extends BaseChartSpecTransformer<T> {\n  protected needAxes(): boolean {\n    return true;\n  }\n\n  protected _isValidSeries(type: string): boolean {\n    return this.seriesType ? type === this.seriesType : true;\n  }\n\n  protected _getDefaultSeriesSpec(spec: any): any {\n    const series: any = {\n      ...super._getDefaultSeriesSpec(spec),\n      xField: spec.xField,\n      yField: spec.yField,\n      zField: spec.zField,\n      seriesField: spec.seriesField,\n      seriesStyle: spec.seriesStyle,\n      direction: spec.direction,\n      stack: spec.stack, // 是否堆叠\n      percent: spec.percent, // 是否百分比堆叠\n      stackOffsetSilhouette: spec.stackOffsetSilhouette, // 是否围绕中心轴偏移轮廓,\n      totalLabel: spec.totalLabel,\n      sortDataByAxis: spec.sortDataByAxis\n    };\n    const seriesType = this.seriesType;\n    if (seriesType) {\n      series.type = seriesType;\n      series[seriesType] = spec[seriesType];\n    }\n\n    return series;\n  }\n\n  transformSpec(spec: T): void {\n    super.transformSpec(spec);\n    if (this.needAxes()) {\n      if (!spec.axes) {\n        spec.axes = [];\n      }\n      const haxAxes = { x: false, y: false, z: false };\n      spec.axes.forEach((axis: ICartesianAxisSpec) => {\n        const { orient } = axis;\n        if (orient === 'top' || orient === 'bottom') {\n          haxAxes.x = true;\n        }\n        if (orient === 'left' || orient === 'right') {\n          haxAxes.y = true;\n        }\n        if (orient === 'z') {\n          haxAxes.z = true;\n        }\n        if (get(axis, 'trimPadding')) {\n          mergeSpec(axis, getTrimPaddingConfig(this.type, spec));\n        }\n      });\n      if (!haxAxes.x) {\n        spec.axes.push({\n          orient: 'bottom'\n        });\n      }\n      if (!haxAxes.y) {\n        spec.axes.push({\n          orient: 'left'\n        });\n      }\n      // 如果有zField字段，但是没有配置z轴，那么添加一个z轴\n      if ((spec as any).zField && !haxAxes.z) {\n        spec.axes.push({\n          orient: 'z'\n        });\n      }\n    }\n\n    const defaultSeriesSpec = this._getDefaultSeriesSpec(spec);\n\n    if (!spec.series || spec.series.length === 0) {\n      spec.series = [defaultSeriesSpec];\n    } else {\n      spec.series.forEach((s: ISeriesSpec) => {\n        if (!this._isValidSeries(s.type)) {\n          return;\n        }\n        Object.keys(defaultSeriesSpec).forEach(k => {\n          if (!(k in s)) {\n            s[k] = defaultSeriesSpec[k];\n          }\n        });\n      });\n    }\n  }\n}\n"]}