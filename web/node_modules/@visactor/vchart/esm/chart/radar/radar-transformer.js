import { array, mergeSpec } from "../../util";

import { RoseLikeChartSpecTransformer } from "../polar";

export class RadarChartSpecTransformer extends RoseLikeChartSpecTransformer {
    _getDefaultSeriesSpec(spec) {
        var _a;
        return Object.assign(Object.assign({}, super._getDefaultSeriesSpec(spec)), {
            seriesField: spec.seriesField,
            line: spec.line,
            point: spec.point,
            stack: spec.stack,
            percent: spec.percent,
            area: mergeSpec({
                visible: !1
            }, spec.area),
            seriesMark: null !== (_a = spec.seriesMark) && void 0 !== _a ? _a : "area",
            activePoint: spec.activePoint,
            pointDis: spec.pointDis,
            pointDisMul: spec.pointDisMul,
            markOverlap: spec.markOverlap
        });
    }
    transformSpec(spec) {
        var _a;
        super.transformSpec(spec), (null !== (_a = spec.axes) && void 0 !== _a ? _a : []).forEach((axis => {
            "radius" === axis.orient && ([ "domainLine", "label", "tick" ].forEach((configName => {
                axis[configName] || (axis[configName] = {
                    visible: !1
                });
            })), axis.grid || (axis.grid = {
                visible: !0,
                smooth: !0
            }));
        })), spec.crosshair = array(spec.crosshair || {}).map((crosshairCfg => mergeSpec({
            categoryField: {
                visible: !0,
                line: {
                    visible: !0,
                    type: "line"
                }
            }
        }, crosshairCfg)));
    }
}
//# sourceMappingURL=radar-transformer.js.map
