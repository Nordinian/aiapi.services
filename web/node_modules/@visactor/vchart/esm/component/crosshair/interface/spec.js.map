{"version":3,"sources":["../src/component/crosshair/interface/spec.ts"],"names":[],"mappings":"","file":"spec.js","sourcesContent":["import type { IPadding, StringOrNumber, ILineMarkSpec, IRectMarkSpec, ITextMarkSpec } from '../../../typings';\nimport type { IAxis } from '../../axis/interface';\nimport type { IComponentSpec } from '../../base/interface';\nimport type { IComponent } from '../../interface';\n\nexport interface ICrossHair extends IComponent {\n  clearAxisValue?: () => void;\n  setAxisValue?: (v: StringOrNumber, axis: IAxis) => void;\n  layoutByValue?: (v?: number) => void;\n  hide?: () => void;\n}\n\nexport type CrossHairTrigger = 'click' | 'hover' | ['click', 'hover'];\n\nexport interface ICommonCrosshairSpec extends IComponentSpec {\n  /**\n   * 是否可以通过 点击 固定住一组 crosshair，也可以同时触发。\n   * @default 'hover'\n   */\n  trigger?: CrossHairTrigger;\n  /**\n   * 隐藏crosshair的触发方式（目前仅支持和trigger一致的设置以及none）\n   */\n  triggerOff?: CrossHairTrigger | 'none';\n  /**\n   * crosshair 文本的显示层级\n   */\n  labelZIndex?: number;\n  /**\n   * crosshair 辅助图形的显示层级\n   */\n  gridZIndex?: number;\n}\n\nexport interface ICartesianCrosshairSpec extends ICommonCrosshairSpec {\n  /**\n   * 笛卡尔坐标系下 x 轴上 crosshair 配置\n   */\n  xField?: ICrosshairCategoryFieldSpec;\n  /**\n   * 笛卡尔坐标系下 y 轴上 crosshair 配置\n   */\n  yField?: ICrosshairCategoryFieldSpec;\n}\n\nexport interface IPolarCrosshairSpec extends ICommonCrosshairSpec {\n  /**\n   * 极坐标系下 categoryField 字段对应轴上的 crosshair 配置\n   */\n  categoryField?: ICrosshairCategoryFieldSpec;\n  /**\n   * 极坐标系下 valueField 字段对应轴上的 crosshair 配置\n   */\n  valueField?: ICrosshairValueFieldSpec;\n}\nexport interface ICrosshairCategoryFieldSpec extends ICrosshairDataBindSpec {\n  /**\n   * 是否可见\n   */\n  visible: boolean;\n  /**\n   * crosshair 辅助图形配置\n   */\n  line?: ICrosshairLineSpec | Omit<ICrosshairRectSpec, 'width'>;\n  /**\n   * crosshair 文本配置\n   */\n  label?: ICrosshairLabelSpec;\n}\n\nexport interface ICrosshairValueFieldSpec extends ICrosshairDataBindSpec {\n  /**\n   * 是否可见\n   */\n  visible: boolean;\n  /**\n   * crosshair 辅助图形配置\n   */\n  line?: ICrosshairLineSpec;\n  /**\n   * crosshair 文本配置\n   */\n  label?: ICrosshairLabelSpec;\n}\n\nexport type ICrosshairLineStyle = Pick<\n  ILineMarkSpec,\n  'stroke' | 'strokeOpacity' | 'opacity' | 'lineDash' | 'lineWidth'\n>;\nexport type ICrosshairRectStyle = ICrosshairLineStyle & Pick<IRectMarkSpec, 'fill' | 'fillOpacity' | 'cornerRadius'>;\n\nexport interface ICrosshairLineSpec {\n  visible?: boolean;\n  type?: 'line';\n  /**\n   * 线宽\n   * @default 2\n   */\n  width?: number;\n  /** 极坐标系下是否平滑 */\n  smooth?: boolean;\n  style?: ICrosshairLineStyle;\n}\n\nexport type ICrosshairRectWidthCallback = (axisSize: { width: number; height: number }, axis: IAxis) => number;\n\nexport interface ICrosshairRectSpec {\n  visible?: boolean;\n  type?: 'rect';\n  /**\n   * 字符串xx%表示此处是内容区间的百分比，数字表示宽度像素，\n   * 仅支持笛卡尔坐标系下的 crosshair 配置\n   * @default '100%''\n   */\n  width?: number | string | ICrosshairRectWidthCallback;\n  style?: ICrosshairRectStyle;\n}\n\nexport interface ICrosshairLabelSpec {\n  visible?: boolean;\n  /**\n   * label 文本格式化方法\n   * @param text\n   * @returns\n   */\n  formatMethod?: (text: StringOrNumber | string[]) => string | string[];\n  /**\n   * 文本样式配置\n   */\n  style?: Partial<ITextMarkSpec>;\n  /**\n   * 文本背景相关配置\n   */\n  labelBackground?: ICrosshairLabelBackgroundSpec;\n}\n\nexport interface ICrosshairLabelBackgroundSpec {\n  /**\n   * 是否显示背景，默认为 true\n   */\n  visible?: boolean;\n  /**\n   * 最小宽度，像素值\n   * @default 30\n   */\n  minWidth?: number;\n  /**\n   * 最大宽度，像素值。当文字超过最大宽度时，会自动省略。\n   */\n  maxWidth?: number;\n  /**\n   * 内部边距\n   */\n  padding?: IPadding | number | number[];\n  style?: Partial<IRectMarkSpec>;\n}\n\nexport interface ICrosshairDataBindSpec {\n  /**\n   * 声明 crosshair 绑定的轴索引，如果没有声明，则会默认绑定所有同 crosshair 位置相对应的轴。\n   */\n  bindingAxesIndex?: number[];\n  /**\n   * crosshair 初始化显示信息，通过该配置可在图表绘制时默认展示 crosshair 组件。\n   */\n  defaultSelect?: {\n    /**\n     * 声明要显示数据的轴索引\n     */\n    axisIndex: number;\n    /**\n     * 声明显示的数据\n     */\n    datum: StringOrNumber;\n  };\n}\n\nexport type ICrosshairSpec = ICartesianCrosshairSpec | IPolarCrosshairSpec;\n"]}