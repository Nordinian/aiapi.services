{"version":3,"sources":["../src/component/tooltip/interface/spec.ts"],"names":[],"mappings":"","file":"spec.js","sourcesContent":["import type { IToolTipActual, ITooltipPattern, Maybe, TooltipActiveType, TooltipData } from '../../../typings';\nimport type { ITooltipActiveTypeAsKeys, TooltipHandlerParams, TooltipResult } from './common';\nimport type { ITooltipTheme } from './theme';\n\nexport interface ITooltipSpec\n  extends Partial<\n    /**\n     * mark tooltip pattern\n     * & dimension tooltip pattern\n     * （*支持在series上设置）\n     */\n    ITooltipActiveTypeAsKeys<ITooltipPattern, ITooltipPattern>\n  > {\n  /**\n   * 是否显示\n   * （*支持在series上设置）\n   * （*会影响自定义handler）\n   */\n  visible?: boolean;\n  /**\n   * 受支持的激活类型\n   * （*支持在series上设置）\n   * （*会影响自定义handler）\n   */\n  activeType?: TooltipActiveType | TooltipActiveType[];\n  /**\n   * tooltip触发方式\n   * （*会影响自定义handler）\n   */\n  trigger?: 'hover' | 'click' | 'none';\n  /**\n   * 隐藏tooltip的触发方式（目前仅支持和trigger一致的设置以及none）\n   * （*会影响自定义handler）\n   */\n  triggerOff?: 'hover' | 'click' | 'none';\n\n  /**\n   * tooltip样式\n   */\n  style?: Omit<ITooltipTheme<string>, 'offset'>;\n\n  /**\n   * 自定义handler方法\n   */\n  handler?: Partial<ITooltipHandlerSpec>;\n\n  /**\n   * tooltip 渲染方式，默认为 html\n   */\n  renderMode?: 'html' | 'canvas';\n  /**\n   * 是否将 tooltip 框限制在画布区域内，renderMode 为 canvas 时，默认开启。\n   */\n  confine?: boolean;\n\n  /**\n   * tooltip dom元素的 className，仅当 renderMode: 'html' 时生效\n   */\n  className?: string;\n  /**\n   * tooltip dom 元素的挂载点，可传 id 或 dom 对象\n   */\n  parentElement?: Maybe<string | HTMLElement | HTMLCanvasElement>;\n  /**\n   * 鼠标是否可进入提示框浮层中，默认为false，如需详情内交互，如添加链接，按钮，可设置为 true。\n   * 该属性目前只对 renderMode 为 html 时生效\n   * TODO: 支持 renderMode: canvas\n   */\n  enterable?: boolean;\n\n  /**\n   * 浮层移动动画过渡时间，单位是 ms，设置为 0 的时候会紧跟着鼠标移动（目前仅影响 dom tooltip）\n   */\n  transitionDuration?: number;\n\n  /**\n   * 更新 tooltip 的防抖动时间间隔，单位是 ms\n   */\n  throttleInterval?: number;\n\n  /**\n   * 更新 tooltip dom 元素，仅当 renderMode: 'html' 时生效\n   * @since 1.6.0\n   */\n  updateElement?: (tooltipElement: HTMLElement, actualTooltip: IToolTipActual, params: TooltipHandlerParams) => void;\n\n  offset?: {\n    x?: number;\n    y?: number;\n  };\n}\n\nexport interface ITooltipHandlerSpec {\n  /** 显示 tooltip，可以选择返回是否遇到异常 */\n  showTooltip: (\n    activeType: TooltipActiveType,\n    tooltipData: TooltipData,\n    params: TooltipHandlerParams\n  ) => Maybe<TooltipResult>;\n  /** 隐藏 tooltip，可以选择返回是否遇到异常 */\n  hideTooltip: (params: TooltipHandlerParams) => Maybe<TooltipResult>;\n  /** 释放 tooltip */\n  release: () => void;\n  /** 可选，判断 tooltip 是否正在显示 */\n  isTooltipShown?: () => boolean;\n}\n"]}