{"version":3,"sources":["../src/component/marker/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { IPadding } from '@visactor/vutils';\nimport type { SymbolType, IRichTextCharacter } from '@visactor/vrender-core';\nimport type { IRectMarkSpec, ISymbolMarkSpec, ITextMarkSpec, StringOrNumber } from '../../typings';\nimport type { IComponentSpec } from '../base/interface';\nimport type { Datum } from '@visactor/vrender-components';\nimport type { ICartesianSeries } from '../../series/interface';\nimport type { IOptionAggrField, IOptionSeries } from '../../data/transforms/aggregation';\n\nexport type OffsetPoint = {\n  /**\n   * x 方向的偏移\n   * 1. number 类型表示像素值，如 12\n   * 2. string 类型表示百分比，如 '10%' 表示相对于所在 region 宽度的占比\n   */\n  x?: number | string;\n  /**\n   * y 方向的偏移\n   * 1. number 类型表示像素值，如 12\n   * 2. string 类型表示百分比，如 '10%' 表示相对于所在 region 高度的占比\n   */\n  y?: number | string;\n};\n\nexport type IAggrType = 'sum' | 'average' | 'min' | 'max' | 'variance' | 'standardDeviation' | 'median';\nexport type IDataPos = StringOrNumber | IAggrType;\nexport type IDataPosCallback = (\n  relativeSeriesData: Datum[],\n  startRelativeSeriesData: Datum[],\n  endRelativeSeriesData: Datum[],\n  relativeSeries: ICartesianSeries,\n  startRelativeSeries: ICartesianSeries,\n  endRelativeSeries: ICartesianSeries\n) => StringOrNumber;\n\nexport type IDataPointSpec = {\n  /**\n   * 数据字段配置\n   */\n  [key: string]: IDataPos | IDataPosCallback;\n  /**\n   * 具体某个数据元素关联的series（仅在标注目标：数据元素下有效）\n   */\n  refRelativeSeriesIndex?: number;\n  refRelativeSeriesId?: StringOrNumber;\n  /**\n   * 指定使用 xField 上的那个维度索引，因为 xField 字段有可能会包含多个维度，比如分组场景\n   * @default 0\n   * @since 1.7.0\n   */\n  xFieldIndex?: number;\n  /**\n   * 指定使用 xField 上的维度名称，因为 xField 字段有可能会包含多个维度，比如分组场景。\n   * `xFieldIndex` 和 `xFieldDim` 声明一个即可，同时声明则 `xFieldDim` 优先级更高。\n   * @since 1.7.0\n   */\n  xFieldDim?: string;\n  /**\n   * 指定使用 yField 上的那个维度索引，因为 yField 字段有可能会包含多个维度，比如分组场景。\n   * @default 0\n   * @since 1.7.0\n   */\n  yFieldIndex?: number;\n  /**\n   * 指定使用 yField 上的维度名称，因为 yField 字段有可能会包含多个维度，比如分组场景。\n   * `yFieldIndex` 和 `yFieldDim` 声明一个即可，同时声明则 `yFieldDim` 优先级更高。\n   * @since 1.7.0\n   */\n  yFieldDim?: string;\n};\n\nexport type MarkerPositionPoint = {\n  /**\n   * x 坐标位置，number 类型表示像素值，string 类型表示相对画布宽度或者 region 宽度的占比（从左往右）\n   */\n  x: StringOrNumber;\n  /**\n   * y 坐标位置，number 类型表示像素值，string 类型表示相对画布高度或者 region 高度的占比（从上至下）\n   */\n  y: StringOrNumber;\n};\n\nexport type ICoordinateOption = {\n  x?: IOptionAggrField | (IDataPosCallback | StringOrNumber)[];\n  y?: IOptionAggrField | (IDataPosCallback | StringOrNumber)[];\n  getRefRelativeSeries?: () => ICartesianSeries;\n} & IOptionSeries;\n\nexport type IMarkerPositionsSpec = {\n  /**\n   * 画布坐标\n   */\n  positions: MarkerPositionPoint[];\n  /**\n   * 是否为相对 region 的坐标，默认为 false，即相对画布的坐标\n   * @default false\n   * @since 1.7.0\n   */\n  regionRelative?: boolean;\n};\n\nexport type IMarkerLabelWithoutRefSpec = {\n  visible?: boolean;\n  /**\n   * label整体 - 是否自动旋转\n   */\n  autoRotate?: boolean;\n  /**\n   * label整体 - 最小宽度，像素值\n   * @default 30\n   */\n  minWidth?: number;\n  /**\n   * label整体 - 最大宽度，像素值。当文字超过最大宽度时，会自动省略。\n   */\n  maxWidth?: number;\n  /**\n   * label整体 - 背景面板配置\n   */\n  labelBackground?: {\n    visible?: boolean;\n    /**\n     * 内部边距\n     */\n    padding?: IPadding | number[] | number;\n    /**\n     * 背景面板样式\n     */\n    style?: Omit<IRectMarkSpec, 'visible'>;\n  };\n  /**\n   * 文本类型：text, rich, html\n   */\n  type?: 'text' | 'rich' | 'html';\n  /**\n   * 文本内容，如果需要进行换行，则使用数组形式，如 ['abc', '123']\n   * 支持富文本内容, 如textConfig, html, 设置富文本时要配置type类型为'rich'或'html'\n   */\n  text?: string | string[] | number | number[] | IRichTextCharacter[];\n  /**\n   * label文本 - 文本格式化\n   * @param markData 组成标注的数据\n   * @param seriesData 标注关联的数据\n   * @returns 格式化后的文本\n   */\n  formatMethod?: (\n    markData: Datum[],\n    seriesData: Datum[]\n  ) => string | string[] | number | number[] | IRichTextCharacter[];\n  /**\n   * label文本 - 文本样式\n   */\n  style?: Omit<ITextMarkSpec, 'visible'>;\n\n  /**\n   * label文本 - 文本前 mark 图元\n   */\n  shape?: {\n    visible?: boolean;\n    style: Omit<ISymbolMarkSpec, 'visible'>;\n  };\n  /**\n   * label文本 - shape 同文本之间的间距\n   */\n  space?: number;\n\n  /**\n   * 是否自动调整 label 使其展示在 marker 可见区域内。\n   * @default false\n   * @since 1.4.0\n   */\n  confine?: boolean;\n  /**\n   * 水平方向的偏移\n   */\n  dx?: number;\n  /**\n   * 垂直方向的偏移\n   */\n  dy?: number;\n};\n\nexport type IMarkerLabelSpec = IMarkerLabelWithoutRefSpec & IMarkerRef;\n\nexport interface IMarkerRef {\n  /**\n   * label or symbol 相对line平行方向上的偏移\n   */\n  refX?: number;\n  /**\n   * label or symbol 相对line正交方向上的偏移\n   */\n  refY?: number;\n  /**\n   * label or symbol 相对默认角度的偏移 （label跟随line的角度做自动旋转时，默认按照line的平行向量作为初始角度）\n   */\n  refAngle?: number;\n}\n\n// 跨越系列的配置\nexport interface IMarkerCrossSeriesSpec {\n  /**\n   * 起点和终点关联的series（仅在标注目标：坐标空间下有效）\n   */\n  startRelativeSeriesIndex?: number;\n  endRelativeSeriesIndex?: number;\n  startRelativeSeriesId?: string;\n  endRelativeSeriesId?: string;\n}\n\nexport interface IMarkerSpec extends IComponentSpec {\n  /**\n   * 标注数据关联的series\n   */\n  relativeSeriesIndex?: number;\n  relativeSeriesId?: number | string;\n  /**\n   * marker组件是否可见\n   * @default true\n   */\n  visible?: boolean;\n  /**\n   * marker组件是否可交互\n   * @default false\n   */\n  interactive?: boolean;\n  /**\n   * marker组件是否自动拓展轴范围\n   * @default false\n   * @since 1.1.0\n   */\n  autoRange?: boolean;\n  /**\n   * marker组件超出图表区域是否被裁剪\n   * @default false\n   * @since 1.3.0\n   */\n  clip?: boolean;\n\n  /**\n   * 标注组件的名称标识\n   * @since 1.7.0\n   */\n  name?: string;\n}\n\nexport interface IMarkerSymbol extends IMarkerRef {\n  /** 是否展示 symbol */\n  visible: boolean;\n  /**\n   * symbol 形状，默认为带左右方向的箭头\n   */\n  symbolType?: SymbolType;\n  /**\n   * symbol 大小\n   */\n  size?: number;\n  style?: Omit<ISymbolMarkSpec, 'visible'>;\n}\n"]}