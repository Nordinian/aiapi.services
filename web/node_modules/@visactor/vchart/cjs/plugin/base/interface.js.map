{"version":3,"sources":["../src/plugin/base/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["export interface IBasePlugin<T = any> {\n  readonly type: string;\n  id: UniqueId;\n  name: string;\n  onAdd: (service: T) => void;\n  init?: () => void;\n  dispose?: (service: T) => void;\n  onInit?: (service: T, ...params: any) => MaybePromise<void>;\n  onDidCompile?: (service: T, ...params: any) => MaybePromise<void>;\n}\n\nexport interface IBasePluginService<T = any> {\n  id: UniqueId;\n  load: (plugins: T[]) => void;\n  add: (plugins: T[]) => T[] | null;\n  activate: (plugins: T[]) => void;\n  get: (id: UniqueId) => T | undefined;\n  getAll: () => T[];\n  dispose: (pluginsId: UniqueId) => void;\n  disposeAll: () => void;\n}\n\nexport type UniqueId = number;\nexport type MaybePromise<T> = T | PromiseLike<T>;\n"]}