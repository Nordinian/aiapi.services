{"version":3,"sources":["../src/component/axis/cartesian/band-axis.ts"],"names":[],"mappings":"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","file":"band-axis.js","sourcesContent":["import { BandScale, scaleWholeRangeSize } from '@visactor/vscale';\nimport { CartesianAxis } from './axis';\nimport type { ICartesianBandAxisSpec } from './interface';\nimport { ComponentTypeEnum } from '../../interface';\nimport { mixin } from '@visactor/vutils';\nimport { BandAxisMixin } from '../mixin/band-axis-mixin';\nimport type { StringOrNumber } from '../../../typings';\nimport { Factory } from '../../../core/factory';\nimport { registerAxis } from '../base-axis';\n\nexport interface CartesianBandAxis<T extends ICartesianBandAxisSpec = ICartesianBandAxisSpec>\n  extends Pick<\n      BandAxisMixin,\n      'valueToPosition' | 'updateGroupScaleRange' | 'getPosition' | 'calcScales' | 'computeBandDomain'\n    >,\n    CartesianAxis<T> {}\n\nexport class CartesianBandAxis<T extends ICartesianBandAxisSpec = ICartesianBandAxisSpec> extends CartesianAxis<T> {\n  static type = ComponentTypeEnum.cartesianBandAxis;\n  type = ComponentTypeEnum.cartesianBandAxis;\n\n  static specKey = 'axes';\n\n  protected _scale: BandScale = new BandScale();\n\n  protected declare _scales: BandScale[];\n\n  protected computeDomain(data: { min: number; max: number; values: any[] }[]): StringOrNumber[] {\n    return this.computeBandDomain(data);\n  }\n\n  protected updateScaleRange() {\n    const isChanged = super.updateScaleRange();\n    this.updateGroupScaleRange();\n\n    return isChanged;\n  }\n\n  protected initScales() {\n    super.initScales();\n    this.calcScales(this._defaultBandInnerPadding, this._defaultBandOuterPadding);\n  }\n\n  protected axisHelper() {\n    const getScale = (depth: number) => {\n      return this._scales[depth];\n    };\n    const getBandwidth = (depth: number) => {\n      return getScale(depth).bandwidth();\n    };\n\n    return {\n      isContinuous: false,\n      dataToPosition: this.dataToPosition.bind(this),\n      getScale,\n      getBandwidth,\n      getAxisType: () => this.type,\n      getAxisId: () => this.id,\n      isInverse: () => this._inverse\n    };\n  }\n\n  transformScaleDomain() {\n    this.updateFixedWholeLength();\n  }\n\n  updateFixedWholeLength() {\n    if (this._scale) {\n      if (this._spec.bandSize) {\n        this._scale.bandwidth(this._spec.bandSize);\n      }\n      if (this._spec.maxBandSize) {\n        this._scale.maxBandwidth(this._spec.maxBandSize);\n      }\n      if (this._spec.minBandSize) {\n        this._scale.minBandwidth(this._spec.minBandSize);\n      }\n      // 更改 region 最大大小\n      if (\n        this._scale.isBandwidthFixed() &&\n        this._spec.autoRegionSize &&\n        (this._spec.bandSize || this._spec.maxBandSize)\n      ) {\n        const rangeSize = scaleWholeRangeSize(\n          this._scale.domain().length,\n          this._spec.bandSize ?? this._spec.maxBandSize,\n          this._scale.paddingInner(),\n          this._scale.paddingOuter()\n        );\n        if (['bottom', 'top'].includes(this._orient)) {\n          this._regions.forEach(region => region.setMaxWidth(rangeSize));\n        } else if (['left', 'right'].includes(this._orient)) {\n          this._regions.forEach(region => region.setMaxHeight(rangeSize));\n        }\n      }\n    }\n  }\n}\n\nmixin(CartesianBandAxis, BandAxisMixin);\n\nexport const registerCartesianBandAxis = () => {\n  registerAxis();\n  Factory.registerComponent(CartesianBandAxis.type, CartesianBandAxis);\n};\n"]}