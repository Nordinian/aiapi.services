"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.TitleModel = void 0;

const style_constants_1 = require("./style-constants"), base_tooltip_model_1 = require("./base-tooltip-model"), shape_model_1 = require("./shape-model"), text_model_1 = require("./text-model"), merge_spec_1 = require("../../../../../util/spec/merge-spec");

class TitleModel extends base_tooltip_model_1.BaseTooltipModel {
    init() {
        const tooltipActual = this._option.getTooltipActual();
        this.product || (this.product = this.createElement("h2"));
        const {title: title} = tooltipActual;
        (null == title ? void 0 : title.hasShape) && (null == title ? void 0 : title.shapeType) ? this.shape || this._initShape() : this.shape && this._releaseShape(), 
        this.textSpan || this._initTextSpan();
    }
    _initShape() {
        const shape = new shape_model_1.ShapeModel(this.product, this._option, 0);
        shape.init(), this.shape = shape, this.children[shape.childIndex] = shape;
    }
    _releaseShape() {
        this.shape && (this.shape.release(), delete this.children[this.shape.childIndex], 
        this.shape = null);
    }
    _initTextSpan() {
        const textSpan = new text_model_1.TextModel(this.product, this._option, 1);
        textSpan.init(), this.textSpan = textSpan, this.children[textSpan.childIndex] = textSpan;
    }
    setStyle(style) {
        var _a, _b, _c, _d;
        const tooltipStyle = this._option.getTooltipStyle(), tooltipActual = this._option.getTooltipActual(), {title: title} = tooltipActual;
        super.setStyle((0, merge_spec_1.mergeSpec)({}, style_constants_1.defaultH2Style, tooltipStyle.title, style)), 
        null === (_a = this.shape) || void 0 === _a || _a.setStyle({
            paddingRight: null === (_b = tooltipStyle.shapeColumn.common) || void 0 === _b ? void 0 : _b.marginRight
        }, {
            hasShape: null == title ? void 0 : title.hasShape,
            symbolType: null == title ? void 0 : title.shapeType,
            size: null === (_c = tooltipStyle.shapeColumn.common) || void 0 === _c ? void 0 : _c.width,
            fill: null == title ? void 0 : title.shapeColor,
            hollow: null == title ? void 0 : title.shapeHollow
        }), null === (_d = this.textSpan) || void 0 === _d || _d.setStyle({
            color: "inherit"
        });
    }
    setContent() {
        var _a, _b, _c, _d, _e, _f;
        const tooltipStyle = this._option.getTooltipStyle(), tooltipActual = this._option.getTooltipActual(), tooltipAttributes = this._option.getTooltipAttributes(), {title: title} = tooltipActual;
        this.init(), null === (_a = this.shape) || void 0 === _a || _a.setStyle(void 0, {
            hasShape: null == title ? void 0 : title.hasShape,
            symbolType: null == title ? void 0 : title.shapeType,
            size: null === (_b = tooltipStyle.shapeColumn.common) || void 0 === _b ? void 0 : _b.width,
            fill: null == title ? void 0 : title.shapeColor,
            hollow: null == title ? void 0 : title.shapeHollow
        }), null === (_c = this.textSpan) || void 0 === _c || _c.setStyle({
            color: "inherit"
        }), null === (_d = this.textSpan) || void 0 === _d || _d.setContent(null == title ? void 0 : title.value, null === (_f = null === (_e = tooltipAttributes.title) || void 0 === _e ? void 0 : _e.value) || void 0 === _f ? void 0 : _f.multiLine);
    }
    release() {
        super.release(), this.shape = null, this.textSpan = null;
    }
}

exports.TitleModel = TitleModel;
//# sourceMappingURL=title-model.js.map
