{"version":3,"sources":["../src/typings/spec/common.ts"],"names":[],"mappings":";;;AA0HA,IAAY,cASX;AATD,WAAY,cAAc;IACxB,qDAAqC,CAAA;IACrC,mDAAmC,CAAA;IACnC,+BAAe,CAAA;IACf,mCAAmB,CAAA;IACnB,qCAAqB,CAAA;IACrB,2BAAW,CAAA;IACX,qDAAqC,CAAA;IACrC,+BAAe,CAAA;AACjB,CAAC,EATW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QASzB","file":"common.js","sourcesContent":["import type { IFillMarkSpec, IImageMarkSpec } from '../visual';\nimport type { LayoutCallBack } from '../../layout/interface';\nimport type { IElement, srIOption3DType } from '@visactor/vgrammar-core';\nimport type {\n  DataSet,\n  DataView,\n  ISimplifyOptions,\n  IFieldsOptions,\n  IFilterOptions,\n  IFoldOptions,\n  IDsvParserOptions\n} from '@visactor/vdataset';\nimport type { IRegionSpec } from '../../region/interface';\nimport type { IHoverSpec, ISelectSpec, ITriggerSpec } from '../../interaction/interface';\nimport type { IRenderOption } from '../../compile/interface';\nimport type { ITooltipSpec } from '../../component/tooltip/interface';\n// eslint-disable-next-line no-duplicate-imports\nimport type { ILayoutSpec } from '../../layout/interface';\n// eslint-disable-next-line no-duplicate-imports\nimport type {\n  ConvertToMarkStyleSpec,\n  IArc3dMarkSpec,\n  IArcMarkSpec,\n  IAreaMarkSpec,\n  IBoxPlotMarkSpec,\n  ICommonSpec,\n  IGroupMarkSpec,\n  ILineMarkSpec,\n  ILinkPathMarkSpec,\n  IPathMarkSpec,\n  IPolygonMarkSpec,\n  IProgressArcMarkSpec,\n  IPyramid3dMarkSpec,\n  IRect3dMarkSpec,\n  IRectMarkSpec,\n  IRuleMarkSpec,\n  ISymbolMarkSpec,\n  IRippleMarkSpec,\n  ITextMarkSpec,\n  IVisualSpecScale\n} from '../visual';\nimport type { StateValue } from '../../compile/mark';\nimport type { ISeriesStyle, SeriesType } from '../../series/interface';\nimport type { Datum, StringOrNumber } from '../common';\nimport type { IInvalidType } from '../data';\nimport type { IMorphSeriesSpec } from '../../animation/spec';\nimport type { IPlayer } from '../../component/player';\nimport type { IMarkProgressiveConfig, MarkTypeEnum } from '../../mark/interface';\nimport type { IDataZoomSpec, IScrollBarSpec } from '../../component/data-zoom';\nimport type { ICrosshairSpec } from '../../component/crosshair/interface';\nimport type { ITheme } from '../../theme';\nimport type { ITitleSpec } from '../../component/title/interface';\nimport type { IBrushSpec } from '../../component/brush';\nimport type { ITotalLabelSpec } from '../../component/label';\nimport type { ILegendSpec } from '../../component/legend';\nimport type { ILayoutOrientPadding, ILayoutPaddingSpec } from '../layout';\nimport type { ICustomPath2D } from '@visactor/vrender-core';\nimport type { ICommonAxisSpec } from '../../component/axis';\nimport type { IMediaQuerySpec } from '..';\n\nexport type IChartPadding = ILayoutOrientPadding | number;\n\n/** chart option */\nexport interface IInitOption extends Omit<IRenderOption, 'pluginList'> {\n  /**\n   * **仅生效于浏览器环境。**\n   * 图表挂载的父容器，可以直接指定容器 id，也可以传入 dom 对象\n   */\n  dom?: string | HTMLElement;\n  /**\n   * 除去选择 dom 属性进行挂载父容器，也可以使用 renderCanvas 属性直接传入 canvas 实例/ canvasId\n   * 小程序/小组件环境请直接传入 id\n   */\n  renderCanvas?: string | HTMLCanvasElement;\n  /** 数据集 */\n  dataSet?: DataSet;\n  /** 是否自适应容器大小 */\n  autoFit?: boolean;\n  /**\n   * 性能测试钩子\n   */\n  performanceHook?: IPerformanceHook;\n  /**\n   * 是否开启动画\n   */\n  animation?: boolean;\n  /**\n   * 3d配置\n   */\n  options3d?: srIOption3DType;\n\n  /**\n   * 自定义布局函数\n   */\n  layout?: LayoutCallBack;\n\n  /**\n   * 当文本省略时，鼠标 hover 到文本上时是否显示 poptip\n   * @default true\n   */\n  poptip?: boolean;\n\n  /**\n   * 报错的回调函数\n   * @since 1.2.0\n   */\n  onError?: (...args: any[]) => void;\n\n  /**\n   * 默认主题（支持完整主题对象或者主题名称，主题名称需要提前在 `ThemeManager` 中注册）\n   * @since 1.3.0\n   */\n  theme?: string | ITheme;\n\n  /**\n   * 是否关闭交互效果\n   * @since 1.9.0\n   * @default false\n   */\n  disableTriggerEvent?: boolean;\n}\n\nexport enum RenderModeEnum {\n  'desktop-browser' = 'desktop-browser',\n  'mobile-browser' = 'mobile-browser',\n  'node' = 'node',\n  'worker' = 'worker',\n  'miniApp' = 'miniApp',\n  'wx' = 'wx',\n  'desktop-miniApp' = 'desktop-miniApp',\n  'lynx' = 'lynx'\n}\nexport type RenderMode = keyof typeof RenderModeEnum;\n\n/** chart spec */\nexport interface IChartSpec {\n  /** 图表类型 */\n  type: string;\n  /** 数据 */\n  data?: IData;\n  /** 画布宽度 */\n  width?: number;\n  /** 画布高度 */\n  height?: number;\n  /**\n   * 图表宽高是否自适应容器，浏览器环境下默认为 true。\n   * 该配置的优先级高于构造函数中的 autoFit 配置。\n   * 如果用户配置了 width，则以用户配置的 width 为准，height 同理。\n   */\n  autoFit?: boolean;\n  /**\n   * 图表整体 padding 设置\n   */\n  padding?: ILayoutPaddingSpec;\n  /**\n   * 图表色系配置\n   */\n  color?: string[] | Omit<IVisualSpecScale<unknown, string>, 'id'>;\n  /**\n   * 系列\n   * @description 仅在组合图中使用, 文档中除组合图外均未透出该配置\n   */\n  series?: ISeriesSpec[];\n  /**\n   * 系列样式\n   * @description 仅在图表配置了seriesField时生效\n   */\n  seriesStyle?: ISeriesStyle;\n\n  /**\n   * 自动关闭动画的阀值，对应的是单系列data的长度\n   * @since 1.2.0\n   */\n  animationThreshold?: number;\n\n  /** hover 交互 */\n  hover?: boolean | IHoverSpec;\n  /** select 交互 */\n  select?: boolean | ISelectSpec;\n\n  /** region配置 */\n  region?: IRegionSpec[];\n  /** 图表标题配置 */\n  title?: ITitleSpec;\n  /** 布局配置 */\n  layout?: ILayoutSpec;\n  /** 图例配置 */\n  legends?: ILegendSpec | ILegendSpec[];\n  /** 十字辅助线配置 */\n  crosshair?: ICrosshairSpec | ICrosshairSpec[];\n  /** tooltip配置 */\n  tooltip?: ITooltipSpec;\n  /** 播放器配置 */\n  player?: IPlayer;\n  /** 缩略轴配置 */\n  dataZoom?: IDataZoomSpec | IDataZoomSpec[];\n  /** 滚动条配置 */\n  scrollBar?: IScrollBarSpec | IScrollBarSpec[];\n  /** 框选配置 */\n  brush?: IBrushSpec;\n  /** 全局 scale 配置 */\n  scales?: IVisualSpecScale<unknown, unknown>[];\n  /** 自定义mark */\n  customMark?: ICustomMarkSpec<EnableMarkType>[];\n  /** 轴 */\n  axes?: ICommonAxisSpec[];\n  /**\n   * 图表上的主题定义。\n   * 可以直接配置主题名，前提是该主题名已经注册\n   */\n  theme?: Omit<ITheme, 'name'> | string;\n  /**\n   * 图表背景色配置，优先级高于构造函数中的 background 配置\n   */\n  background?: IBackgroundSpec;\n\n  // TODO：后续开放，现在仍有问题\n  // poptip?: PopTipAttributes;\n  // TODO: 补充动画配置\n\n  /**\n   * 堆积时是否逆序\n   * @default false\n   * @since 1.4.0\n   */\n  stackInverse?: boolean;\n  /**\n   * 媒体查询配置\n   * @since 1.8.0\n   */\n  media?: IMediaQuerySpec;\n}\n\nexport type IBackgroundStyleSpec = ConvertToMarkStyleSpec<Omit<IFillMarkSpec, 'width' | 'height' | 'background'>> & {\n  image?: IRectMarkSpec['background'];\n  cornerRadius?: IRectMarkSpec['cornerRadius'];\n};\n\nexport type IBackgroundSpec = string | IBackgroundStyleSpec;\n\n/** data */\nexport type IDataType = IDataValues | DataView;\nexport type IData = IDataType | IDataType[];\nexport type DataKeyType = string | string[] | ((data: Datum, index: number) => string);\nexport type BuildInTransformOptions =\n  | {\n      /** 地理数据简化 */\n      type: 'simplify';\n      options: ISimplifyOptions;\n    }\n  | {\n      /** 数据维度处理，包括排序，逆序，数据筛选能力 */\n      type: 'fields';\n      options: IFieldsOptions;\n    }\n  | {\n      /** 使用回调的自定义筛选 */\n      type: 'filter';\n      options: IFilterOptions;\n    }\n  | {\n      /** 数据展开 */\n      type: 'fold';\n      options: IFoldOptions;\n    };\n\nexport interface IFieldsMeta {\n  /** TODO: 字段通用format, 暂时先不支持 */\n  // format?: (datum: Datum, index: number) => unknown;\n  /** 字段别名 */\n  alias?: string;\n  /** 字段取值范围 */\n  domain?: StringOrNumber[];\n  /** 是否使用 domain 锁定统计信息。默认为 false */\n  lockStatisticsByDomain?: boolean;\n  /** 连续型 还是 离散型 */\n  type?: 'ordinal' | 'linear';\n  /** 排序顺序 不设置的话当前维度不进行排序 */\n  sortIndex?: number;\n  /** 排序时是否反转 默认为 false */\n  sortReverse?: boolean;\n}\n\nexport interface SheetParseOptions extends CommonParseOptions {\n  type: 'csv' | 'dsv' | 'tsv';\n  options?: IDsvParserOptions;\n}\n\nexport interface CommonParseOptions {\n  /**\n   * 是否需要对数据进行 clone，默认为 true。\n   * 如果考虑性能，你可以将其关闭，但是这会带了一些副作用，即我们会对传入的数据进行修改（不会对原有字段及值修改，只会在原有数据基础上添加一些字段）。\n   * @default true\n   * @since 1.3.0\n   */\n  clone?: boolean;\n}\n\nexport interface IDataValues {\n  /**\n   * 数据唯一标识\n   */\n  id?: StringOrNumber;\n  /**\n   * 数据\n   */\n  values: Datum[] | string;\n  /**\n   * 引用的数据索引\n   */\n  fromDataIndex?: number;\n  /**\n   * 引用的数据 id\n   */\n  fromDataId?: StringOrNumber;\n  /**\n   * 数据 transform 配置\n   */\n  transforms?: BuildInTransformOptions[];\n  /**\n   * 数据字段相关配置\n   */\n  fields?: Record<\n    /** 字段key */\n    string,\n    IFieldsMeta\n  >;\n\n  parser?: SheetParseOptions | CommonParseOptions;\n}\n\nexport type IHierarchyNodeData = {\n  value?: number;\n  children?: IHierarchyNodeData[];\n} & Datum;\n\nexport interface IHierarchyDataValues extends Omit<IDataValues, 'values'> {\n  values: IHierarchyNodeData;\n}\n\nexport type IHierarchyData = DataView | IHierarchyDataValues;\n\n/** series */\nexport interface ISeriesSpec extends ITriggerSpec {\n  /** 系列类型 */\n  type: SeriesType;\n\n  /** 系列名称 */\n  name?: string;\n\n  /** 用户自定义的 series id */\n  id?: StringOrNumber;\n  /**\n   * 系列数据\n   * @description 系列可以配置自身的数据，也可以从chart.data中获取数据\n   */\n  data?: IDataType;\n  /**\n   * 系列关联的数据索引\n   * @default 0\n   */\n  dataIndex?: number;\n  /**\n   * 系列关联的数据id\n   */\n  dataId?: StringOrNumber;\n  /**\n   * dataKey用于绑定数据与Mark的关系, 该配置在动画中非常重要.\n   */\n  dataKey?: DataKeyType;\n\n  /**\n   * 系列关联的region索引\n   * @default 0\n   */\n  regionIndex?: number;\n  /** 系列关联的region id */\n  regionId?: StringOrNumber;\n  /**\n   * 分组字段\n   */\n  seriesField?: string;\n  /**\n   * 系列样式\n   * @description 仅在图表配置了seriesField时生效\n   */\n  seriesStyle?: ISeriesStyle;\n\n  /** 是否对数据进行堆叠处理 */\n  stack?: boolean;\n\n  /**\n   * 堆叠时的分组值\n   * stackValue 相等的系列将在一起堆积。没有配置的系列将在一组\n   * @since 1.4.0\n   */\n  stackValue?: StringOrNumber;\n\n  /** 堆叠汇总标签\n   * @since 1.3.0\n   */\n  totalLabel?: ITotalLabelSpec;\n\n  /** 是否对数据进行百分比处理 */\n  percent?: boolean;\n\n  /** 是否围绕中心轴偏移轮廓 */\n  stackOffsetSilhouette?: boolean;\n\n  /**\n   * 非合规数据点连接方式\n   * @description null，undefined等非法数据点连接方式。\n   * @default 'break'\n   * 'break'指在该数据点处断开\n   * 'link' 指忽略该点保持连续\n   * 'zero' 指该点默认数值为0\n   * 'ignore' 指不处理\n   */\n  invalidType?: IInvalidType;\n\n  /** 提示信息 */\n  tooltip?: ITooltipSpec;\n\n  /**\n   * 是否开启系列动画\n   */\n  animation?: boolean;\n  /**\n   * 自动关闭动画的阀值，对应的是单系列data的长度\n   * @since 1.2.0\n   */\n  animationThreshold?: number;\n\n  /**\n   * 是否支持3d视角\n   */\n  support3d?: boolean;\n  /**\n   * morph 动画配置\n   */\n  morph?: IMorphSeriesSpec;\n\n  /**\n   * 扩展mark\n   */\n  extensionMark?: (IExtensionMarkSpec<Exclude<EnableMarkType, MarkTypeEnum.group>> | IExtensionGroupMarkSpec)[];\n\n  /**\n   * series background\n   * 作用是支持系列的图形对系列背景进行 mask，或者切分等效果。不是作为背景图\n   * 暂时不开放api，避免出现break change\n   */\n  // background?: IBackgroundSpec;\n}\n\nexport type IChartExtendsSeriesSpec<T extends ISeriesSpec> = Omit<T, 'data' | 'morph' | 'stackValue'>;\n\nexport type AdaptiveSpec<T, K extends keyof any> = {\n  [key in Exclude<keyof T, K>]: T[key];\n} & { [key in K]: any };\n\n/** markSpec */\nexport type IMarkSpec<T extends ICommonSpec = ICommonSpec> = {\n  /**\n   * 用户id\n   */\n  id?: StringOrNumber;\n  /**\n   * 是否响应交互\n   */\n  interactive?: boolean;\n  // /**\n  //  * 是否会被region区域裁减\n  //  * @todo 暂未支持\n  //  */\n  // clip?: boolean;\n  /**\n   * 与其他mark元素的层级\n   */\n  zIndex?: number;\n  /**\n   * mark 层 是否显示配置\n   */\n  visible?: boolean;\n  /** 默认样式设置 */\n  style?: ConvertToMarkStyleSpec<T>;\n  /** 不同状态下的样式配置 */\n  state?: Record<StateValue, IMarkStateSpec<T> | IMarkStateStyleSpec<T>>;\n\n  /* 是否是3d视角的mark */\n  support3d?: boolean;\n  /* customized shape of mark  */\n  customShape?: (datum: any[], attrs: any, path: ICustomPath2D) => ICustomPath2D;\n} & IMarkProgressiveConfig;\n\nexport type IMarkStateFilter =\n  | {\n      /** 维度筛选 */\n      fields: { [key in string]: { type: 'ordinal' | 'linear'; domain: StringOrNumber[] } };\n    }\n  | {\n      /** 筛选数据 */\n      datums: Datum[];\n      /** 筛选数据 */\n      datumKeys: string[];\n    }\n  | {\n      /** 筛选 item */\n      items: IElement[];\n    }\n  /** 筛选函数 */\n  | ((datum: Datum, options: Record<string, any>) => boolean);\n\nexport interface IMarkStateSpec<T> {\n  /** 筛选器 */\n  filter?: IMarkStateFilter;\n  /** 状态优先级 */\n  level?: number | undefined;\n  style: ConvertToMarkStyleSpec<T>;\n}\n\nexport type IMarkStateStyleSpec<T> = ConvertToMarkStyleSpec<T>;\n\nexport type IMarkTheme<T> = {\n  /**\n   * mark 层 是否显示配置\n   */\n  visible?: boolean;\n  /** 默认样式设置 */\n  style?: T;\n  /** 不同状态下的样式配置 */\n  state?: Record<StateValue, T>;\n  /**\n   * 可交互的开关\n   */\n  interactive?: boolean;\n};\n\nexport interface IPerformanceHook {\n  // InitRender\n  //   ├── InitializeChart\n  //   ├── CompileToVGrammar\n  //   ├── ParseView\n  //   |  └── ParseExpression\n  //   ├── (new View)\n  //   |  ├── CreateRuntime\n  //   |  └── (view.initialize)\n  //   |     └── CreateVRenderStage\n  //   └── SrViewEvaluateAsync / SrViewRunAsync\n  //      ├── MarkTransform\n  //      ├── FacetTransform\n  //      ├── CreateVRenderMark\n  //      └── VRenderDraw\n\n  // 初始化图表配置\n  beforeInitializeChart?: () => void;\n  afterInitializeChart?: () => void;\n\n  // 编译\n  beforeCompileToVGrammar?: () => void;\n  afterCompileToVGrammar?: () => void;\n  // 各个图表模块编译\n  beforeRegionCompile?: () => void;\n  afterRegionCompile?: () => void;\n  beforeSeriesCompile?: () => void;\n  afterSeriesCompile?: () => void;\n  beforeComponentCompile?: () => void;\n  afterComponentCompile?: () => void;\n\n  // resize的时候的钩子\n  beforeResizeWithUpdate?: () => void;\n  afterResizeWithUpdate?: () => void;\n\n  // LayoutWithSceneGraph 二次布局\n  beforeLayoutWithSceneGraph?: () => void;\n  afterLayoutWithSceneGraph?: () => void;\n\n  // VGrammar 解析spec\n  beforeParseView?: () => void;\n  afterParseView?: () => void;\n\n  // 初始化runtime\n  beforeCreateRuntime?: () => void;\n  afterCreateRuntime?: () => void;\n\n  // VGrammar EvaluateAsync 时间\n  beforeSrViewEvaluateAsync?: () => void;\n  afterSrViewEvaluateAsync?: () => void;\n\n  // VGrammar RunAsync 时间\n  beforeSrViewRunAsync?: () => void;\n  afterSrViewRunAsync?: () => void;\n\n  // transform测量\n  beforeTransform?: (name: string) => void;\n  afterTransform?: (name: string) => void;\n\n  // Create VRender Stage 时间\n  beforeCreateVRenderStage?: () => void;\n  afterCreateVRenderStage?: () => void;\n\n  // Create VRender Mark 时间\n  beforeCreateVRenderMark?: () => void;\n  afterCreateVRenderMark?: () => void;\n\n  // VRender Draw 时间\n  beforeVRenderDraw?: () => void;\n  afterVRenderDraw?: () => void;\n}\n\nexport type IBuildinMarkSpec = {\n  [MarkTypeEnum.group]: IGroupMarkSpec;\n\n  [MarkTypeEnum.symbol]: ISymbolMarkSpec;\n  [MarkTypeEnum.rule]: IRuleMarkSpec;\n  [MarkTypeEnum.line]: ILineMarkSpec;\n  [MarkTypeEnum.text]: ITextMarkSpec;\n  [MarkTypeEnum.rect]: IRectMarkSpec;\n  [MarkTypeEnum.rect3d]: IRect3dMarkSpec;\n  [MarkTypeEnum.image]: IImageMarkSpec;\n  [MarkTypeEnum.path]: IPathMarkSpec;\n  [MarkTypeEnum.area]: IAreaMarkSpec;\n  [MarkTypeEnum.arc]: IArcMarkSpec;\n  [MarkTypeEnum.arc3d]: IArc3dMarkSpec;\n  [MarkTypeEnum.polygon]: IPolygonMarkSpec;\n  [MarkTypeEnum.pyramid3d]: IPyramid3dMarkSpec;\n  [MarkTypeEnum.boxPlot]: IBoxPlotMarkSpec;\n  [MarkTypeEnum.linkPath]: ILinkPathMarkSpec;\n  [MarkTypeEnum.progressArc]: IProgressArcMarkSpec;\n  [MarkTypeEnum.ripple]: IRippleMarkSpec;\n};\nexport type EnableMarkType = keyof IBuildinMarkSpec;\nexport interface ICustomMarkSpec<T extends EnableMarkType> extends IMarkSpec<IBuildinMarkSpec[T]> {\n  type: T;\n  /**\n   * 关联的数据索引\n   * @default 与系列使用同一份数据\n   */\n  dataIndex?: number;\n  /**\n   * 关联的数据id\n   */\n  dataId?: StringOrNumber;\n}\nexport interface ICustomMarkGroupSpec extends ICustomMarkSpec<MarkTypeEnum.group> {\n  children?: ICustomMarkSpec<EnableMarkType>[];\n}\n\nexport interface IExtensionMarkSpec<T extends Exclude<EnableMarkType, MarkTypeEnum.group>> extends ICustomMarkSpec<T> {\n  /**\n   * 关联的数据索引\n   * @default 与系列使用同一份数据\n   */\n  dataIndex?: number;\n  /**\n   * 关联的数据id\n   */\n  dataId?: StringOrNumber;\n}\n\nexport interface IExtensionGroupMarkSpec extends ICustomMarkSpec<MarkTypeEnum.group> {\n  /**\n   * 支持子节点\n   */\n  children?: ICustomMarkSpec<EnableMarkType>[];\n}\n"]}