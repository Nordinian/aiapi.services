{"version":3,"sources":["../src/data/transforms/treemap.ts"],"names":[],"mappings":";;;AACA,qEAA6D;AAOtD,MAAM,OAAO,GAAG,CAAC,IAAkB,EAAE,EAAe,EAAE,EAAE;IAC7D,IAAI,CAAC,IAAI,IAAI,CAAC,CAAA,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,KAAK,CAAA,EAAE;QACvB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,KAAK,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;IAEzB,IAAI,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,KAAK,CAAC,IAAI,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE;QAC1D,OAAO,IAAI,CAAC;KACb;IAED,MAAM,MAAM,GAAG,IAAI,kCAAa,CAAC,EAAE,CAAC,CAAC;IACrC,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACpC,CAAC,CAAC;AAbW,QAAA,OAAO,WAalB","file":"treemap.js","sourcesContent":["import type { TreemapOptions } from '@visactor/vgrammar-hierarchy';\nimport { TreemapLayout } from '@visactor/vgrammar-hierarchy';\nimport type { Datum } from '../../typings';\n\nexport interface ITreemapOpt extends TreemapOptions {\n  range: () => { x0: number; x1: number; y0: number; y1: number };\n}\n\nexport const treemap = (data: Array<Datum>, op: ITreemapOpt) => {\n  if (!data || !op?.range) {\n    return data;\n  }\n\n  const range = op.range();\n\n  if (range.x1 - range.x0 === 0 || range.y1 - range.y0 === 0) {\n    return data;\n  }\n\n  const layout = new TreemapLayout(op);\n  return layout.layout(data, range);\n};\n"]}