{"version":3,"sources":["../src/generator.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AAIxC,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAChC,IAAsB,EACtB,QAA4B,EAC5B,cAA0C,EAC1C,cAA4B,EACG,EAAE;IACjC,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;QAC9B,MAAM,EAAE,MAAM,EAAE,GAAG,cAAc,CAAC,CAAC,CAAuC,CAAC;QAC3E,uCACK,IAAI,KACP,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;gBACnC,OAAO,aAAa,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;YACrG,CAAC,CAAC,IACF;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAGF,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,IAAsB,EACtB,QAAyB,EACzB,WAAgC,EAChC,cAA4B,EACvB,EAAE;IACP,MAAM,UAAU,GAAG,EAAE,CAAC;IACtB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAClC,MAAM,KAAK,GAAG,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACtF,UAAU,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,KAAK,EAAE,WAAW,CAAC,GAAG,CAAC,EAAE,cAAc,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IACH,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC","file":"generator.js","sourcesContent":["import type { IProgressiveDataSchemeCase, ProgressiveDataScheme } from '@visactor/vchart';\nimport { getTokenValue } from './utils';\nimport type { DataSchemeTokenMap, PaletteTokenMap } from './interface';\n\n/** 生成数据色板 */\nexport const generateDataScheme = (\n  mode: 'light' | 'dark',\n  tokenMap: DataSchemeTokenMap,\n  baseDataScheme: ProgressiveDataScheme<any>,\n  chartContainer?: HTMLElement\n): ProgressiveDataScheme<string> => {\n  return tokenMap.map((item, i) => {\n    const { scheme } = baseDataScheme[i] as IProgressiveDataSchemeCase<string>;\n    return {\n      ...item,\n      scheme: item.scheme.map((token, j) => {\n        return getTokenValue(typeof token === 'object' ? token[mode] : token, scheme?.[j], chartContainer);\n      })\n    };\n  });\n};\n\n/** 生成语义色板 */\nexport const generatePalette = (\n  mode: 'light' | 'dark',\n  tokenMap: PaletteTokenMap,\n  basePalette: Record<string, any>,\n  chartContainer?: HTMLElement\n): any => {\n  const newPalette = {};\n  Object.keys(tokenMap).forEach(key => {\n    const token = typeof tokenMap[key] === 'object' ? tokenMap[key][mode] : tokenMap[key];\n    newPalette[key] = getTokenValue(token, basePalette[key], chartContainer);\n  });\n  return newPalette;\n};\n"]}