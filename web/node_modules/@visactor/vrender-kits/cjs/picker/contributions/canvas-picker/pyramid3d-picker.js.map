{"version":3,"sources":["../src/picker/contributions/canvas-picker/pyramid3d-picker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA,yDAOgC;AAWhC,+CAA2C;AAGpC,IAAM,4BAA4B,GAAlC,MAAM,4BAA6B,SAAQ,wBAAsB;IAItE,YAAqD,cAA8B;QACjF,KAAK,EAAE,CAAC;QAD2C,mBAAc,GAAd,cAAc,CAAgB;QAHnF,SAAI,GAAW,WAAW,CAAC;QAC3B,eAAU,GAAW,oCAAqB,CAAC;IAI3C,CAAC;IAED,QAAQ,CAAC,SAAqB,EAAE,KAAa,EAAE,MAAoB;QACjE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,EAAE,CAAC;QACrC,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;QACD,MAAM,kBAAkB,GAAG,IAAA,uBAAQ,EAAC,SAAS,CAAC,CAAC,OAAO,CAAC;QAEvD,WAAW,CAAC,mBAAmB,EAAE,CAAC;QAClC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,kBAAkB,EAAE,WAAW,CAAC,CAAC;QACxE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC;QAE1C,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,IAAI,WAAW,CAAC,MAAM,EAAE;YACtB,SAAS,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;YAC1B,MAAM,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC;YACxD,SAAS,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;YACnF,SAAS,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;SACpF;QAED,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC;QAE1B,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,CAAC,SAAS,CAC3B,SAAS,EACT,WAAW,EACX,CAAC,EACD,CAAC,EACD,EAAS,EACT,IAAI,EACJ,CACE,OAAmB,EACnB,kBAA+D,EAC/D,cAA+B,EAC/B,EAAE;YAEF,IAAI,MAAM,EAAE;gBACV,OAAO,IAAI,CAAC;aACb;YACD,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YACzD,OAAO,MAAM,CAAC;QAChB,CAAC,EACD,CACE,OAAmB,EACnB,kBAA+D,EAC/D,cAA+B,EAC/B,EAAE;YASF,OAAO,KAAK,CAAC;QACf,CAAC,CACF,CAAC;QACF,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC;QAE1B,IAAI,WAAW,CAAC,WAAW,KAAK,eAAe,EAAE;YAC/C,2BAAY,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,WAAW,CAAC,WAAW,GAAG,eAAe,CAAC;QAC1C,WAAW,CAAC,sBAAsB,EAAE,CAAC;QACrC,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAA;AA1EY,4BAA4B;IADxC,IAAA,yBAAU,GAAE;IAKE,WAAA,IAAA,qBAAM,EAAC,8BAAe,CAAC,CAAA;;GAJzB,4BAA4B,CA0ExC;AA1EY,oEAA4B","file":"pyramid3d-picker.js","sourcesContent":["import type { IPoint } from '@visactor/vutils';\nimport { AABBBounds } from '@visactor/vutils';\nimport {\n  inject,\n  injectable,\n  getTheme,\n  Pyramid3dRender,\n  mat4Allocate,\n  PYRAMID3D_NUMBER_TYPE\n} from '@visactor/vrender-core';\nimport type {\n  IGraphicAttribute,\n  IContext2d,\n  IMarkAttribute,\n  IPyramid3d,\n  IThemeAttribute,\n  IGraphicRender,\n  IGraphicPicker,\n  IPickParams\n} from '@visactor/vrender-core';\nimport { BasePicker } from './base-picker';\n\n@injectable()\nexport class DefaultCanvasPyramid3dPicker extends BasePicker<IPyramid3d> implements IGraphicPicker {\n  type: string = 'pyramid3d';\n  numberType: number = PYRAMID3D_NUMBER_TYPE;\n\n  constructor(@inject(Pyramid3dRender) public readonly canvasRenderer: IGraphicRender) {\n    super();\n  }\n\n  contains(pyramid3d: IPyramid3d, point: IPoint, params?: IPickParams): boolean {\n    const { pickContext } = params ?? {};\n    if (!pickContext) {\n      return false;\n    }\n    const pyramid3dAttribute = getTheme(pyramid3d).polygon;\n\n    pickContext.highPerformanceSave();\n    const data = this.transform(pyramid3d, pyramid3dAttribute, pickContext);\n    const { x, y, z, lastModelMatrix } = data;\n\n    let pickPoint = point;\n    if (pickContext.camera) {\n      pickPoint = point.clone();\n      const globalMatrix = pyramid3d.parent.globalTransMatrix;\n      pickPoint.x = globalMatrix.a * point.x + globalMatrix.c * point.y + globalMatrix.e;\n      pickPoint.y = globalMatrix.b * point.x + globalMatrix.d * point.y + globalMatrix.f;\n    }\n\n    this.canvasRenderer.z = z;\n    // 详细形状判断\n    let picked = false;\n    this.canvasRenderer.drawShape(\n      pyramid3d,\n      pickContext,\n      x,\n      y,\n      {} as any,\n      null,\n      (\n        context: IContext2d,\n        pyramid3dAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n        themeAttribute: IThemeAttribute\n      ) => {\n        // 选中后面就不需要再走逻辑了\n        if (picked) {\n          return true;\n        }\n        picked = context.isPointInPath(pickPoint.x, pickPoint.y);\n        return picked;\n      },\n      (\n        context: IContext2d,\n        pyramid3dAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n        themeAttribute: IThemeAttribute\n      ) => {\n        // // 选中后面就不需要再走逻辑了\n        // if (picked) {\n        //   return true;\n        // }\n        // const lineWidth = pyramid3dAttribute.lineWidth || themeAttribute.lineWidth;\n        // pickContext.lineWidth = getScaledStroke(pickContext, lineWidth, pickContext.dpr);\n        // picked = context.isPointInStroke(point.x, point.y);\n        // return picked;\n        return false;\n      }\n    );\n    this.canvasRenderer.z = 0;\n\n    if (pickContext.modelMatrix !== lastModelMatrix) {\n      mat4Allocate.free(pickContext.modelMatrix);\n    }\n    pickContext.modelMatrix = lastModelMatrix;\n    pickContext.highPerformanceRestore();\n    return picked;\n  }\n}\n"]}