{"version":3,"sources":["../src/picker/contributions/canvas-picker/area-picker.ts"],"names":[],"mappings":"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","file":"area-picker.js","sourcesContent":["import { inject, injectable, getTheme, AreaRender, AREA_NUMBER_TYPE, getScaledStroke } from '@visactor/vrender-core';\nimport type { IPoint } from '@visactor/vutils';\nimport type {\n  IArea,\n  IContext2d,\n  IGraphicAttribute,\n  IGraphicPicker,\n  IGraphicRender,\n  IMarkAttribute,\n  IPickParams,\n  IThemeAttribute\n} from '@visactor/vrender-core';\n\n@injectable()\nexport class DefaultCanvasAreaPicker implements IGraphicPicker {\n  type: string = 'area';\n  numberType: number = AREA_NUMBER_TYPE;\n\n  constructor(@inject(AreaRender) public readonly canvasRenderer: IGraphicRender) {}\n\n  contains(area: IArea, point: IPoint, params?: IPickParams): boolean {\n    if (!area.AABBBounds.containsPoint(point)) {\n      return false;\n    }\n    if (area.attribute.pickMode === 'imprecise') {\n      return true;\n    }\n\n    const { pickContext } = params ?? {};\n    if (!pickContext) {\n      return false;\n    }\n\n    // const areaAttribute = graphicService.themeService.getCurrentTheme().areaAttribute;\n    const areaAttribute = getTheme(area).area;\n    let { x = areaAttribute.x, y = areaAttribute.y } = area.attribute;\n    const { fillPickable = areaAttribute.fillPickable, strokePickable = areaAttribute.strokePickable } = area.attribute;\n\n    pickContext.highPerformanceSave();\n    if (!area.transMatrix.onlyTranslate()) {\n      // 性能较差\n      x = 0;\n      y = 0;\n      pickContext.transformFromMatrix(area.transMatrix, true);\n    } else {\n      const point = area.getOffsetXY(areaAttribute);\n      x += point.x;\n      y += point.y;\n      // 当前context有rotate/scale，重置matrix\n      pickContext.setTransformForCurrent();\n    }\n\n    // 详细形状判断\n    let picked = false;\n    this.canvasRenderer.drawShape(\n      area,\n      pickContext,\n      x,\n      y,\n      {} as any,\n      null,\n      context => {\n        // 选中后面就不需要再走逻辑了\n        if (picked) {\n          return true;\n        }\n        if (!fillPickable) {\n          return false;\n        }\n        picked = context.isPointInPath(point.x, point.y);\n        return picked;\n      },\n      (\n        context: IContext2d,\n        areaAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n        themeAttribute: IThemeAttribute\n      ) => {\n        // 选中后面就不需要再走逻辑了\n        if (picked) {\n          return true;\n        }\n        if (!strokePickable) {\n          return false;\n        }\n        const lineWidth = areaAttribute.lineWidth || themeAttribute.lineWidth;\n        const pickStrokeBuffer = areaAttribute.pickStrokeBuffer || themeAttribute.pickStrokeBuffer;\n        pickContext.lineWidth = getScaledStroke(pickContext, lineWidth + pickStrokeBuffer, pickContext.dpr);\n        picked = context.isPointInStroke(point.x, point.y);\n        return picked;\n      }\n    );\n\n    pickContext.highPerformanceRestore();\n    // area没有stroke pick\n    return picked;\n  }\n}\n"]}