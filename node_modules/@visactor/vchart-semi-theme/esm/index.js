import VChart from "@visactor/vchart";

import { generateThemeName, getCurrentMode, observeAttribute, observeThemeSwitch } from "./util";

import { generateVChartSemiTheme } from "./generator";

import { THEME_MODE_ATTRIBUTE } from "./common/constants";

export * from "./theme-map";

export * from "./generator";

export * from "./light";

export * from "./dark";

export const initVChartSemiTheme = options => {
    const {defaultMode: defaultMode, isWatchingMode: isWatchingMode = !0, isWatchingThemeSwitch: isWatchingThemeSwitch = !1} = null != options ? options : {};
    switchVChartSemiTheme(!1, defaultMode), isWatchingMode && observeAttribute(document.body, THEME_MODE_ATTRIBUTE, (() => switchVChartSemiTheme())), 
    isWatchingThemeSwitch && observeThemeSwitch((() => {
        const mode = getCurrentMode(), cacheColorScheme = JSON.stringify(generateVChartSemiTheme(mode).colorScheme);
        let times = 0;
        const timer = setInterval((() => {
            const theme = generateVChartSemiTheme(mode);
            (times > 50 || cacheColorScheme !== JSON.stringify(theme.colorScheme)) && (switchVChartSemiTheme(!0, mode, theme), 
            clearInterval(timer)), times++;
        }), 100);
    }));
};

export const switchVChartSemiTheme = (force, mode, theme) => {
    mode || (mode = getCurrentMode());
    const themeName = generateThemeName(mode);
    (force || VChart.ThemeManager.getCurrentTheme() !== themeName) && (force && VChart.ThemeManager.removeTheme(themeName), 
    VChart.ThemeManager.themeExist(themeName) || VChart.ThemeManager.registerTheme(themeName, null != theme ? theme : generateVChartSemiTheme(mode)), 
    VChart.ThemeManager.setCurrentTheme(themeName));
};
//# sourceMappingURL=index.js.map