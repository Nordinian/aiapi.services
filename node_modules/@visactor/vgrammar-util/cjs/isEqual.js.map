{"version":3,"sources":["../src/isEqual.ts"],"names":[],"mappings":";;;AAAA,6CAA0E;AAEnE,MAAM,OAAO,GAAG,CAAC,GAAW,EAAE,OAAY,EAAE,MAAW,EAAE,OAAgB,IAAI,EAAE,EAAE;IACtF,IAAI,OAAO,KAAK,MAAM,EAAE;QACtB,OAAO,IAAI,CAAC;KACb;IAGD,IAAI,IAAA,cAAK,EAAC,OAAO,CAAC,IAAI,IAAA,cAAK,EAAC,MAAM,CAAC,EAAE;QACnC,OAAO,IAAA,cAAK,EAAC,OAAO,CAAC,IAAI,IAAA,cAAK,EAAC,MAAM,CAAC,CAAC;KACxC;IAGD,IAAI,CAAC,IAAA,qBAAY,EAAC,OAAO,CAAC,IAAI,CAAC,IAAA,qBAAY,EAAC,MAAM,CAAC,EAAE;QACnD,OAAO,OAAO,KAAK,MAAM,CAAC;KAC3B;IAED,MAAM,CAAC,GAAG,IAAA,gBAAO,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACpD,MAAM,CAAC,GAAG,IAAA,gBAAO,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAEjD,IAAI,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,IAAI,CAAC;KACb;IACD,IAAI,IAAI,KAAK,KAAK,EAAE;QAClB,OAAO,KAAK,CAAC;KACd;IAED,IAAI,IAAA,gBAAO,EAAC,CAAC,CAAC,EAAE;QACd,IAAI,IAAA,gBAAO,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACxE,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;KACd;IAED,IAAI,IAAA,iBAAQ,EAAC,CAAC,CAAC,EAAE;QACf,IAAI,IAAA,iBAAQ,EAAC,CAAC,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,IAAA,eAAO,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;YACjH,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;KACd;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAvCW,QAAA,OAAO,WAuClB","file":"isEqual.js","sourcesContent":["import { isObjectLike, isArray, isNil, isObject } from '@visactor/vutils';\n\nexport const isEqual = (key: string, current: any, target: any, deep: boolean = true) => {\n  if (current === target) {\n    return true;\n  }\n\n  // 如果有空值，则直接返回false，这里认为 null 和 undefined 相等\n  if (isNil(current) || isNil(target)) {\n    return isNil(current) && isNil(target);\n  }\n\n  // 非 object 类型直接比对\n  if (!isObjectLike(current) && !isObjectLike(target)) {\n    return current === target;\n  }\n\n  const c = isArray(current) ? current : current[key];\n  const t = isArray(target) ? target : target[key];\n\n  if (c === t) {\n    return true;\n  }\n  if (deep === false) {\n    return false;\n  }\n  // 类型必须相同\n  if (isArray(t)) {\n    if (isArray(c) && t.length === c.length && t.every((v, i) => v === c[i])) {\n      return true;\n    }\n    return false;\n  }\n  // 类型必须相同\n  if (isObject(t)) {\n    if (isObject(c) && Object.keys(t).length === Object.keys(c).length && Object.keys(t).every(k => isEqual(k, t, c))) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n};\n"]}