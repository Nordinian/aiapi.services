import { isDiscrete } from "@visactor/vscale";

import { getDimensionData, getAxis } from "./common";

import { isNil } from "@visactor/vutils";

import { isXAxis, isYAxis } from "../../../../component/axis/cartesian/util/common";

import { getFirstSeries } from "../../../../util/model";

const discreteXAxisGetDimensionField = series => series.fieldX[0], discreteYAxisGetDimensionField = series => series.fieldY[0], continuousXAxisGetDimensionField = series => [ series.fieldX[0], series.fieldX2 ], continuousYAxisGetDimensionField = series => [ series.fieldY[0], series.fieldY2 ];

export const getCartesianDimensionInfo = (chart, pos) => {
    var _a, _b;
    if (!chart) return null;
    if (!getFirstSeries(chart.getRegionsInIndex(), "cartesian")) return null;
    const {x: x, y: y} = pos, xAxisList = null !== (_a = getAxis(chart, (cmp => isXAxis(cmp.getOrient())), pos)) && void 0 !== _a ? _a : [], yAxisList = null !== (_b = getAxis(chart, (cmp => isYAxis(cmp.getOrient())), pos)) && void 0 !== _b ? _b : [], bandAxisSet = new Set, linearAxisSet = new Set;
    [ xAxisList, yAxisList ].forEach((axisList => axisList.forEach((axis => {
        isDiscrete(axis.getScale().type) ? bandAxisSet.add(axis) : linearAxisSet.add(axis);
    }))));
    const targetAxisInfo = [], addAxisDimensionInfo = (orient, isDiscrete) => {
        ("x" === orient ? xAxisList : yAxisList).forEach((axis => {
            if ((isDiscrete ? bandAxisSet : linearAxisSet).has(axis)) {
                const info = getDimensionInfoByPosition(axis, "x" === orient ? x : y, orient, "x" === orient ? isDiscrete ? discreteXAxisGetDimensionField : continuousXAxisGetDimensionField : isDiscrete ? discreteYAxisGetDimensionField : continuousYAxisGetDimensionField);
                info && targetAxisInfo.push(info);
            }
        }));
    };
    return "horizontal" === chart.getSpec().direction ? (addAxisDimensionInfo("y", bandAxisSet.size > 0), 
    0 === targetAxisInfo.length && addAxisDimensionInfo("x", bandAxisSet.size > 0)) : (addAxisDimensionInfo("x", bandAxisSet.size > 0), 
    0 === targetAxisInfo.length && addAxisDimensionInfo("y", bandAxisSet.size > 0)), 
    targetAxisInfo.length ? targetAxisInfo : null;
};

export const getDimensionInfoByPosition = (axis, posValue, posKey, getDimensionField) => {
    const scale = axis.getScale(), scalePos = posValue - axis.getLayoutStartPoint()[posKey];
    if ((scalePos - scale.range()[0]) * (scalePos - scale.range()[1]) > 0) return null;
    const value = scale.invert(scalePos);
    return getDimensionInfoByValue(axis, value, getDimensionField);
};

export const getDimensionInfoByValue = (axis, value, getDimensionField) => {
    const scale = axis.getScale();
    if (isNil(value)) return null;
    let index = scale.domain().findIndex((v => (null == v ? void 0 : v.toString()) === value.toString()));
    index < 0 && (index = void 0);
    const data = getDimensionData(value, axis, "cartesian", null != getDimensionField ? getDimensionField : isXAxis(axis.getOrient()) ? discreteXAxisGetDimensionField : discreteYAxisGetDimensionField);
    return {
        index: index,
        value: value,
        axis: axis,
        data: data
    };
};
//# sourceMappingURL=cartesian.js.map
