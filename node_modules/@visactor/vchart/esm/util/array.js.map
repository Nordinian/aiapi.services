{"version":3,"sources":["../src/util/array.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,IAAI,IAAI,IAAI,EAAE,UAAU,IAAI,QAAQ,EAAE,UAAU,IAAI,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAEvG,MAAM,UAAU,cAAc,CAAO,IAAa,EAAE,IAAa;IAC/D,MAAM,IAAI,GAAG,IAAI,GAAG,CAAQ,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACzC,MAAM,IAAI,GAAG,IAAI,GAAG,CAAQ,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACzC,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE;QAC3B,OAAO,KAAK,CAAC;KACd;IACD,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;QAC7B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC","file":"array.js","sourcesContent":["import { array, last as peek, maxInArray as maxInArr, minInArray as minInArr } from '@visactor/vutils';\n\nexport function shallowCompare<T, U>(arrA: T | T[], arrB: U | U[]): boolean {\n  const setA = new Set<T | U>(array(arrA));\n  const setB = new Set<T | U>(array(arrB));\n  if (setA.size !== setB.size) {\n    return false;\n  }\n  for (const v of setA.values()) {\n    if (!setB.has(v)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport { array, peek, maxInArr, minInArr };\n"]}