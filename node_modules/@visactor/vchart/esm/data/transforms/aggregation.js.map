{"version":3,"sources":["../src/data/transforms/aggregation.ts"],"names":[],"mappings":"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","file":"aggregation.js","sourcesContent":["import type { DataView } from '@visactor/vdataset';\nimport type { IAggrType } from '../../component/marker/interface';\nimport type { ICartesianSeries } from '../../series/interface';\nimport type { Datum, StringOrNumber } from '../../typings';\n\nimport { isArray, isFunction, isPlainObject, isValid } from '@visactor/vutils';\nimport { variance, average, min, max, sum, standardDeviation, median } from '../../util/math';\n\nexport type IOption = {\n  field: string;\n};\n\nexport type IOptionAggrField = {\n  field: string;\n  aggrType: IAggrType;\n};\n\nexport type IOptionPos = IOptionAggrField | string | number | StringOrNumber[];\n\nexport type IOptionSeries = {\n  getRelativeSeries: () => ICartesianSeries;\n  getStartRelativeSeries: () => ICartesianSeries;\n  getEndRelativeSeries: () => ICartesianSeries;\n};\n\nexport type IOptionCallback = (\n  relativeSeriesData: any,\n  startRelativeSeriesData: any,\n  endRelativeSeriesData: any,\n  relativeSeries: ICartesianSeries,\n  startRelative: ICartesianSeries,\n  endRelative: ICartesianSeries\n) => IOptionPos;\n\nexport type IOptionAggr = {\n  x?: IOptionPos | IOptionCallback;\n  y?: IOptionPos | IOptionCallback;\n  getRefRelativeSeries?: () => ICartesianSeries;\n} & IOptionSeries;\n\nexport const markerMin = (_data: Array<DataView>, opt: IOption) => {\n  const data = _data[0].latestData as Datum[];\n\n  return min(data, opt.field);\n};\nexport const markerMax = (_data: Array<DataView>, opt: IOption) => {\n  const data = _data[0].latestData as Datum[];\n\n  return max(data, opt.field);\n};\n\nexport function markerSum(_data: Array<DataView>, opt: IOption) {\n  const data = _data[0].latestData;\n\n  return sum(data, opt.field);\n}\nexport function markerAverage(_data: Array<DataView>, opt: IOption) {\n  const data = _data[0].latestData;\n\n  return average(data, opt.field);\n}\n\nexport function markerVariance(_data: Array<DataView>, opt: IOption) {\n  const data = _data[0].latestData;\n\n  return variance(data, opt.field);\n}\n\nexport function markerStandardDeviation(_data: Array<DataView>, opt: IOption) {\n  const data = _data[0].latestData;\n\n  return standardDeviation(data, opt.field);\n}\n\nexport function markerMedian(_data: Array<DataView>, opt: IOption) {\n  const data = _data[0].latestData;\n\n  return median(data, opt.field);\n}\n\nexport function markerAggregation(_data: Array<DataView>, options: IOptionAggr[]) {\n  const results: {\n    x: StringOrNumber[] | StringOrNumber | IOptionCallback | null;\n    y: StringOrNumber[] | StringOrNumber | IOptionCallback | null;\n  }[] = [];\n  options.forEach(option => {\n    const result: {\n      x: StringOrNumber[] | StringOrNumber | null;\n      y: StringOrNumber[] | StringOrNumber | null;\n      getRefRelativeSeries?: () => ICartesianSeries;\n    } = { x: null, y: null };\n\n    if (isValid(option.x)) {\n      const x = option.x;\n\n      if (isArray(x)) {\n        result.x = x.map(item => getFinalValue(item, _data, option)) as StringOrNumber[];\n      } else {\n        result.x = getFinalValue(x, _data, option) as StringOrNumber;\n      }\n    }\n    if (isValid(option.y)) {\n      const y = option.y;\n      if (isArray(y)) {\n        result.y = y.map(item => getFinalValue(item, _data, option)) as StringOrNumber[];\n      } else {\n        result.y = getFinalValue(y, _data, option) as StringOrNumber;\n      }\n    }\n    if (option.getRefRelativeSeries) {\n      result.getRefRelativeSeries = option.getRefRelativeSeries;\n    }\n    results.push(result);\n  });\n\n  return results;\n}\n\nconst aggrMap = {\n  min: markerMin,\n  max: markerMax,\n  sum: markerSum,\n  average: markerAverage,\n  variance: markerVariance,\n  standardDeviation: markerStandardDeviation,\n  median: markerMedian\n};\n\nfunction getFinalValue(source: IOptionPos | IOptionCallback, _data: Array<DataView>, option: IOptionAggr) {\n  const relativeSeries = option.getRelativeSeries();\n  const startSeries = option.getStartRelativeSeries();\n  const endSeries = option.getEndRelativeSeries();\n  const relativeSeriesData = relativeSeries.getData().getLatestData();\n  const startRelativeSeriesData = startSeries.getData().getLatestData();\n  const endRelativeSeriesData = endSeries.getData().getLatestData();\n\n  if (isFunction(source)) {\n    return source(\n      relativeSeriesData,\n      startRelativeSeriesData,\n      endRelativeSeriesData,\n      relativeSeries,\n      startSeries,\n      endSeries\n    ) as StringOrNumber[] | StringOrNumber;\n  }\n  if (isPlainObject(source)) {\n    const { aggrType, field } = source as IOptionAggrField;\n    return aggrMap[aggrType](_data, { field: field });\n  }\n\n  return source;\n}\n"]}