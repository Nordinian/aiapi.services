import { BaseChartSpecTransformer } from "../base";

export class FunnelChartSpecTransformer extends BaseChartSpecTransformer {
    needAxes() {
        return !1;
    }
    _getDefaultSeriesSpec(spec) {
        const series = Object.assign(Object.assign({}, super._getDefaultSeriesSpec(spec)), {
            categoryField: spec.categoryField,
            valueField: spec.valueField,
            seriesField: spec.seriesField,
            funnelAlign: spec.funnelAlign,
            funnelOrient: spec.funnelOrient,
            shape: spec.shape,
            funnel: spec.funnel,
            transform: spec.transform,
            outerLabel: spec.outerLabel,
            transformLabel: spec.transformLabel,
            isTransform: spec.isTransform,
            maxSize: spec.maxSize,
            minSize: spec.minSize,
            gap: spec.gap,
            isCone: spec.isCone,
            range: spec.range
        }), seriesType = this.seriesType;
        return seriesType && (series.type = seriesType, series[seriesType] = spec[seriesType]), 
        series;
    }
    transformSpec(spec) {
        super.transformSpec(spec);
        const defaultSeriesSpec = this._getDefaultSeriesSpec(spec);
        spec.series && 0 !== spec.series.length ? spec.series.forEach((s => {
            this._isValidSeries(s.type) && Object.keys(defaultSeriesSpec).forEach((k => {
                k in s || (s[k] = defaultSeriesSpec[k]);
            }));
        })) : spec.series = [ defaultSeriesSpec ];
    }
}
//# sourceMappingURL=funnel-transformer.js.map
