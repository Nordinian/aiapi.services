{"version":3,"sources":["../src/compile/interface/compilable-item.ts"],"names":[],"mappings":"AAoCA,MAAM,CAAN,IAAY,WAIX;AAJD,WAAY,WAAW;IACrB,4BAAa,CAAA;IACb,gCAAiB,CAAA;IACjB,4BAAa,CAAA;AACf,CAAC,EAJW,WAAW,KAAX,WAAW,QAItB","file":"compilable-item.js","sourcesContent":["import type { IGroupMark, IGrammarBase, IView } from '@visactor/vgrammar-core';\nimport type { Compiler } from '../compiler';\nimport type { Maybe, IPerformanceHook } from '../../typings';\n\nexport interface ICompilable {\n  /** 获取 compile 对象 */\n  getCompiler: () => Compiler;\n  /** 获取 vgrammar view */\n  getVGrammarView: () => IView;\n\n  /** 编译总入口 */\n  compile: () => void;\n  /** 编译所有 mark */\n  compileMarks?: (group?: string | IGroupMark) => void;\n  /** 编译所有 data */\n  compileData?: () => void;\n  /** 编译所有 signal */\n  compileSignal?: () => void;\n\n  /** 清除compile 内容入口 */\n  clear?: () => void;\n\n  /** 全部编译完成 lift circle */\n  afterCompile?: () => void;\n\n  /** 释放总入口 */\n  release: () => void;\n}\n\nexport interface ICompilableInitOption {\n  /** 编译对象 应当由外部提供 */\n  getCompiler: () => Compiler;\n  /** 性能测试钩子 */\n  performanceHook?: IPerformanceHook;\n}\n\nexport enum GrammarType {\n  data = 'data',\n  signal = 'signal',\n  mark = 'mark'\n}\n\nexport interface IGrammarItem extends ICompilable {\n  id: number;\n  /** 语法元素类型 */\n  grammarType: GrammarType;\n  /** 获取语法元素 */\n  getProduct: () => Maybe<IGrammarBase>;\n  /** 生成语法元素名称 */\n  generateProductId: () => string;\n  /** 获取语法元素名称 */\n  getProductId: () => string;\n  /** 删除已编译的语法元素 */\n  removeProduct: (reserveVGrammarModel?: boolean) => void;\n  /** 获取该语法元素依赖的语法元素 */\n  getDepend: () => IGrammarItem[];\n  /** 设置该语法元素依赖的语法元素 */\n  setDepend: (...depend: IGrammarItem[]) => void;\n  /** 更新语法元素的依赖，返回是否全部成功更新 */\n  updateDepend: () => boolean;\n}\n\nexport type GrammarItemInitOption = ICompilableInitOption;\n\nexport type GrammarItemCompileOption = Record<string, any>;\n"]}