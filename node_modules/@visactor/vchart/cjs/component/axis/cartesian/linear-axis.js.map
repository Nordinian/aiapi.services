{"version":3,"sources":["../src/component/axis/cartesian/linear-axis.ts"],"names":[],"mappings":";;;AAEA,6CAA+C;AAC/C,iCAAuC;AACvC,6CAAkD;AAElD,+CAAyD;AACzD,kEAA6D;AAC7D,mDAAgD;AAChD,4CAA4C;AAe5C,MAAa,mBAEX,SAAQ,oBAAgB;IAF1B;;QAIE,SAAI,GAAG,wBAAiB,CAAC,mBAAmB,CAAC;QAInC,UAAK,GAAY,IAAI,CAAC;QACtB,UAAK,GAAY,IAAI,CAAC;QACtB,YAAO,GAA8B,EAAE,CAAC;QAExC,WAAM,GAA2B,IAAI,oBAAW,EAAE,CAAC;IAkC/D,CAAC;IA/BC,eAAe;QACb,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAKS,UAAU;;QAClB,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACrB,IAAI,IAAA,gBAAO,EAAC,MAAA,IAAI,CAAC,OAAO,0CAAE,GAAG,CAAC,EAAE;YAC9B,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;SAC7B;QACD,IAAI,IAAA,gBAAO,EAAC,MAAA,IAAI,CAAC,OAAO,0CAAE,GAAG,CAAC,EAAE;YAC9B,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;SAC7B;QACD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAE5B,CAAC;IAES,aAAa,CAAC,IAAmD;QACzE,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAES,UAAU;QAClB,MAAM,MAAM,GAAgB,KAAK,CAAC,UAAU,EAAE,CAAC;QAC/C,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,OAAO,MAAM,CAAC;IAChB,CAAC;;AA7CH,kDA8CC;AA3CQ,wBAAI,GAAG,wBAAiB,CAAC,mBAAmB,CAAC;AAG7C,2BAAO,GAAG,MAAM,CAAC;AA0C1B,IAAA,cAAK,EAAC,mBAAmB,EAAE,mCAAe,CAAC,CAAC;AAErC,MAAM,2BAA2B,GAAG,GAAG,EAAE;IAC9C,IAAA,wBAAY,GAAE,CAAC;IACf,iBAAO,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;AAC3E,CAAC,CAAC;AAHW,QAAA,2BAA2B,+BAGtC","file":"linear-axis.js","sourcesContent":["import type { LogScale } from '@visactor/vscale';\n// eslint-disable-next-line no-duplicate-imports\nimport { LinearScale } from '@visactor/vscale';\nimport { CartesianAxis } from './axis';\nimport { isValid, mixin } from '@visactor/vutils';\nimport type { IAxisHelper, ICartesianLinearAxisSpec } from './interface';\nimport { ComponentTypeEnum } from '../../interface/type';\nimport { LinearAxisMixin } from '../mixin/linear-axis-mixin';\nimport { Factory } from '../../../core/factory';\nimport { registerAxis } from '../base-axis';\n\nexport interface CartesianLinearAxis<T extends ICartesianLinearAxisSpec = ICartesianLinearAxisSpec>\n  extends Pick<\n      LinearAxisMixin,\n      | 'setExtraAttrFromSpec'\n      | 'computeLinearDomain'\n      | 'valueToPosition'\n      | 'setScaleNice'\n      | '_domain'\n      | 'transformScaleDomain'\n      | 'setExtendDomain'\n    >,\n    CartesianAxis<T> {}\n\nexport class CartesianLinearAxis<\n  T extends ICartesianLinearAxisSpec = ICartesianLinearAxisSpec\n> extends CartesianAxis<T> {\n  static type = ComponentTypeEnum.cartesianLinearAxis;\n  type = ComponentTypeEnum.cartesianLinearAxis;\n\n  static specKey = 'axes';\n\n  protected _zero: boolean = true;\n  protected _nice: boolean = true;\n  protected _extend: { [key: string]: number } = {};\n\n  protected _scale: LinearScale | LogScale = new LinearScale();\n  protected declare _scales: LinearScale[] | LogScale[];\n\n  setAttrFromSpec(): void {\n    super.setAttrFromSpec();\n    this.setExtraAttrFromSpec();\n  }\n\n  /**\n   * @override\n   */\n  protected initScales() {\n    super.initScales();\n    const range = [0, 1];\n    if (isValid(this._domain?.min)) {\n      range[0] = this._domain.min;\n    }\n    if (isValid(this._domain?.max)) {\n      range[1] = this._domain.max;\n    }\n    this._scale.domain(range);\n    // this.setScaleNice();\n  }\n\n  protected computeDomain(data: { min: number; max: number; values: any[] }[]): number[] {\n    return this.computeLinearDomain(data);\n  }\n\n  protected axisHelper() {\n    const helper: IAxisHelper = super.axisHelper();\n    helper.setExtendDomain = this.setExtendDomain.bind(this);\n    helper.valueToPosition = this.valueToPosition.bind(this);\n    return helper;\n  }\n}\n\nmixin(CartesianLinearAxis, LinearAxisMixin);\n\nexport const registerCartesianLinearAxis = () => {\n  registerAxis();\n  Factory.registerComponent(CartesianLinearAxis.type, CartesianLinearAxis);\n};\n"]}