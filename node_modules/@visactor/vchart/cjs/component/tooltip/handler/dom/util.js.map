{"version":3,"sources":["../src/component/tooltip/handler/dom/util.ts"],"names":[],"mappings":"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","file":"util.js","sourcesContent":["import type { Maybe } from '@visactor/vutils';\nimport type { FontWeight, TextAlign } from '../../../../typings';\nimport { mergeSpec } from '../../../../util/spec/merge-spec';\nimport { normalizeLayoutPaddingSpec } from '../../../../util/space';\nimport { isValid, isArray } from '@visactor/vutils';\nimport type { ITooltipTheme } from '../../interface';\nimport type { ITooltipTextStyle } from '../interface';\nimport type { ILabelStyle, IShapeStyle, IDomTooltipStyle } from './interface';\nimport type { TooltipAttributes } from '@visactor/vrender-components';\nimport { calculateLineHeight } from '@visactor/vrender-core';\n\nconst DEFAULT_SHAPE_SPACING = 8;\nconst DEFAULT_KEY_SPACING = 26;\nconst DEFAULT_VALUE_SPACING = 0;\n\nexport const getPixelPropertyStr = (num?: number | number[], defaultStr?: string) => {\n  if (isValid(num)) {\n    if (isArray(num)) {\n      return num.map(n => `${n}px`).join(' ');\n    }\n    return `${num}px`;\n  }\n  return defaultStr ?? 'initial';\n};\n\nexport const pixelPropertyStrToNumber = (str: string): number | number[] => {\n  const strArr = str.split(' ');\n  const numArr = strArr.map(n => {\n    if (!Number.isNaN(n)) {\n      return Number.parseFloat(n);\n    }\n    return Number.parseFloat(n.substring(0, n.length - 2));\n  });\n  if (numArr.length === 1) {\n    return numArr[0];\n  }\n  return numArr;\n};\n\nexport function getDomStyles(attributes?: Maybe<TooltipAttributes>): IDomTooltipStyle {\n  const {\n    panel = {},\n    title: titleAttribute,\n    content: contentAttribute,\n    titleStyle = {},\n    contentStyle = {},\n    padding,\n    keyWidth,\n    valueWidth,\n    enterable,\n    transitionDuration\n  } = attributes ?? {};\n\n  const {\n    fill: backgroundColor,\n    shadow,\n    shadowBlur,\n    shadowColor,\n    shadowOffsetX,\n    shadowOffsetY,\n    shadowSpread,\n    cornerRadius,\n    stroke: strokeColor,\n    lineWidth = 0,\n    width = 0,\n    height = 0\n  } = panel;\n\n  const { value: title = {} } = titleStyle;\n  const { shape = {}, key = {}, value = {} } = contentStyle;\n\n  const shapeStyle = getShapeStyle(shape);\n  const keyStyle = getLabelStyle(key);\n  const valueStyle = getLabelStyle(value);\n  const { bottom, left, right, top } = normalizeLayoutPaddingSpec(padding);\n\n  const styles: IDomTooltipStyle = {\n    panel: {\n      width: getPixelPropertyStr(width + lineWidth * 2),\n      minHeight: getPixelPropertyStr(height + lineWidth * 2),\n      paddingBottom: getPixelPropertyStr(bottom as number),\n      paddingLeft: getPixelPropertyStr(left as number),\n      paddingRight: getPixelPropertyStr(right as number),\n      paddingTop: getPixelPropertyStr(top as number),\n      borderColor: strokeColor as string,\n      borderWidth: getPixelPropertyStr(lineWidth),\n      borderRadius: getPixelPropertyStr(cornerRadius),\n      backgroundColor: backgroundColor ? `${backgroundColor}` : 'transparent',\n      boxShadow: shadow\n        ? `${shadowOffsetX}px ${shadowOffsetY}px ${shadowBlur}px ${shadowSpread}px ${shadowColor}`\n        : 'initial',\n      pointerEvents: enterable ? 'auto' : 'none',\n      transitionDuration: transitionDuration ? `${transitionDuration}ms` : 'initial',\n      transitionProperty: transitionDuration ? 'transform' : 'initial',\n      transitionTimingFunction: transitionDuration ? 'ease-out' : 'initial'\n    },\n    title: {\n      marginTop: '0px',\n      marginBottom: contentAttribute?.length ? getPixelPropertyStr(titleAttribute?.spaceRow) : '0px',\n      ...getLabelStyle(mergeSpec({}, title, titleAttribute?.value))\n    },\n    content: {},\n    shapeColumn: {\n      common: shapeStyle,\n      items: [],\n      width: getPixelPropertyStr(shape.size),\n      marginRight: getPixelPropertyStr(shape.spacing ?? DEFAULT_SHAPE_SPACING),\n      marginBottom: getPixelPropertyStr(-(contentAttribute?.[contentAttribute?.length - 1]?.spaceRow ?? 0))\n    },\n    keyColumn: {\n      common: keyStyle,\n      items: contentAttribute?.map(\n        ({ key, spaceRow }, i) =>\n          ({\n            marginTop: '0px',\n            marginBottom: i < contentAttribute.length - 1 ? getPixelPropertyStr(spaceRow) : '0px',\n            ...keyStyle,\n            ...getLabelStyle(key as ITooltipTextStyle),\n            ...(key?.multiLine ? { width: getPixelPropertyStr(Math.ceil(key.width)) } : undefined) // 对多行文本使用定宽\n          } as ILabelStyle)\n      ),\n      width: getPixelPropertyStr(keyWidth),\n      marginRight: getPixelPropertyStr(key.spacing ?? DEFAULT_KEY_SPACING)\n    },\n    valueColumn: {\n      common: valueStyle,\n      items: contentAttribute?.map(\n        ({ value, spaceRow }, i) =>\n          ({\n            marginTop: '0px',\n            marginBottom: i < contentAttribute.length - 1 ? getPixelPropertyStr(spaceRow) : '0px',\n            ...valueStyle,\n            ...getLabelStyle(value as ITooltipTextStyle),\n            ...(value?.multiLine ? { width: getPixelPropertyStr(Math.ceil(value.width)) } : undefined) // 对多行文本使用定宽\n          } as ILabelStyle)\n      ),\n      width: getPixelPropertyStr(valueWidth),\n      marginRight: getPixelPropertyStr(value.spacing ?? DEFAULT_VALUE_SPACING)\n    }\n  };\n  return styles;\n}\n\nfunction getLabelStyle(\n  labelStyle?: ITooltipTextStyle,\n  defaultStyle?: Partial<ITooltipTextStyle>\n): ILabelStyle | undefined {\n  if (!labelStyle) {\n    return undefined;\n  }\n  const {\n    fontFamily: labelFont,\n    fontSize: labelFontSize,\n    fill: labelColor,\n    textAlign,\n    lineHeight,\n    fontWeight,\n    multiLine,\n    wordBreak,\n    maxWidth\n  } = mergeSpec({}, defaultStyle, labelStyle) as ITooltipTextStyle;\n  const styleObj: ILabelStyle = {};\n\n  styleObj.fontFamily = labelFont;\n  styleObj.fontSize = getPixelPropertyStr(labelFontSize);\n  styleObj.color = labelColor as string;\n  styleObj.textAlign = textAlign as TextAlign;\n  styleObj.lineHeight = getPixelPropertyStr(calculateLineHeight(lineHeight, labelFontSize));\n  styleObj.fontWeight = fontWeight as FontWeight;\n  styleObj.whiteSpace = multiLine ? 'initial' : 'nowrap';\n  styleObj.wordBreak = multiLine ? wordBreak ?? 'break-word' : 'normal';\n  styleObj.maxWidth = getPixelPropertyStr(maxWidth);\n  return styleObj;\n}\n\nfunction getShapeStyle(\n  shapeStyle?: ITooltipTheme['shape'],\n  defaultStyle?: Partial<ITooltipTheme['shape']>\n): IShapeStyle | undefined {\n  if (!shapeStyle) {\n    return undefined;\n  }\n  const { size } = mergeSpec({}, defaultStyle, shapeStyle);\n  const styleObj: IShapeStyle = {};\n\n  styleObj.width = getPixelPropertyStr(size);\n  return styleObj;\n}\n"]}