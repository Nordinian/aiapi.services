{"version":3,"sources":["../src/chart/radar/radar-transformer.ts"],"names":[],"mappings":";;;AAAA,qCAA8C;AAC9C,oCAAwD;AAGxD,MAAa,yBAEX,SAAQ,oCAA+B;IAC7B,qBAAqB,CAAC,IAAS;;QACvC,uCACK,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,KACpC,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAE,IAAA,gBAAS,EACb;gBACE,OAAO,EAAE,KAAK;aACf,EACD,IAAI,CAAC,IAAI,CACV,EACD,UAAU,EAAE,MAAA,IAAI,CAAC,UAAU,mCAAI,MAAM,EACrC,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,WAAW,EAAE,IAAI,CAAC,WAAW,IAC7B;IACJ,CAAC;IAED,aAAa,CAAC,IAAO;;QACnB,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAE1B,CAAC,MAAA,IAAI,CAAC,IAAI,mCAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ,EAAE;gBAC5B,CAAC,YAAY,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;oBACnD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;wBACrB,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;qBACvC;gBACH,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;oBACd,IAAI,CAAC,IAAI,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;iBAC7C;aACF;QACH,CAAC,CAAC,CAAC;QAGH,IAAI,CAAC,SAAS,GAAG,IAAA,YAAK,EAAC,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;YAC9D,OAAO,IAAA,gBAAS,EACd;gBACE,aAAa,EAAE;oBACb,OAAO,EAAE,IAAI;oBACb,IAAI,EAAE;wBACJ,OAAO,EAAE,IAAI;wBACb,IAAI,EAAE,MAAM;qBACb;iBACF;aACF,EACD,YAAY,CACb,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAzDD,8DAyDC","file":"radar-transformer.js","sourcesContent":["import { array, mergeSpec } from '../../util';\nimport { RoseLikeChartSpecTransformer } from '../polar';\nimport type { IRoseChartSpec } from '../rose';\n\nexport class RadarChartSpecTransformer<\n  T extends IRoseChartSpec = IRoseChartSpec\n> extends RoseLikeChartSpecTransformer<T> {\n  protected _getDefaultSeriesSpec(spec: any): any {\n    return {\n      ...super._getDefaultSeriesSpec(spec),\n      seriesField: spec.seriesField,\n      line: spec.line,\n      point: spec.point,\n      stack: spec.stack,\n      percent: spec.percent,\n      area: mergeSpec(\n        {\n          visible: false\n        },\n        spec.area\n      ),\n      seriesMark: spec.seriesMark ?? 'area',\n      activePoint: spec.activePoint,\n      pointDis: spec.pointDis,\n      pointDisMul: spec.pointDisMul,\n      markOverlap: spec.markOverlap\n    };\n  }\n\n  transformSpec(spec: T) {\n    super.transformSpec(spec);\n    //默认不显示轴的domainLine和Tick\n    (spec.axes ?? []).forEach((axis: any) => {\n      if (axis.orient === 'radius') {\n        ['domainLine', 'label', 'tick'].forEach(configName => {\n          if (!axis[configName]) {\n            axis[configName] = { visible: false };\n          }\n        });\n        if (!axis.grid) {\n          axis.grid = { visible: true, smooth: true };\n        }\n      }\n    });\n\n    // set default config for crosshair\n    spec.crosshair = array(spec.crosshair || {}).map(crosshairCfg => {\n      return mergeSpec(\n        {\n          categoryField: {\n            visible: true,\n            line: {\n              visible: true,\n              type: 'line'\n            }\n          }\n        },\n        crosshairCfg\n      );\n    });\n  }\n}\n"]}