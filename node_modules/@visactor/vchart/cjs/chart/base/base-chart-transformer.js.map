{"version":3,"sources":["../src/chart/base/base-chart-transformer.ts"],"names":[],"mappings":"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","file":"base-chart-transformer.js","sourcesContent":["import { has, isValid } from '@visactor/vutils';\nimport type { IChartSpec, IRegionSpec, ISeriesSpec } from '../../typings';\nimport type { IChartSpecInfo, IChartSpecTransformer, IChartSpecTransformerOption } from '../interface';\nimport type { IModelConstructor, IModelSpecInfo } from '../../model/interface';\nimport type { IRegionConstructor, IRegionSpecInfo } from '../../region/interface';\nimport { Factory } from '../../core';\nimport type { ISeriesConstructor } from '../../series';\nimport type { IComponentConstructor } from '../../component/interface/common';\nimport { ComponentTypeEnum } from '../../component/interface';\nimport { setProperty } from '@visactor/vutils-extension';\n\nexport class BaseChartSpecTransformer<T extends IChartSpec> implements IChartSpecTransformer {\n  readonly type: string;\n  readonly seriesType: string;\n\n  protected _option: IChartSpecTransformerOption;\n\n  constructor(option: IChartSpecTransformerOption) {\n    this._option = option;\n    this.type = option.type;\n    this.seriesType = option.seriesType;\n  }\n\n  /** 此方法不建议重写 */\n  initChartSpec(chartSpec: T): IChartSpecInfo {\n    this.transformSpec(chartSpec);\n    return this.transformModelSpec(chartSpec);\n  }\n\n  /**\n   * 转换 chart spec。包含以下步骤：\n   * - 将图表 spec 统一转换为 common 图表 spec\n   * - 图表层级的在初始化阶段的 spec 修改\n   */\n  transformSpec(chartSpec: T): void {\n    if (!chartSpec.region || chartSpec.region.length === 0) {\n      chartSpec.region = [{}];\n    }\n    if (!has(chartSpec, 'tooltip')) {\n      chartSpec.tooltip = {};\n    }\n    if (isValid(chartSpec.stackInverse)) {\n      chartSpec.region.forEach(\n        (r: IRegionSpec) => !isValid(r.stackInverse) && (r.stackInverse = chartSpec.stackInverse)\n      );\n    }\n  }\n\n  /**\n   * 转换 model spec。包含以下步骤：\n   * - model 层级的主题合并\n   * - model 层级的在初始化阶段的 spec 修改，如添加 label spec\n   */\n  transformModelSpec(chartSpec: T): IChartSpecInfo {\n    const transform = (constructor: IModelConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => {\n      const { spec, specPath, specInfoPath, type } = specInfo;\n      const transformer = new constructor.transformerConstructor({\n        type,\n        getTheme: this._option.getTheme\n      });\n      // 调用 model 自己的 transformer 进行转换\n      const transformResult = transformer.transformSpec(spec, chartSpec, chartSpecInfo);\n      setProperty(chartSpec, specPath, transformResult.spec);\n      setProperty(chartSpecInfo, specInfoPath ?? specPath, {\n        ...specInfo,\n        ...transformResult\n      });\n    };\n    return this.createSpecInfo(chartSpec, transform);\n  }\n\n  /** 遍历图表 spec 中包含的所有的 model，进行 spec 转换并生成图表 spec info */\n  createSpecInfo(\n    chartSpec: T,\n    transform?: (\n      /** 当前 model 的类 */\n      constructor: IModelConstructor,\n      /** 当前 model 的 spec info */\n      specInfo: IModelSpecInfo,\n      /** 图表 spec info */\n      chartSpecInfo?: IChartSpecInfo\n    ) => void\n  ): IChartSpecInfo {\n    if (!transform) {\n      transform = (constructor: IModelConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => {\n        const { spec, specPath, specInfoPath, type } = specInfo;\n        const transformer = new constructor.transformerConstructor({\n          type,\n          getTheme: this._option.getTheme\n        });\n        setProperty(chartSpecInfo, specInfoPath ?? specPath, {\n          ...specInfo,\n          theme: transformer.getTheme(spec, chartSpec)\n        });\n      };\n    }\n\n    const currentChartSpecInfo: IChartSpecInfo = {};\n\n    // 预处理 region\n    this.forEachRegionInSpec(chartSpec, transform, currentChartSpecInfo);\n    // 预处理 series\n    this.forEachSeriesInSpec(chartSpec, transform, currentChartSpecInfo);\n    // 记录每个 region 包含哪些 series\n    let region: IRegionSpecInfo;\n    currentChartSpecInfo.series?.forEach(({ spec: { regionId, regionIndex } }, i) => {\n      if (isValid(regionId)) {\n        region = currentChartSpecInfo.region?.find(({ spec }) => spec.id === regionId);\n      } else if (isValid(regionIndex)) {\n        region = currentChartSpecInfo.region?.[regionIndex];\n      }\n      if (region || (region = currentChartSpecInfo.region?.[0])) {\n        if (!region.seriesIndexes) {\n          region.seriesIndexes = [];\n        }\n        region.seriesIndexes.push(i);\n      }\n    });\n    // 预处理 component\n    this.forEachComponentInSpec(chartSpec, transform, currentChartSpecInfo);\n    return currentChartSpecInfo;\n  }\n\n  protected _isValidSeries(seriesType: string): boolean {\n    return true;\n  }\n\n  protected _getDefaultSeriesSpec(chartSpec: any) {\n    const series: any = {\n      dataKey: chartSpec.dataKey,\n\n      hover: chartSpec.hover,\n      select: chartSpec.select,\n\n      label: chartSpec.label,\n\n      seriesStyle: chartSpec.seriesStyle,\n\n      animation: chartSpec.animation ?? this._option.animation,\n      animationThreshold: chartSpec.animationThreshold ?? this._option.getTheme?.().animationThreshold,\n      animationAppear: chartSpec.animationAppear,\n      animationDisappear: chartSpec.animationDisappear,\n      animationEnter: chartSpec.animationEnter,\n      animationUpdate: chartSpec.animationUpdate,\n      animationExit: chartSpec.animationExit,\n      animationNormal: chartSpec.animationNormal,\n\n      extensionMark: chartSpec.extensionMark,\n\n      large: chartSpec.large,\n      largeThreshold: chartSpec.largeThreshold,\n      progressiveStep: chartSpec.progressiveStep,\n      progressiveThreshold: chartSpec.progressiveThreshold,\n      background: chartSpec.seriesBackground,\n\n      invalidType: chartSpec.invalidType,\n\n      seriesField: chartSpec.seriesField,\n\n      morph: chartSpec.morph\n    };\n    return series;\n  }\n\n  /** 遍历 spec 中每个有效的 region */\n  forEachRegionInSpec<K>(\n    chartSpec: T,\n    callbackfn: (constructor: IRegionConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => K,\n    chartSpecInfo?: IChartSpecInfo\n  ): K[] {\n    const regionSpec = (chartSpec.region as IRegionSpec[]) ?? [];\n    return regionSpec.map((spec, index) =>\n      callbackfn(\n        Factory.getRegionInType('region'),\n        {\n          spec,\n          specIndex: index,\n          specPath: ['region', index],\n          type: 'region'\n        },\n        chartSpecInfo\n      )\n    );\n  }\n\n  /** 遍历 spec 中每个有效的 series */\n  forEachSeriesInSpec<K>(\n    chartSpec: T,\n    callbackfn: (constructor: ISeriesConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => K,\n    chartSpecInfo?: IChartSpecInfo\n  ): K[] {\n    const seriesSpec = (chartSpec.series as ISeriesSpec[]) ?? [];\n    return seriesSpec.map((spec, index) =>\n      callbackfn(\n        Factory.getSeriesInType(spec.type),\n        {\n          spec,\n          specIndex: index,\n          specPath: ['series', index],\n          type: spec.type\n        },\n        chartSpecInfo\n      )\n    );\n  }\n\n  /** 遍历 spec 中每个有效的 component */\n  forEachComponentInSpec<K>(\n    chartSpec: T,\n    callbackfn: (constructor: IComponentConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => K,\n    chartSpecInfo?: IChartSpecInfo\n  ): K[] {\n    const results: K[] = [];\n    const components = Factory.getComponents();\n\n    // 坐标轴组件只需要调用一次\n    let cartesianAxis: IComponentConstructor;\n    let polarAxis: IComponentConstructor;\n    let geoCoordinate: IComponentConstructor;\n    let label: IComponentConstructor;\n    let totalLabel: IComponentConstructor;\n    const noAxisComponents = [];\n    for (let index = 0; index < components.length; index++) {\n      const { cmp, alwaysCheck } = components[index];\n      if (cmp.type.startsWith(ComponentTypeEnum.cartesianAxis)) {\n        cartesianAxis = cmp;\n      } else if (cmp.type.startsWith(ComponentTypeEnum.polarAxis)) {\n        polarAxis = cmp;\n      } else if (cmp.type === ComponentTypeEnum.geoCoordinate) {\n        geoCoordinate = cmp;\n      } else if (alwaysCheck || chartSpec[cmp.specKey ?? cmp.type]) {\n        if (cmp.type === ComponentTypeEnum.label) {\n          label = cmp;\n        } else if (cmp.type === ComponentTypeEnum.totalLabel) {\n          totalLabel = cmp;\n        }\n        noAxisComponents.push(cmp);\n      }\n    }\n\n    let hasInitAxis = false;\n    // NOTE: 坐标轴组件需要在其他组件之前创建\n    if (cartesianAxis) {\n      const infoList = cartesianAxis.getSpecInfo(chartSpec);\n      if (infoList?.length > 0) {\n        hasInitAxis = true;\n        infoList.forEach(info => {\n          const cmp = Factory.getComponentInKey(info.type);\n          results.push(callbackfn(cmp, info, chartSpecInfo));\n        });\n      }\n    }\n\n    if (polarAxis && !hasInitAxis) {\n      const infoList = polarAxis.getSpecInfo(chartSpec);\n      if (infoList?.length > 0) {\n        hasInitAxis = true;\n        infoList.forEach(info => {\n          const cmp = Factory.getComponentInKey(info.type);\n          results.push(callbackfn(cmp, info, chartSpecInfo));\n        });\n      }\n    }\n\n    if (geoCoordinate && !hasInitAxis) {\n      geoCoordinate.getSpecInfo(chartSpec)?.forEach(info => {\n        results.push(callbackfn(geoCoordinate, info, chartSpecInfo));\n      });\n    }\n\n    if (label && chartSpecInfo) {\n      label.getSpecInfo(chartSpec, chartSpecInfo)?.forEach(info => {\n        results.push(callbackfn(label, info, chartSpecInfo));\n      });\n    }\n    if (totalLabel && chartSpecInfo) {\n      totalLabel.getSpecInfo(chartSpec, chartSpecInfo)?.forEach(info => {\n        results.push(callbackfn(totalLabel, info, chartSpecInfo));\n      });\n    }\n\n    noAxisComponents.forEach(C => {\n      C.getSpecInfo(chartSpec)?.forEach(info => {\n        results.push(callbackfn(C, info, chartSpecInfo));\n      });\n    });\n\n    return results;\n  }\n}\n"]}