import React, { useContext, useEffect } from "react";

import { isEqual, isNil, pickWithout } from "@visactor/vutils";

import RootChartContext from "../context/chart";

import { bindEventsToChart } from "../eventsUtils";

import { uid } from "../util";

export const createComponent = (componentName, specName, supportedEvents, isSingle) => {
    const ignoreKeys = [ "id", "updateId" ], notSpecKeys = supportedEvents ? Object.keys(supportedEvents).concat(ignoreKeys) : ignoreKeys, Comp = props => {
        const context = useContext(RootChartContext), id = React.useRef(isNil(props.id) ? uid(specName) : props.id), eventsBinded = React.useRef(null), updateId = React.useRef(props.updateId), componentSpec = React.useRef();
        if (props.updateId !== updateId.current) {
            updateId.current = props.updateId;
            !!supportedEvents && bindEventsToChart(context.chart, props, eventsBinded.current, supportedEvents) && (eventsBinded.current = props);
        } else {
            const newComponentSpec = pickWithout(props, notSpecKeys);
            isEqual(newComponentSpec, componentSpec.current) || (componentSpec.current = newComponentSpec, 
            updateToContext(context, id.current, specName, isSingle, newComponentSpec));
        }
        return useEffect((() => () => {
            supportedEvents && bindEventsToChart(context.chart, null, eventsBinded.current, supportedEvents), 
            deleteToContext(context, id.current, specName, isSingle);
        }), []), null;
    };
    return Comp.displayName = componentName, Comp;
};

const updateToContext = (context, id, specName, isSingle, props) => {
    if (context.specFromChildren) {
        if (isSingle) context.specFromChildren[specName] = Object.assign({}, props); else {
            context.specFromChildren[specName] || (context.specFromChildren[specName] = []);
            const comps = context.specFromChildren[specName], index = comps.findIndex((entry => entry.id === id));
            index >= 0 ? comps[index] = Object.assign({
                id: id
            }, props) : context.specFromChildren[specName].push(Object.assign({
                id: id
            }, props));
        }
        context.isChildrenUpdated = !0;
    }
}, deleteToContext = (context, id, specName, isSingle) => {
    var _a;
    if (context.specFromChildren) if (isSingle) context.specFromChildren[specName] = null; else {
        const comps = null !== (_a = context.specFromChildren[specName]) && void 0 !== _a ? _a : [], index = comps.findIndex((entry => entry.id === id));
        if (index >= 0) {
            const newComps = comps.slice(0, index - 1).concat(comps.slice(index + 1));
            context.specFromChildren[specName] = newComps, context.isChildrenUpdated = !0;
        }
    }
};
//# sourceMappingURL=BaseComponent.js.map